id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/4275:8,safety,error,error,8,"Resolve error: call to virtual function in destructor; The following files had a destructor making a call to a virtual function. Thus, implicitly the function corresponding to the base class was getting called. In correspondence to the above issue, I would like to suggest explicitly calling the corresponding class function in the destructor, which will resolve the issue keeping the purpose constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4275:8,usability,error,error,8,"Resolve error: call to virtual function in destructor; The following files had a destructor making a call to a virtual function. Thus, implicitly the function corresponding to the base class was getting called. In correspondence to the above issue, I would like to suggest explicitly calling the corresponding class function in the destructor, which will resolve the issue keeping the purpose constant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4275
https://github.com/root-project/root/pull/4276:135,performance,I/O,I/O,135,"[ntuple] Add support for page storage in raw files; First working implementation without support for mmap. Writing is done with C file I/O, it might move to RawFile once RawFile supports writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4276
https://github.com/root-project/root/pull/4276:13,usability,support,support,13,"[ntuple] Add support for page storage in raw files; First working implementation without support for mmap. Writing is done with C file I/O, it might move to RawFile once RawFile supports writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4276
https://github.com/root-project/root/pull/4276:89,usability,support,support,89,"[ntuple] Add support for page storage in raw files; First working implementation without support for mmap. Writing is done with C file I/O, it might move to RawFile once RawFile supports writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4276
https://github.com/root-project/root/pull/4276:178,usability,support,supports,178,"[ntuple] Add support for page storage in raw files; First working implementation without support for mmap. Writing is done with C file I/O, it might move to RawFile once RawFile supports writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4276
https://github.com/root-project/root/pull/4277:124,deployability,contain,contain,124,[tcling] Return absolute paths when resolving a symlink.; This should fix the CMSSW relocation issue where the symlinks may contain. relative paths. In that case when ROOT is embedded the returned relative path. points to the wrong location. cc @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4277
https://github.com/root-project/root/pull/4278:25,usability,support,support,25,[io] Add optional mmap() support to RRawFile;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4278
https://github.com/root-project/root/pull/4279:13,deployability,Build,Build,13,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:47,deployability,version,versions,47,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:80,deployability,contain,contain,80,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:148,deployability,build,build,148,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:180,deployability,version,versions,180,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:204,deployability,version,version,204,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:302,deployability,version,version,302,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:389,deployability,build,build,389,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:480,deployability,build,build,480,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:587,deployability,version,version,587,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:668,deployability,instal,installation,668,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:47,integrability,version,versions,47,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:180,integrability,version,versions,180,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:204,integrability,version,version,204,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:302,integrability,version,version,302,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:587,integrability,version,version,587,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:286,interoperability,specif,specific,286,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:47,modifiability,version,versions,47,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:180,modifiability,version,versions,180,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:204,modifiability,version,version,204,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:302,modifiability,version,version,302,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:467,modifiability,variab,variables,467,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:587,modifiability,version,version,587,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:653,modifiability,variab,variables,653,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:108,performance,perform,performed,108,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:368,performance,perform,performed,368,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:529,security,modif,modify,529,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:108,usability,perform,performed,108,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:140,usability,user,user,140,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:368,usability,perform,performed,368,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4279:561,usability,user,user,561,"[Exp PyROOT] Build PyROOT with multiple Python versions; The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:. `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`. performed inside the build directory. . Quick summary of the commits:. (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y. (2) modify thisroot.sh to allow the user to select the Python version. (3) necessary changes to pyunittests and tutorials CMake variables. (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4279
https://github.com/root-project/root/pull/4280:4,security,sign,signature,4,fix signature in SetTraceObject documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4280
https://github.com/root-project/root/pull/4280:32,usability,document,documentation,32,fix signature in SetTraceObject documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4280
https://github.com/root-project/root/pull/4281:16,deployability,version,versions,16,Fixes for older versions of CMake that complain about libraries not having any sources;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4281
https://github.com/root-project/root/pull/4281:16,integrability,version,versions,16,Fixes for older versions of CMake that complain about libraries not having any sources;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4281
https://github.com/root-project/root/pull/4281:16,modifiability,version,versions,16,Fixes for older versions of CMake that complain about libraries not having any sources;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4281
https://github.com/root-project/root/pull/4281:39,safety,compl,complain,39,Fixes for older versions of CMake that complain about libraries not having any sources;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4281
https://github.com/root-project/root/pull/4281:39,security,compl,complain,39,Fixes for older versions of CMake that complain about libraries not having any sources;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4281
https://github.com/root-project/root/pull/4282:70,availability,cluster,cluster,70,"[ntuple] Add support for printing physical layout details; Details on cluster sizes, pages distribution, column sizes, and compression ratios can be printed with `RNTupleReader::PrintInfo(ENTupleInfo::kStorageDetails)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4282
https://github.com/root-project/root/pull/4282:70,deployability,cluster,cluster,70,"[ntuple] Add support for printing physical layout details; Details on cluster sizes, pages distribution, column sizes, and compression ratios can be printed with `RNTupleReader::PrintInfo(ENTupleInfo::kStorageDetails)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4282
https://github.com/root-project/root/pull/4282:91,interoperability,distribut,distribution,91,"[ntuple] Add support for printing physical layout details; Details on cluster sizes, pages distribution, column sizes, and compression ratios can be printed with `RNTupleReader::PrintInfo(ENTupleInfo::kStorageDetails)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4282
https://github.com/root-project/root/pull/4282:13,usability,support,support,13,"[ntuple] Add support for printing physical layout details; Details on cluster sizes, pages distribution, column sizes, and compression ratios can be printed with `RNTupleReader::PrintInfo(ENTupleInfo::kStorageDetails)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4282
https://github.com/root-project/root/pull/4283:14,integrability,batch,batched,14,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:227,integrability,batch,batch,227,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:14,performance,batch,batched,14,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:227,performance,batch,batch,227,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:183,reliability,doe,doesn,183,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:170,safety,test,test,170,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:215,safety,test,tests,215,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:170,testability,test,test,170,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4283:215,testability,test,tests,215,"[RF][WIP] Add batched function evaluations & vectorisation; Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything. Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4283
https://github.com/root-project/root/pull/4285:111,performance,content,content,111,In MakeProject avoid dereferencing deleted object.; Make sure to Clear the list 'extrainfos' before any of its content is deleted. See https://root-forum.cern.ch/t/tfile-makeproject-severely-broken-in-root-6-08-06-6-18-00/34924,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4285:15,safety,avoid,avoid,15,In MakeProject avoid dereferencing deleted object.; Make sure to Clear the list 'extrainfos' before any of its content is deleted. See https://root-forum.cern.ch/t/tfile-makeproject-severely-broken-in-root-6-08-06-6-18-00/34924,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4285:65,usability,Clear,Clear,65,In MakeProject avoid dereferencing deleted object.; Make sure to Clear the list 'extrainfos' before any of its content is deleted. See https://root-forum.cern.ch/t/tfile-makeproject-severely-broken-in-root-6-08-06-6-18-00/34924,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4285
https://github.com/root-project/root/pull/4286:5,deployability,updat,update,5,[io] update TFile docu about kReproducible bit ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4286
https://github.com/root-project/root/pull/4286:5,safety,updat,update,5,[io] update TFile docu about kReproducible bit ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4286
https://github.com/root-project/root/pull/4286:5,security,updat,update,5,[io] update TFile docu about kReproducible bit ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4286
https://github.com/root-project/root/pull/4287:1,interoperability,xml,xmlio,1,[xmlio] support TFile::kReproducible bit in TXMLFile and TSQLFile; Has same meaning as in TFile - create reproducible content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:118,performance,content,content,118,[xmlio] support TFile::kReproducible bit in TXMLFile and TSQLFile; Has same meaning as in TFile - create reproducible content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4287:8,usability,support,support,8,[xmlio] support TFile::kReproducible bit in TXMLFile and TSQLFile; Has same meaning as in TFile - create reproducible content,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4287
https://github.com/root-project/root/pull/4288:85,deployability,depend,depending,85,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:220,deployability,observ,observed,220,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:85,integrability,depend,depending,85,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:265,interoperability,plug,plugin,265,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:85,modifiability,depend,depending,85,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:328,performance,perform,performance,328,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:85,safety,depend,depending,85,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:85,testability,depend,depending,85,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:220,testability,observ,observed,220,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4288:328,usability,perform,performance,328,"[cxxmodules] FindLibraryName should resolve possible symlinks.; In cmssw we see that depending on the invoking code the trigger function is. resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries. are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not. found in the fPendingRdicts because it was registered with the 'other'. path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4288
https://github.com/root-project/root/pull/4289:103,interoperability,convers,conversion,103,"[base] Work around precision issue, thanks clang-HEAD:; /ROOT/StringConv.hxx:103:18: warning: implicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4289
https://github.com/root-project/root/pull/4290:70,energy efficiency,optim,optimization,70,[json] fix problem with conversion vector<vector<vector<int>>>; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4290
https://github.com/root-project/root/pull/4290:24,interoperability,convers,conversion,24,[json] fix problem with conversion vector<vector<vector<int>>>; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4290
https://github.com/root-project/root/pull/4290:70,performance,optimiz,optimization,70,[json] fix problem with conversion vector<vector<vector<int>>>; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4290
https://github.com/root-project/root/pull/4291:20,availability,error,error,20,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:20,performance,error,error,20,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:20,safety,error,error,20,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:34,safety,test,test,34,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:29,testability,unit,unit,29,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:34,testability,test,test,34,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4291:20,usability,error,error,20,[ntuple] Fix linker error in unit test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4291
https://github.com/root-project/root/pull/4292:77,energy efficiency,optim,optimization,77,"[json] fix problem with conversion vector<vector<vector<int>>>, v6.18; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/. @Axel-Naumann Can you open branch for commits again?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4292
https://github.com/root-project/root/pull/4292:24,interoperability,convers,conversion,24,"[json] fix problem with conversion vector<vector<vector<int>>>, v6.18; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/. @Axel-Naumann Can you open branch for commits again?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4292
https://github.com/root-project/root/pull/4292:77,performance,optimiz,optimization,77,"[json] fix problem with conversion vector<vector<vector<int>>>, v6.18; Wrong optimization was used. Fixes https://root-forum.cern.ch/t/35782/. @Axel-Naumann Can you open branch for commits again?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4292
https://github.com/root-project/root/pull/4293:224,deployability,fail,fails,224,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:70,energy efficiency,current,current,70,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:396,energy efficiency,optim,optimized,396,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:437,energy efficiency,core,core,437,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1121,energy efficiency,optim,optimized,1121,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1143,energy efficiency,optim,optimized,1143,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1170,energy efficiency,optim,optimized,1170,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:582,interoperability,bind,bindings,582,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:744,interoperability,bind,bindings,744,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:582,modifiability,bind,bindings,582,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:744,modifiability,bind,bindings,744,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:116,performance,memor,memory,116,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:396,performance,optimiz,optimized,396,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1121,performance,optimiz,optimized,1121,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1143,performance,optimiz,optimized,1143,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1170,performance,optimiz,optimized,1170,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:224,reliability,fail,fails,224,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1306,safety,test,tests,1306,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:1306,testability,test,tests,1306,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4293:116,usability,memor,memory,116,"[PyROOT exp] Port TTree.AsMatrix feature; **Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```. #6 0x0000000004c6c270 in ?? (). #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211. #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj. entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45. #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149. #10 0x00000000004f7592 in ?? (). #11 0x00000000004fc33a in _PyModule_Clear (). #12 0x00000000004fb9d3 in PyImport_Cleanup (). #13 0x00000000004f8e14 in Py_Finalize (). #14 0x00000000004938ec in Py_Main (). #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291. #16 0x00000000004933e9 in _start (). ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4293
https://github.com/root-project/root/pull/4294:43,deployability,manag,management,43,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:114,deployability,contain,contain,114,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:501,deployability,patch,patch,501,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:576,deployability,patch,patches,576,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:43,energy efficiency,manag,management,43,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:462,interoperability,bind,bindings,462,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:462,modifiability,bind,bindings,462,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:36,performance,memor,memory,36,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:43,safety,manag,management,43,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:146,safety,test,tests,146,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:176,safety,test,tests,176,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:501,safety,patch,patch,501,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:576,safety,patch,patches,576,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:1018,safety,test,test,1018,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:1214,safety,test,test,1214,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:501,security,patch,patch,501,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:576,security,patch,patches,576,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:146,testability,test,tests,146,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:176,testability,test,tests,176,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:1018,testability,test,test,1018,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:1214,testability,test,test,1214,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:1299,testability,regress,regression-regression,1299,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:36,usability,memor,memory,36,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4294:898,usability,clear,clears,898,"[Exp PyROOT] Fixes for collections, memory management of arguments, plotOn; This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:. - roottest-python-basic-basic. - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. - tutorial-roofit-rf106_plotdecoration-py. - tutorial-roofit-rf610_visualerror-py. - pyunittests-pyroot-pyz-roodatahist-ploton. - tutorial-roofit-rf315_projectpdf-py. - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears. - tutorial-roofit-rf307_fullpereventerrors-py. - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):. - roottest-python-regression-regression.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4294
https://github.com/root-project/root/pull/4295:137,energy efficiency,current,current,137,"[Exp PyROOT] Implementation of JupyROOT and JsMVA; The packages mentioned in the title were implemented, basically copying them from the current PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4295
https://github.com/root-project/root/pull/4295:55,modifiability,pac,packages,55,"[Exp PyROOT] Implementation of JupyROOT and JsMVA; The packages mentioned in the title were implemented, basically copying them from the current PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4295
https://github.com/root-project/root/pull/4296:67,deployability,build,build,67,[PyROOT exp] Assume TTree.AsMatrix tutorial as passing; @phsft-bot build with `-Dpyroot_experimental=ON`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4296
https://github.com/root-project/root/pull/4298:47,deployability,modul,modules,47,[cxxmodules] Remove the implicitly built cling modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4298
https://github.com/root-project/root/pull/4298:47,modifiability,modul,modules,47,[cxxmodules] Remove the implicitly built cling modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4298
https://github.com/root-project/root/pull/4298:47,safety,modul,modules,47,[cxxmodules] Remove the implicitly built cling modules.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4298
https://github.com/root-project/root/pull/4299:39,deployability,build,build,39,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:212,deployability,depend,dependencies,212,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:478,deployability,build,build,478,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:522,deployability,build,build,522,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:566,deployability,build,build,566,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,deployability,depend,dependencies,637,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:653,deployability,build,build,653,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:737,deployability,build,build,737,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:212,integrability,depend,dependencies,212,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,integrability,depend,dependencies,637,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:212,modifiability,depend,dependencies,212,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,modifiability,depend,dependencies,637,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:659,performance,time,time,659,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:212,safety,depend,dependencies,212,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,safety,depend,dependencies,637,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:212,testability,depend,dependencies,212,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:637,testability,depend,dependencies,637,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4299:550,usability,usab,usable,550,"Fix problems due to copying headers to build directory; This turned out to be quite a bit harder to fix than I anticipated, but now almost all headers should be picked from the source directory, and many missing dependencies were added. After I also fix `ROOT_GENERATE_EXECUTABLE()` to use headers from the source directory, then generate headers out of `${CMAKE_BINARY_DIR}/include` and add them to their respective owning targets, we should be able to move the headers to the build directory only at the very end of the build in order to make ROOT usable from the build directory. However, in order to catch missing includes and other dependencies at build time, we need to keep using headers from the source directory only during the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4299
https://github.com/root-project/root/pull/4300:59,deployability,infrastructur,infrastructure,59,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:25,performance,perform,performance,25,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:117,performance,time,timers,117,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:141,safety,safe,safe,141,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:37,testability,instrument,instrumentation,37,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:77,testability,instrument,instrument,77,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:157,testability,simpl,simple,157,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:13,usability,support,support,13,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:25,usability,perform,performance,25,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4300:157,usability,simpl,simple,157,[ntuple] Add support for performance instrumentation; Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4300
https://github.com/root-project/root/pull/4301:0,deployability,releas,release,0,release notes about new graf2d features;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4301
https://github.com/root-project/root/pull/4302:53,deployability,build,builds,53,[cxxmodules] Invert the assert condition.; Fixes the builds with -Druntime_cxxmodules=On on OSX.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4302
https://github.com/root-project/root/pull/4302:24,testability,assert,assert,24,[cxxmodules] Invert the assert condition.; Fixes the builds with -Druntime_cxxmodules=On on OSX.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4302
https://github.com/root-project/root/pull/4304:44,deployability,build,building,44,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:92,energy efficiency,adapt,adapted,92,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:92,integrability,adapt,adapted,92,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:92,interoperability,adapt,adapted,92,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:28,modifiability,paramet,parameters,28,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:92,modifiability,adapt,adapted,92,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:214,modifiability,paramet,parameters,214,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4304:178,usability,prototyp,prototypes,178,[PyROOT] Consider reference parameters when building the template pro…; …totype. Picked and adapted from Cppyy: try to get the requested method with. GetMethodWithPrototype with prototypes that consider reference. parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4304
https://github.com/root-project/root/pull/4305:298,availability,operat,operators,298,Use more c++11 in TDirectory/TDirectoryFile/TFile classes; * use default members initializers. * use `override` specifier to clearly identify re-implemented methods. * use `nullptr` instead of 0 for all pointer values. * provide `= delete` specifier for non-implemented copy constructor and assign operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:112,interoperability,specif,specifier,112,Use more c++11 in TDirectory/TDirectoryFile/TFile classes; * use default members initializers. * use `override` specifier to clearly identify re-implemented methods. * use `nullptr` instead of 0 for all pointer values. * provide `= delete` specifier for non-implemented copy constructor and assign operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:240,interoperability,specif,specifier,240,Use more c++11 in TDirectory/TDirectoryFile/TFile classes; * use default members initializers. * use `override` specifier to clearly identify re-implemented methods. * use `nullptr` instead of 0 for all pointer values. * provide `= delete` specifier for non-implemented copy constructor and assign operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:133,security,ident,identify,133,Use more c++11 in TDirectory/TDirectoryFile/TFile classes; * use default members initializers. * use `override` specifier to clearly identify re-implemented methods. * use `nullptr` instead of 0 for all pointer values. * provide `= delete` specifier for non-implemented copy constructor and assign operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4305:125,usability,clear,clearly,125,Use more c++11 in TDirectory/TDirectoryFile/TFile classes; * use default members initializers. * use `override` specifier to clearly identify re-implemented methods. * use `nullptr` instead of 0 for all pointer values. * provide `= delete` specifier for non-implemented copy constructor and assign operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4305
https://github.com/root-project/root/pull/4310:175,availability,operat,operations,175,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:396,deployability,fail,failed,396,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:653,deployability,depend,depends,653,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:983,deployability,stack,stackoverflow,983,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1,energy efficiency,core,core,1,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:419,energy efficiency,draw,drawback,419,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:142,integrability,interfac,interface,142,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:521,integrability,pub,public,521,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:653,integrability,depend,depends,653,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:671,integrability,bridg,bridge,671,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:735,integrability,interfac,interface,735,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1083,integrability,buffer,buffer,1083,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1695,integrability,buffer,buffer,1695,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:142,interoperability,interfac,interface,142,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:671,interoperability,bridg,bridge,671,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:735,interoperability,interfac,interface,735,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:834,interoperability,socket,socket,834,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:910,interoperability,socket,socket,910,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1144,interoperability,socket,socket,1144,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:142,modifiability,interfac,interface,142,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:653,modifiability,depend,depends,653,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:735,modifiability,interfac,interface,735,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:134,performance,network,network,134,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:222,performance,time,time,222,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:396,reliability,fail,failed,396,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:52,safety,Avoid,Avoid,52,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:81,safety,avoid,avoid,81,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:653,safety,depend,depends,653,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:73,security,DNS,DNS,73,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:134,security,network,network,134,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:200,security,sign,significant,200,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:664,security,VPN,VPN,664,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:834,security,soc,socket,834,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:873,security,DNS,DNS,873,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:910,security,soc,socket,910,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1137,security,soc,sock,1137,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1144,security,soc,socket,1144,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1184,security,soc,sock,1184,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1448,security,soc,sock,1448,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1461,security,soc,sockaddr,1461,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1587,security,soc,sock,1587,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1594,security,soc,sockaddr,1594,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1731,security,soc,sock,1731,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:653,testability,depend,depends,653,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1110,testability,assert,assert,1110,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1177,testability,assert,assert,1177,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1495,testability,assert,assert,1495,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1624,testability,assert,assert,1624,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1713,testability,assert,assert,1713,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4310:1725,usability,close,close,1725,"[core] Speed-up startup by skipping GetHostByName.; Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases. more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and. consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is. the 'public' address since only information are IP, port and name ... and the name is more or so. arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try. to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to. a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen. by the server. For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine). ```. void GetPrimaryIp(char* buffer, size_t buflen). {. assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);. assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;. uint16_t kDnsPort = 53;. struct sockaddr_in serv;. memset(&serv, 0, sizeof(serv));. serv.sin_family = AF_INET;. serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);. serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));. assert(err != -1);. sockaddr_in name;. socklen_t namelen = sizeof(name);. err = getsockname(sock, (sockaddr*) &name, &namelen);. assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);. assert(p);. close(sock);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4310
https://github.com/root-project/root/pull/4311:0,deployability,Updat,Update,0,Update Release notes (startup speedup) [NOBUILDS];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4311
https://github.com/root-project/root/pull/4311:7,deployability,Releas,Release,7,Update Release notes (startup speedup) [NOBUILDS];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4311
https://github.com/root-project/root/pull/4311:0,safety,Updat,Update,0,Update Release notes (startup speedup) [NOBUILDS];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4311
https://github.com/root-project/root/pull/4311:0,security,Updat,Update,0,Update Release notes (startup speedup) [NOBUILDS];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4311
https://github.com/root-project/root/pull/4312:9,deployability,releas,release,9,Start up+release notes v614;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4312
https://github.com/root-project/root/pull/4313:9,deployability,releas,release,9,Start up+release notes v616;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4313
https://github.com/root-project/root/pull/4314:9,deployability,releas,release,9,Start up+release notes v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4314
https://github.com/root-project/root/pull/4316:120,availability,failur,failure,120,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:28,deployability,fail,failing,28,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:36,deployability,build,build,36,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:114,deployability,build,build,114,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:120,deployability,fail,failure,120,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:120,performance,failur,failure,120,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:28,reliability,fail,failing,28,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4316:120,reliability,fail,failure,120,"[Exp PyROOT] Changes to fix failing build after commit 00dcee; The commit mentioned in the title was leading to a build failure, fixed with this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4316
https://github.com/root-project/root/pull/4318:289,interoperability,prox,proxy,289,"[PyROOT][ROOT-10294] Reuse TEnum to get its underlying type; As pointed out in ROOT-10294, when using the CMSSW environment,. the lookup of an enum constant in the list of attributes of. the namespace does not succeed. This commit passes on the TEnum obtained when creating the. namespace proxy to the addition of the enum constants as. properties of the namespace, so that the underlying type of. the enum can be taken from the TEnum, and therefore we. avoid the lookup in the list of attributes of the namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4318
https://github.com/root-project/root/pull/4318:21,modifiability,Reu,Reuse,21,"[PyROOT][ROOT-10294] Reuse TEnum to get its underlying type; As pointed out in ROOT-10294, when using the CMSSW environment,. the lookup of an enum constant in the list of attributes of. the namespace does not succeed. This commit passes on the TEnum obtained when creating the. namespace proxy to the addition of the enum constants as. properties of the namespace, so that the underlying type of. the enum can be taken from the TEnum, and therefore we. avoid the lookup in the list of attributes of the namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4318
https://github.com/root-project/root/pull/4318:201,reliability,doe,does,201,"[PyROOT][ROOT-10294] Reuse TEnum to get its underlying type; As pointed out in ROOT-10294, when using the CMSSW environment,. the lookup of an enum constant in the list of attributes of. the namespace does not succeed. This commit passes on the TEnum obtained when creating the. namespace proxy to the addition of the enum constants as. properties of the namespace, so that the underlying type of. the enum can be taken from the TEnum, and therefore we. avoid the lookup in the list of attributes of the namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4318
https://github.com/root-project/root/pull/4318:454,safety,avoid,avoid,454,"[PyROOT][ROOT-10294] Reuse TEnum to get its underlying type; As pointed out in ROOT-10294, when using the CMSSW environment,. the lookup of an enum constant in the list of attributes of. the namespace does not succeed. This commit passes on the TEnum obtained when creating the. namespace proxy to the addition of the enum constants as. properties of the namespace, so that the underlying type of. the enum can be taken from the TEnum, and therefore we. avoid the lookup in the list of attributes of the namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4318
https://github.com/root-project/root/pull/4319:25,energy efficiency,draw,drawn,25,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:56,energy efficiency,draw,drawing,56,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:180,energy efficiency,draw,drawing,180,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:15,integrability,transform,transform,15,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:15,interoperability,transform,transform,15,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:148,security,control,control,148,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4319:148,testability,control,control,148,[web geom] let transform drawn geometry; One can expand drawing in Z and Radial directions - many hidden volumes will be visible then. Also provide control elements to enable axes drawing and animation. Main functionality implemented in JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4319
https://github.com/root-project/root/pull/4320:270,deployability,log,logic,270,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:128,integrability,sub,sub-class,128,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:165,interoperability,specif,specifier,165,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:368,interoperability,specif,specifier,368,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:270,safety,log,logic,270,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:345,safety,avoid,avoid,345,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:270,security,log,logic,270,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4320:270,testability,log,logic,270,"Do not use =default for TObject-derived classes constructors ROOT-10300; see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4320
https://github.com/root-project/root/pull/4321:29,safety,avoid,avoid,29,Use direct cast to double to avoid warnings in StringConv.hxx;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4321
https://github.com/root-project/root/pull/4322:153,deployability,contain,containing,153,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:255,deployability,fail,fail,255,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:274,deployability,modul,modules,274,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:274,modifiability,modul,modules,274,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:255,reliability,fail,fail,255,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:274,safety,modul,modules,274,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4322:8,usability,Help,Help,8,"[cling] Help ValuePrinter find the transaction:; If the ValuePrinter runtime header gets included,. a transaction might be emitted, and the transaction. containing the function body cannot be found anymore. This causes roottest/root/meta/getFuncBody.C to fail. with runtime modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4322
https://github.com/root-project/root/pull/4323:46,performance,I/O,I/O,46,[GSoC] Add ZSTD compression algorithm to ROOT I/O ; Open as a replacement of https://github.com/root-project/root/pull/3947,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4323
https://github.com/root-project/root/pull/4324:49,safety,test,test,49,[cxxmodules] After root-project/root@52d0d8b the test works.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4324
https://github.com/root-project/root/pull/4324:49,testability,test,test,49,[cxxmodules] After root-project/root@52d0d8b the test works.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4324
https://github.com/root-project/root/pull/4325:71,deployability,build,building,71,[PyROOT][ROOT-10292] Backport 6.18: Consider reference parameters when building ...; …the template prototype.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4325
https://github.com/root-project/root/pull/4325:55,modifiability,paramet,parameters,55,[PyROOT][ROOT-10292] Backport 6.18: Consider reference parameters when building ...; …the template prototype.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4325
https://github.com/root-project/root/pull/4325:99,usability,prototyp,prototype,99,[PyROOT][ROOT-10292] Backport 6.18: Consider reference parameters when building ...; …the template prototype.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4325
https://github.com/root-project/root/pull/4326:36,modifiability,Reu,Reuse,36,[PyROOT][ROOT-10294] Backport 6.18: Reuse TEnum to get its underlying type;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4326
https://github.com/root-project/root/pull/4328:20,deployability,version,version,20,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:54,deployability,API,API,54,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:20,integrability,version,version,20,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:54,integrability,API,API,54,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:54,interoperability,API,API,54,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:20,modifiability,version,version,20,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4328:36,usability,support,support,36,[webgui] adjust CEF version used to support different API;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4328
https://github.com/root-project/root/pull/4329:30,deployability,depend,dependency,30,Use dictionary source file as dependency for the PCH;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:30,integrability,depend,dependency,30,Use dictionary source file as dependency for the PCH;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:30,modifiability,depend,dependency,30,Use dictionary source file as dependency for the PCH;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:30,safety,depend,dependency,30,Use dictionary source file as dependency for the PCH;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4329:30,testability,depend,dependency,30,Use dictionary source file as dependency for the PCH;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4329
https://github.com/root-project/root/pull/4330:31,deployability,depend,dependencies,31,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:31,integrability,depend,dependencies,31,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:75,integrability,messag,messages,75,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:75,interoperability,messag,messages,75,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:31,modifiability,depend,dependencies,31,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:31,safety,depend,dependencies,31,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4330:31,testability,depend,dependencies,31,Use dictionary object files as dependencies for the PCH; Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4330
https://github.com/root-project/root/pull/4331:29,energy efficiency,load,loading,29,"[tcling] Temporarily disable loading rdict files.; We want to use this pull request to measure the impact on the cmssw. cc: @smuzaffar, @davidlange6, @Axel-Naumann",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:87,energy efficiency,measur,measure,87,"[tcling] Temporarily disable loading rdict files.; We want to use this pull request to measure the impact on the cmssw. cc: @smuzaffar, @davidlange6, @Axel-Naumann",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4331:29,performance,load,loading,29,"[tcling] Temporarily disable loading rdict files.; We want to use this pull request to measure the impact on the cmssw. cc: @smuzaffar, @davidlange6, @Axel-Naumann",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4331
https://github.com/root-project/root/pull/4332:0,deployability,Build,Build,0,Build type updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:11,deployability,updat,updates,11,Build type updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:11,safety,updat,updates,11,Build type updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4332:11,security,updat,updates,11,Build type updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4332
https://github.com/root-project/root/pull/4334:91,testability,regress,regression-regression,91,[Exp PyROOT] Allow from ROOT import * in Python2; This contributes to fix `roottest-python-regression-regression`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4334
https://github.com/root-project/root/pull/4336:16,safety,test,tests,16,Fix TClingUtils tests warnings;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4336:16,testability,test,tests,16,Fix TClingUtils tests warnings;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4336
https://github.com/root-project/root/pull/4337:37,deployability,log,log,37,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:220,deployability,log,log,220,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:579,integrability,interfac,interface,579,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:579,interoperability,interfac,interface,579,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:579,modifiability,interfac,interface,579,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:234,performance,perform,performance,234,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:608,reliability,doe,does,608,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:37,safety,log,log,37,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:220,safety,log,log,220,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:682,safety,Test,Test,682,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:37,security,log,log,37,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:220,security,log,log,220,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:37,testability,log,log,37,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:220,testability,log,log,220,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:682,testability,Test,Test,682,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:108,usability,progress,progress,108,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:234,usability,perform,performance,234,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:276,usability,tool,tool,276,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:398,usability,progress,progress,398,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4337:1174,usability,Feedback,Feedback,1174,"[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history; Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums. https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . .q. cd keras. python ClassificationKeras.py. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss. ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4337
https://github.com/root-project/root/pull/4339:923,availability,failur,failure,923,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:143,deployability,API,API,143,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:160,deployability,API,API,160,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:396,deployability,API,API,396,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:578,deployability,modul,modules,578,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:696,deployability,modul,modules,696,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:740,deployability,patch,patch,740,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:762,deployability,API,API,762,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:923,deployability,fail,failure,923,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:950,deployability,build,builds,950,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:143,integrability,API,API,143,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:160,integrability,API,API,160,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:396,integrability,API,API,396,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:456,integrability,interfac,interface,456,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:762,integrability,API,API,762,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:143,interoperability,API,API,143,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:160,interoperability,API,API,160,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:396,interoperability,API,API,396,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:456,interoperability,interfac,interface,456,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:762,interoperability,API,API,762,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:456,modifiability,interfac,interface,456,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:578,modifiability,modul,modules,578,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:696,modifiability,modul,modules,696,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:923,performance,failur,failure,923,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:600,reliability,diagno,diagnostics,600,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:801,reliability,doe,does,801,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:923,reliability,fail,failure,923,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:31,safety,valid,valid,31,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:237,safety,valid,valid,237,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:411,safety,valid,valid,411,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:487,safety,valid,valid,487,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:578,safety,modul,modules,578,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:696,safety,modul,modules,696,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:740,safety,patch,patch,740,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:746,safety,avoid,avoids,746,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:918,safety,test,test,918,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:740,security,patch,patch,740,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:600,testability,diagno,diagnostics,600,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4339:918,testability,test,test,918,"[cxxmodules] Use common-rooted valid source location.; Over the years we have a pathological issue with cling when it calls directly. compiler API. Most of the API assume they are called from code residing in a. text file. This code has valid source locations which can be used for. comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling. should have an interface which gives a pseudo-valid, commonly-rooted unique. source location. We are bitten by this fact when preloading modules as if we have diagnostics. they cannot be ordered due to the fact that the compared decls from two. different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have. this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4339
https://github.com/root-project/root/pull/4340:1,reliability,rca,rcanvas,1,[rcanvas] use RCanvas size when starting new web browser window; Reserve extra space for canvas menu,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4340
https://github.com/root-project/root/pull/4340:14,reliability,RCa,RCanvas,14,[rcanvas] use RCanvas size when starting new web browser window; Reserve extra space for canvas menu,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4340
https://github.com/root-project/root/pull/4340:96,usability,menu,menu,96,[rcanvas] use RCanvas size when starting new web browser window; Reserve extra space for canvas menu,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4340
https://github.com/root-project/root/pull/4341:10,integrability,configur,configure,10,[rcanvas] configure browser size when RCanvas larger than 10x10 pixels;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4341:10,modifiability,configur,configure,10,[rcanvas] configure browser size when RCanvas larger than 10x10 pixels;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4341:1,reliability,rca,rcanvas,1,[rcanvas] configure browser size when RCanvas larger than 10x10 pixels;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4341:38,reliability,RCa,RCanvas,38,[rcanvas] configure browser size when RCanvas larger than 10x10 pixels;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4341:10,security,configur,configure,10,[rcanvas] configure browser size when RCanvas larger than 10x10 pixels;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4341
https://github.com/root-project/root/pull/4342:71,integrability,messag,message,71,Fix root-config now that 'thread' option is always enabled; See commit message for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4342:71,interoperability,messag,message,71,Fix root-config now that 'thread' option is always enabled; See commit message for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4342
https://github.com/root-project/root/pull/4343:41,interoperability,convers,conversion,41,Fixing warning in LZ4/xxhash fprint type conversion;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4343
https://github.com/root-project/root/pull/4344:97,interoperability,format,format,97,"[ntuple] Implement Show function; This function allows to see a single entry of a ntuple in JSON format. Supported types are: std::uint8_t (but not char), bool, float, double, std::int32_t (int), std::uint32_t, std::uint64_t, std::array, std::vector, ClusterSize_t and Objects created by the user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4344:105,usability,Support,Supported,105,"[ntuple] Implement Show function; This function allows to see a single entry of a ntuple in JSON format. Supported types are: std::uint8_t (but not char), bool, float, double, std::int32_t (int), std::uint32_t, std::uint64_t, std::array, std::vector, ClusterSize_t and Objects created by the user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4344:292,usability,user,user,292,"[ntuple] Implement Show function; This function allows to see a single entry of a ntuple in JSON format. Supported types are: std::uint8_t (but not char), bool, float, double, std::int32_t (int), std::uint32_t, std::uint64_t, std::array, std::vector, ClusterSize_t and Objects created by the user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4344
https://github.com/root-project/root/pull/4345:26,usability,support,support,26,"[PyROOT][ROOT-10282] Py3: support non-ASCII character strings; In Py>=3.3, get the right size (in bytes) for non-ASCII character strings when converting them to e.g. an std::string.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4345
https://github.com/root-project/root/pull/4346:39,safety,valid,valid,39,"Reland ""[cxxmodules] Use common-rooted valid source location."";",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4346
https://github.com/root-project/root/pull/4347:37,performance,memor,memory,37,[ntuple] Avoid unnecessary meta-data memory copies;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4347
https://github.com/root-project/root/pull/4347:9,safety,Avoid,Avoid,9,[ntuple] Avoid unnecessary meta-data memory copies;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4347
https://github.com/root-project/root/pull/4347:37,usability,memor,memory,37,[ntuple] Avoid unnecessary meta-data memory copies;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4347
https://github.com/root-project/root/pull/4348:0,deployability,Updat,Update,0,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:12,deployability,build,build,12,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:39,deployability,configurat,configuration,39,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:39,integrability,configur,configuration,39,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:39,modifiability,configur,configuration,39,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:0,safety,Updat,Update,0,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:0,security,Updat,Update,0,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4348:39,security,configur,configuration,39,Update LLVM build type setup for multi-configuration generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4348
https://github.com/root-project/root/pull/4349:70,availability,failur,failures,70,[rootcling] Support rootcling -U arguments.; Should address the Gaudi failures reported in ROOT-10303.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:70,deployability,fail,failures,70,[rootcling] Support rootcling -U arguments.; Should address the Gaudi failures reported in ROOT-10303.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:70,performance,failur,failures,70,[rootcling] Support rootcling -U arguments.; Should address the Gaudi failures reported in ROOT-10303.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:70,reliability,fail,failures,70,[rootcling] Support rootcling -U arguments.; Should address the Gaudi failures reported in ROOT-10303.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4349:12,usability,Support,Support,12,[rootcling] Support rootcling -U arguments.; Should address the Gaudi failures reported in ROOT-10303.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4349
https://github.com/root-project/root/pull/4351:2919,availability,echo,echo,2919,"rs_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2928,availability,echo,echo,2928,"es.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2940,availability,echo,echo,2940,"tils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2949,availability,echo,echo,2949,"### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3884,availability,echo,echo,3884,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4103,availability,echo,echo,4103,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4149,availability,echo,echo,4149,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4202,availability,echo,echo,4202,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4257,availability,echo,echo,4257,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4310,availability,echo,echo,4310,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,deployability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:407,deployability,Updat,Update,407,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:550,deployability,instal,installation,550,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:713,deployability,build,build,713,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1200,deployability,build,build,1200,"erly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2012,deployability,instal,installing,2012,"stHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2189,deployability,updat,update,2189,". │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2213,deployability,upgrad,upgrade,2213,"a/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2224,deployability,Instal,Install,2224," events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2265,deployability,instal,install,2265,"model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2304,deployability,instal,install,2304,".csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root &",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2347,deployability,instal,install,2347,"─ multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2366,deployability,build,build-essential,2366,"it. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2399,deployability,instal,install,2399,"_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2497,deployability,instal,install,2497,". │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirect",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2767,deployability,instal,install,2767,"st.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2789,deployability,instal,install,2789,"DTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgbo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3048,deployability,instal,install,3048,". Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checko",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3127,deployability,instal,install,3127," | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3242,deployability,build,build,3242," with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3455,deployability,depend,dependency,3455,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3687,deployability,Releas,Release,3687,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3854,deployability,Releas,Release,3854,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:4084,deployability,build,build,4084,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1249,energy efficiency,model,model,1249,"quired additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1269,energy efficiency,model,model,1269,"brairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,integrability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:640,integrability,repositor,repository,640,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1229,integrability,event,events,1229," Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3455,integrability,depend,dependency,3455,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3492,integrability,sub,subdirectory,3492,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,interoperability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:640,interoperability,repositor,repository,640,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,modifiability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2213,modifiability,upgrad,upgrade,2213,"a/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3455,modifiability,depend,dependency,3455,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,reliability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:304,safety,test,tests,304,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:326,safety,Test,Tests,326,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:399,safety,test,tests,399,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:407,safety,Updat,Update,407,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:434,safety,test,tests,434,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:486,safety,test,testAll,486,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1186,safety,test,tests,1186,"integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1889,safety,test,testAll,1889,"── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2189,safety,updat,update,2189,". │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3445,safety,Test,Test,3445,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3455,safety,depend,dependency,3455,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,security,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:407,security,Updat,Update,407,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1249,security,model,model,1249,"quired additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1269,security,model,model,1269,"brairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2061,security,modif,modify,2061,"erence.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2185,security,apt,apt,2185,"ests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2189,security,updat,update,2189,". │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2209,security,apt,apt,2209,"── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2251,security,apt,apt,2251,"l.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2261,security,apt,apt,2261,"│ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2300,security,apt,apt,2300,"events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2343,security,apt,apt,2343,"│ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2395,security,apt,apt,2395,"python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/go",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2489,security,apt,apt-get,2489,"ores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2763,security,apt,apt,2763,"stBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://gith",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:2785,security,apt,apt,2785,"lpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:189,testability,integr,integrate,189,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:304,testability,test,tests,304,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:326,testability,Test,Tests,326,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:399,testability,test,tests,399,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:434,testability,test,tests,434,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:486,testability,test,testAll,486,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1186,testability,test,tests,1186,"integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1843,testability,Regress,RegressionBDTest,1843,"run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget http",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1889,testability,test,testAll,1889,"── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3445,testability,Test,Test,3445,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:3455,testability,depend,dependency,3455,"l git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh. (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh. source .bashrc. source activate base. pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3. # Get ROOT. cd. git clone git@github.com:LucaZampieri/root.git. # build with gcc. mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench. cd. # Check out the library. git clone https://github.com/google/benchmark.git. # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory. git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory. cd benchmark . mkdir build_gcc. cd build_gcc . cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost. cd. git clone --recursive https://github.com/dmlc/xgboost. cd xgboost. mkdir build_gcc. cd build_gcc. cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases. echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc. source .bashrc. # Add the folders missing from github (add them directly in github?) . cd. bdt . git checkout backend/FastInference. mkdir build. # For ROOT. echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc. echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc. echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:78,usability,document,documentation,78,"[WIP][NFC]Backend/fast inference; # This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees. @stwunsch will make another PR to integrate properly into the root system. ## Getting started. Required additional librairies. - ROOT. - for running tests you need Google Tests. - for running benchs, you need Google Benchs and XGBoost. ### Run tests . Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`. At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure. Here below we show the structure of the repository with the files of interest. . ├── bench.py. ├── bench.sh. ├── build/. ├── data/. ├── experiments/. │ ├── arrayBdtPreds.cxx. │ ├── data/. │ ├── generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4351:1785,usability,help,helpersBDTest,1785,"─ generate_data.py. │ ├── makefile. │ ├── readme.md. │ ├── run_all.sh. │ └── setup.h. ├── figures/. ├── generated_files/. ├── include/. │ ├── BranchedTree.hxx. │ ├── BranchlessTree.hxx. │ ├── CodeGeneratorsJIT.hxx. │ ├── ForestHelpers.hxx. │ ├── json.hpp. │ ├── RForestInference.hxx. │ └── TreeHelpers.hxx. ├── makefile_bench.make. ├── README.md. ├── run.sh. ├── src/. │ └── benchmark.cxx. ├── tests/. │ ├── build/. │ ├── data/. │ │ ├── events.csv. │ │ ├── model.json. │ │ ├── model.rabbit. │ │ ├── multiclass_events.csv. │ │ ├── multiclass_model.json. │ │ ├── multiclass_model.rabbit. │ │ ├── multiclass_python_groundtruths.csv. │ │ ├── multiclass_python_predictions.csv. │ │ ├── multiclass_python_scores.csv. │ │ ├── python_predictions.csv. │ │ ├── regression_events.csv. │ │ ├── regression_model.json. │ │ ├── regression_model.rabbit. │ │ ├── regression_python_groundtruths.csv. │ │ ├── regression_python_predictions.csv. │ │ ├── regression_python_scores.csv. │ ├── forestBDTest.hxx. │ ├── helpersBDTest.hxx. │ ├── makefile. │ ├── readme.md. │ ├── RegressionBDTest.hxx. │ ├── run_all.sh. │ ├── testAll.cxx. ├── train_classifiers_examples.py. └── utils.py. ### Setup script for ubuntu 18.04. It sets up a new machine, installing everything in the home folder. Please modify for your needs. ```bash. #!/bin/bash. cd. # can be ran with yes | bash this_file.sh # to say yes when prompted. sudo apt update . yes | sudo apt upgrade. # Install all the stuff with apt. sudo apt install clang # to use clang. sudo apt install g++-7 gcc-7 # to use gcc. sudo apt install libx11-dev build-essential cmake . sudo apt install git dpkg-dev cmake binutils libx11-dev libxpm-dev \. libxft-dev libxext-dev. sudo apt-get install gfortran libssl-dev libpcre3-dev \. xlibmesa-glu-dev libglew1.5-dev libftgl-dev \. libmysqlclient-dev libfftw3-dev libcfitsio-dev \. graphviz-dev libavahi-compat-libdnssd-dev \. libldap2-dev python-dev libxml2-dev libkrb5-dev \. libgsl0-dev libqt4-dev. sudo apt install gdb. sudo apt ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4351
https://github.com/root-project/root/pull/4352:2002,availability,state,state,2002,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:44,deployability,manag,manage,44,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:170,deployability,manag,managed,170,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:44,energy efficiency,manag,manage,44,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:170,energy efficiency,manag,managed,170,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1782,energy efficiency,Draw,DrawableAttributes,1782,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:433,integrability,sub,sub-classes,433,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1863,integrability,compon,components,1863,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1911,integrability,compon,components,1911,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:2002,integrability,state,state,2002,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:772,interoperability,specif,specify,772,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1863,interoperability,compon,components,1863,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1911,interoperability,compon,components,1911,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1954,interoperability,specif,specified,1954,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:2017,interoperability,coordinat,coordinate,2017,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1863,modifiability,compon,components,1863,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1911,modifiability,compon,components,1911,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:99,performance,I/O,I/O,99,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:249,performance,I/O,I/O,249,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:556,performance,I/O,I/O,556,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1038,performance,I/O,I/O,1038,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:44,safety,manag,manage,44,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:170,safety,manag,managed,170,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:611,security,access,access,611,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:621,security,modif,modify,621,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1010,testability,simpl,simple,1010,"ew way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:544,usability,support,support,544,"[RDrawable] new way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:1010,usability,simpl,simple,1010,"ew way to store attributes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4352:2012,usability,user,user-coordinate,2012,"ibutes and manage styles; This is very first attempt to make ROOT I/O conform RDrawable classes with attributes. Means objects which are managed with `shared_ptr` duplicated by direct pointer, which is used only for I/O (see `RDrawableAttributes::fContIO` member in RDrawingAttr.hxx file). Attributes stored in `std::unordered_map<std::string, std::unique_ptr<Value_t>>` class. `Value_t` has several sub-classes. It potentially can be replaced by `std::variant<bool,int,double,std::string>` once we had it full support for I/O (especially for JSON). Special ""Visitor"" class can access or modify attributes. ""Visitor"" should be base class for all kind of LineAttr, FillAttr, ... classes. Visitor can has list of default values which first: specify name and kind of existing fields, and provide defaults which can be applied to the object. RStyleNew class is set blocks of attributes with selector rule (like in vanila CSS). For the moment selector not really implemented - just simple type of class match. I/O same as for attributes, therefore RStyleNew can be transported to client in same way as attributes. In JSON attributes storage looks like:. ```. ""fAttr"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes"",. ""fContIO"" : {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::Record_t"",. ""user_class"" : """",. ""map"" : {. ""_typename"": ""unordered_map<string,ROOT::Experimental::RDrawableAttributes::Value_t*>"", . ""line_width"": {. ""_typename"" : ""ROOT::Experimental::RDrawableAttributes::DoubleValue_t"",. ""v"" : 2. }. }. }. }. ```. I can easily exclude ""_typename"" already now. . Also one can implement compressions rule for `DoubleValue_t` class - store only ""v"" data member that finally we should get:. ```. ""line_width"": 2. ```. New DrawableAttributes class can be use in `RPadLength` implementation. It has three components: ""fUser"", ""fPixel"", ""fNormal"". These components can be created only when really specified. This solves problem of **undefined** state for user-coordinate part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4352
https://github.com/root-project/root/pull/4353:32,availability,cluster,cluster,32,[ntuple] [WIP] Add asynchronous cluster cache;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4353
https://github.com/root-project/root/pull/4353:32,deployability,cluster,cluster,32,[ntuple] [WIP] Add asynchronous cluster cache;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4353
https://github.com/root-project/root/pull/4353:19,integrability,asynchron,asynchronous,19,[ntuple] [WIP] Add asynchronous cluster cache;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4353
https://github.com/root-project/root/pull/4353:19,performance,asynch,asynchronous,19,[ntuple] [WIP] Add asynchronous cluster cache;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4353
https://github.com/root-project/root/pull/4353:40,performance,cach,cache,40,[ntuple] [WIP] Add asynchronous cluster cache;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4353
https://github.com/root-project/root/pull/4355:37,deployability,depend,dependencies,37,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:74,deployability,depend,dependencies,74,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:131,deployability,build,builds,131,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:218,deployability,build,builds,218,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:226,deployability,Depend,Depending,226,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:448,deployability,depend,dependency,448,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:466,deployability,DEPEND,DEPENDS,466,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:534,deployability,depend,dependencies,534,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:37,integrability,depend,dependencies,37,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:74,integrability,depend,dependencies,74,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:226,integrability,Depend,Depending,226,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:448,integrability,depend,dependency,448,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:466,integrability,DEPEND,DEPENDS,466,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:534,integrability,depend,dependencies,534,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:37,modifiability,depend,dependencies,37,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:74,modifiability,depend,dependencies,74,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:226,modifiability,Depend,Depending,226,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:448,modifiability,depend,dependency,448,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:466,modifiability,DEPEND,DEPENDS,466,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:534,modifiability,depend,dependencies,534,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:156,reliability,doe,doesn,156,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:37,safety,depend,dependencies,37,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:74,safety,depend,dependencies,74,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:226,safety,Depend,Depending,226,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:448,safety,depend,dependency,448,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:466,safety,DEPEND,DEPENDS,466,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:534,safety,depend,dependencies,534,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:698,safety,avoid,avoid,698,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:37,testability,depend,dependencies,37,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:74,testability,depend,dependencies,74,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:226,testability,Depend,Depending,226,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:448,testability,depend,dependency,448,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:466,testability,DEPEND,DEPENDS,466,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:534,testability,depend,dependencies,534,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:344,usability,custom,custom,344,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:351,usability,command,command,351,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:490,usability,custom,custom,490,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4355:497,usability,command,command,497,"Use dictionary source files as extra dependencies for the PCH; The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source. or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as. dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that. the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4355
https://github.com/root-project/root/pull/4356:19,deployability,fail,fail,19,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:430,deployability,build,build,430,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:493,deployability,build,build,493,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:608,deployability,patch,patch,608,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:515,energy efficiency,current,current,515,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:147,integrability,encapsulat,encapsulation,147,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:685,integrability,messag,message,685,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:398,interoperability,incompatib,incompatible,398,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:588,interoperability,compatib,compatibility,588,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:685,interoperability,messag,message,685,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:147,modifiability,encapsul,encapsulation,147,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:725,modifiability,concern,concerns,725,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:19,reliability,fail,fail,19,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:76,reliability,doe,does,76,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:608,safety,patch,patch,608,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:608,security,patch,patch,608,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:725,testability,concern,concerns,725,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4356:449,usability,user,users,449,"[rootcling] Do not fail on unrecognized options.; root-project/root@72fe06a does not permit passing random options to rootcling. as improvement in encapsulation. Rootcling used to permit random flags usually. coming CXXFLAGS and it captured only -I, -D and -U. The old implementation. used to pass all flags directly to cling thus clang. This lead to allowing. the dictionaries to be compiled with incompatible to the rest of the build. flags. Some users passed their entire CXXFLAGS from the build systems and the current. rootcling implementation started to reject it breaking backward compatibility. This patch implements a sink for all unrecognized flags and issues a deprecation. message. Should address the rest of the concerns of ROOT-10303.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4356
https://github.com/root-project/root/pull/4357:66,energy efficiency,optim,optimization,66,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:99,energy efficiency,profil,profiles,99,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:66,performance,optimiz,optimization,66,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:99,performance,profil,profiles,99,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:164,performance,lock,lock,164,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:186,safety,avoid,avoid,186,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4357:164,security,lock,lock,164,"Call GetSpecialProtocols only once in TUrl::{Get,Set}Url(); Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4357
https://github.com/root-project/root/pull/4358:145,deployability,fail,failing,145,Find scope parser raii; Improve the push/pop/RAII used in findScope for the Parser and lexer. Also fixes several deficiencies 'revealed' by the 'failing' RAII. This fixes [https://sft.its.cern.ch/jira/browse/ROOT-10224],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4358:145,reliability,fail,failing,145,Find scope parser raii; Improve the push/pop/RAII used in findScope for the Parser and lexer. Also fixes several deficiencies 'revealed' by the 'failing' RAII. This fixes [https://sft.its.cern.ch/jira/browse/ROOT-10224],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4358
https://github.com/root-project/root/pull/4359:39,deployability,modul,module,39,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:76,deployability,modul,modules,76,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:161,deployability,Stack,Stack,161,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:200,deployability,modul,modules,200,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:264,deployability,modul,modules,264,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:39,modifiability,modul,module,39,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:76,modifiability,modul,modules,76,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:200,modifiability,modul,modules,200,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:264,modifiability,modul,modules,264,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:39,safety,modul,module,39,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:76,safety,modul,modules,76,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:200,safety,modul,modules,200,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4359:264,safety,modul,modules,264,Remove uncorrect DOC type from FindTBB module; CMake Warning (dev) at cmake/modules/FindTBB.cmake:111 (SET):. implicitly converting 'DOC' to 'STRING' type. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:15 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1095 (find_package). CMakeLists.txt:167 (include). This warning is for project developers. Use -Wno-dev to suppress it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4359
https://github.com/root-project/root/pull/4361:236,integrability,sub,sub-class,236,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:343,integrability,pub,public,343,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:537,integrability,pub,public,537,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:572,integrability,pub,public,572,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:106,interoperability,specif,specifier,106,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4361:128,reliability,doe,does,128,"[json] let store object as its base class; If comments for default class constructor includes JSON_asbase specifier. and object does not have extra persistent data members, only base class. data will be stored for it. . Can be used for sub-class of STL class, where object representation differs very much. Normally class `class UserVector1 : public std::vector<std::string>` stored as:. ```. {. ""_typename"" : ""UserVector1"",. ""fVector"" : [""abc"", ""zdf""]. }. ```. Now one can add comments to default constructor:. ```. class UserVector1 : public std::vector<std::string> {. public:. UserVector1() = default; ///< JSON_asbase. };. ```. In this case object will be converted into: `[""abc"", ""zdf""]`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4361
https://github.com/root-project/root/pull/4362:189,availability,error,error,189,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:214,availability,error,error,214,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:158,deployability,modul,module,158,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:443,deployability,modul,module,443,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:158,modifiability,modul,module,158,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:443,modifiability,modul,module,443,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:189,performance,error,error,189,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:214,performance,error,error,214,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:158,safety,modul,module,158,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:189,safety,error,error,189,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:214,safety,error,error,214,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:443,safety,modul,module,443,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:293,security,access,accessed,293,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:189,usability,error,error,189,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4362:214,usability,error,error,214,[PyROOT][ROOT-10304] Segfault when calling cppyy.gbl.RDataFrame; The pythonization RDataFrame.AsNumpy looks for the attribute. RDataFrameAsNumpy_ in the ROOT module and raises an attribute error if not found. This error can not be triggered if ROOT is imported but is raised if. RDataFrame is accessed through cppyy.gbl. This PR implements a. protection for this skipping the pythonization if the pythonizer. function is not found in the ROOT module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4362
https://github.com/root-project/root/pull/4364:19,deployability,build,build,19,"[RDF] Allow ""_"" to build character token (ROOT-10305).;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4364
https://github.com/root-project/root/pull/4364:35,security,token,token,35,"[RDF] Allow ""_"" to build character token (ROOT-10305).;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4364
https://github.com/root-project/root/pull/4365:205,deployability,continu,continuation,205,[PyROOT] Implement converters for Python Unicode & bytes to STL and C strings; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10282. https://sft.its.cern.ch/jira/browse/ROOT-10222. and is a continuation of:. https://github.com/root-project/root/pull/4345. that completes the implementation of converters for Python Unicode and Bytes objects to STL and C strings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:276,safety,compl,completes,276,[PyROOT] Implement converters for Python Unicode & bytes to STL and C strings; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10282. https://sft.its.cern.ch/jira/browse/ROOT-10222. and is a continuation of:. https://github.com/root-project/root/pull/4345. that completes the implementation of converters for Python Unicode and Bytes objects to STL and C strings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4365:276,security,compl,completes,276,[PyROOT] Implement converters for Python Unicode & bytes to STL and C strings; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10282. https://sft.its.cern.ch/jira/browse/ROOT-10222. and is a continuation of:. https://github.com/root-project/root/pull/4345. that completes the implementation of converters for Python Unicode and Bytes objects to STL and C strings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4365
https://github.com/root-project/root/pull/4366:59,deployability,Scale,Scale,59,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:231,deployability,Scale,Scale,231,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:294,deployability,scale,scaled,294,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:362,deployability,Scale,Scale,362,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:59,energy efficiency,Scale,Scale,59,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:231,energy efficiency,Scale,Scale,231,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:294,energy efficiency,scale,scaled,294,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:362,energy efficiency,Scale,Scale,362,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:8,modifiability,scal,scaling,8,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:59,modifiability,Scal,Scale,59,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:231,modifiability,Scal,Scale,231,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:294,modifiability,scal,scaled,294,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:362,modifiability,Scal,Scale,362,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:59,performance,Scale,Scale,59,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:231,performance,Scale,Scale,231,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:294,performance,scale,scaled,294,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4366:362,performance,Scale,Scale,362,Fix the scaling of the global histogram statistics in TH1::Scale; This fixes the problem reported in https://root-forum.cern.ch/t/adding-weighted-histograms-now-requires-a-call-to-resetstats-bug-or-feature/35926. When calling TH1::Scale the histogram statistics (global sumw and sumw2) are not scaled. The bug was introduced in Jan 2013 (v5.99.02) with a faster Scale implementation not using TH1::Add. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4366
https://github.com/root-project/root/pull/4367:29,deployability,depend,dependency,29,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:140,deployability,depend,dependency,140,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:29,integrability,depend,dependency,29,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:49,integrability,configur,configuring,49,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:140,integrability,depend,dependency,140,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:29,modifiability,depend,dependency,29,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:49,modifiability,configur,configuring,49,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:140,modifiability,depend,dependency,140,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:29,safety,depend,dependency,29,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:140,safety,depend,dependency,140,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:49,security,configur,configuring,49,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:29,testability,depend,dependency,29,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4367:140,testability,depend,dependency,140,"[CMake] Protect move_headers dependency when not configuring ROOT.; When calling ROOT_EXECUTABLE from outside of ROOT (e.g. roottest), the. dependency on move_headers, which only works in the project ROOT,. must be ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4367
https://github.com/root-project/root/pull/4369:9,usability,support,support,9,[IO] Add support unique_ptr in the 'Streaming' part of TGenCollectionProxy; This fixes ROOT-10306.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4369
https://github.com/root-project/root/pull/4372:240,availability,failur,failure,240,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:240,deployability,fail,failure,240,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:21,interoperability,convers,conversion,21,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:240,performance,failur,failure,240,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:240,reliability,fail,failure,240,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:235,safety,test,test,235,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:293,safety,test,testSummary,293,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:235,testability,test,test,235,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4372:293,testability,test,testSummary,293,"[PyROOT] Allow again conversion from Py2 unicode -> C string; A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:. http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4372
https://github.com/root-project/root/pull/4374:54,availability,error,error,54,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:8,deployability,version,version,8,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:8,integrability,version,version,8,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:60,integrability,messag,message,60,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:60,interoperability,messag,message,60,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:8,modifiability,version,version,8,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:54,performance,error,error,54,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:54,safety,error,error,54,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4374:54,usability,error,error,54,io: Add version number to missing StreamerInfo record error message;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4374
https://github.com/root-project/root/pull/4376:42,availability,sla,slashes,42,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:63,availability,sla,slashes,63,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:97,availability,error,errors,97,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:138,availability,error,error,138,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:310,availability,error,error,310,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:481,availability,error,error,481,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:518,availability,failur,failure,518,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:211,deployability,build,build,211,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:217,deployability,releas,release,217,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:383,deployability,build,build,383,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:389,deployability,releas,release,389,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:518,deployability,fail,failure,518,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:581,deployability,build,build,581,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:587,deployability,releas,release,587,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:97,performance,error,errors,97,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:138,performance,error,error,138,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:310,performance,error,error,310,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:481,performance,error,error,481,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:518,performance,failur,failure,518,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:42,reliability,sla,slashes,42,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:63,reliability,sla,slashes,63,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:518,reliability,fail,failure,518,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:97,safety,error,errors,97,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:138,safety,error,error,138,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:310,safety,error,error,310,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:481,safety,error,error,481,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:97,usability,error,errors,97,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:138,usability,error,error,138,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:196,usability,User,Users,196,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:246,usability,User,Users,246,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:310,usability,error,error,310,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:368,usability,User,Users,368,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:418,usability,User,Users,418,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:467,usability,CUSTOM,CUSTOMBUILD,467,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:481,usability,error,error,481,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4376:566,usability,User,Users,566,"Fix makepchinput on Windows; Convert back slashes into forward slashes. This fixes the following errors on Windows:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4376
https://github.com/root-project/root/pull/4377:270,deployability,observ,observed,270,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:42,interoperability,prox,proxies,42,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:445,interoperability,prox,proxy,445,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:572,interoperability,prox,proxy,572,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:691,interoperability,prox,proxy,691,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:974,interoperability,prox,proxies,974,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:427,performance,time,time,427,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4377:270,testability,observ,observed,270,"[Exp PyROOT] Run cleanup to nonify Python proxies at teardown; This is related to:. https://sft.its.cern.ch/jira/browse/ROOT-10295. https://bitbucket.org/wlav/cppyy/issues/160. and should fix `projectroot.runtutorials.tutorial_pyroot_pyroot002_TTreeAsMatrix_py`. It was observed that, under some circumstances (reproduced in. Python3.6.5 using a TFile and a TTree created inside a function,. destroying the objects at teardown time), the Python proxy of. a TFile-owned object is not nonified when running RecursiveRemove. on it. The reason is that, when trying to get the proxy from its. weak reference, the result is Py_None even if the object has not. been destroyed yet. As a result, the proxy is not nonified and. later tries to double delete its internal C++ object, resulting. in a crash because the C++ TFile also deleted it before. Running EndOfProcessCleanups via a Python exit handler forces the. execution of RecursiveRemove and the right nonification of Python. proxies. This has been ported from old PyROOT (was in ROOT.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4377
https://github.com/root-project/root/pull/4378:66,availability,consist,consistency,66,Fix TMath::AreEqualAbs for the eps=0 case; This PR should fix the consistency checks used in TH1::Add (e.g. TH1::CheckAxisLimits) when the histogram bin widths are zero. . See for example https://root-forum.cern.ch/t/exception-on-th1/35026,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4378
https://github.com/root-project/root/pull/4378:217,safety,except,exception-on-,217,Fix TMath::AreEqualAbs for the eps=0 case; This PR should fix the consistency checks used in TH1::Add (e.g. TH1::CheckAxisLimits) when the histogram bin widths are zero. . See for example https://root-forum.cern.ch/t/exception-on-th1/35026,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4378
https://github.com/root-project/root/pull/4378:66,usability,consist,consistency,66,Fix TMath::AreEqualAbs for the eps=0 case; This PR should fix the consistency checks used in TH1::Add (e.g. TH1::CheckAxisLimits) when the histogram bin widths are zero. . See for example https://root-forum.cern.ch/t/exception-on-th1/35026,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4378
https://github.com/root-project/root/pull/4379:168,security,modif,modified,168,Fix saving C/C++ functions in a macro (.C file). ; These functions are tagged by using a * as first character in their name. This functionality was broken when TF1 was modified in Jan 2015 for 6.04. This fixes the problem reported at https://root-forum.cern.ch/t/how-to-save-a-user-defined-function/35826/7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4379
https://github.com/root-project/root/pull/4379:277,usability,user,user-defined-function,277,Fix saving C/C++ functions in a macro (.C file). ; These functions are tagged by using a * as first character in their name. This functionality was broken when TF1 was modified in Jan 2015 for 6.04. This fixes the problem reported at https://root-forum.cern.ch/t/how-to-save-a-user-defined-function/35826/7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4379
https://github.com/root-project/root/pull/4381:14,availability,error,error,14,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:69,availability,sla,slashes,69,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:148,availability,error,errors,148,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:178,availability,error,error,178,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:350,availability,error,error,350,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:521,availability,error,error,521,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:558,availability,failur,failure,558,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:819,availability,error,error,819,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:910,availability,Error,Error,910,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:251,deployability,build,build,251,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:257,deployability,releas,release,257,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:423,deployability,build,build,423,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:429,deployability,releas,release,429,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:558,deployability,fail,failure,558,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:621,deployability,build,build,621,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:627,deployability,releas,release,627,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:750,deployability,build,build,750,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:883,deployability,build,build,883,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:950,deployability,fail,failed,950,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:762,energy efficiency,core,core,762,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:717,interoperability,share,shared,717,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:14,performance,error,error,14,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:148,performance,error,errors,148,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:178,performance,error,error,178,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:350,performance,error,error,350,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:521,performance,error,error,521,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:558,performance,failur,failure,558,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:819,performance,error,error,819,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:910,performance,Error,Error,910,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:69,reliability,sla,slashes,69,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:558,reliability,fail,failure,558,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:950,reliability,fail,failed,950,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:14,safety,error,error,14,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:148,safety,error,errors,148,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:178,safety,error,error,178,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:350,safety,error,error,350,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:521,safety,error,error,521,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:775,safety,test,test,775,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:819,safety,error,error,819,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:910,safety,Error,Error,910,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:775,testability,test,test,775,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:14,usability,error,error,14,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:148,usability,error,errors,148,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:178,usability,error,error,178,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:236,usability,User,Users,236,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:286,usability,User,Users,286,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:350,usability,error,error,350,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:408,usability,User,Users,408,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:458,usability,User,Users,458,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:507,usability,CUSTOM,CUSTOMBUILD,507,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:521,usability,error,error,521,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:606,usability,User,Users,606,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:735,usability,User,Users,735,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:819,usability,error,error,819,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:868,usability,User,Users,868,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4381:910,usability,Error,Error,910,"Fix rootcling error on Windows; Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:. input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\GSL\2.5\include"",. ^~. input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]. ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",. ^~. CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):. Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll. input_line_12:7:4: error: \U used with no following hex digits. ""C:\Users\bellenot\build\debug\include"",. ^~. Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4381
https://github.com/root-project/root/pull/4382:62,deployability,build,builds,62,[RF][NFC] Adjust threshold for cache checking in RooFit debug builds.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4382
https://github.com/root-project/root/pull/4382:31,performance,cach,cache,31,[RF][NFC] Adjust threshold for cache checking in RooFit debug builds.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4382
https://github.com/root-project/root/pull/4383:32,deployability,contain,contains,32,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4383:114,deployability,automat,automatic,114,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4383:144,integrability,wrap,wrapped,144,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4383:161,integrability,wrap,wrapper,161,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4383:161,interoperability,wrapper,wrapper,161,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4383:114,testability,automat,automatic,114,"[RF] Add RooWrapperPdf.; RooFit contains a number of functions that cannot be used as PDFs since. they don't have automatic normalisation. When wrapped into the wrapper. PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4383
https://github.com/root-project/root/pull/4384:8,energy efficiency,optim,optimizations,8,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:98,energy efficiency,model,model,98,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:58,interoperability,bind,binding,58,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:58,modifiability,bind,binding,58,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:8,performance,optimiz,optimizations,8,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:37,security,control,controller,37,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:98,security,model,model,98,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:37,testability,control,controller,37,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4384:73,usability,ui,ui,73,WebEve: optimizations in EveTable.js controller; * change binding of sap.ui.table.Table with JSON model. * get table view info from from REveDataCollection's item type. * comment out debug prints,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4384
https://github.com/root-project/root/pull/4385:32,deployability,modul,module,32,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:80,deployability,modul,modules,80,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:139,deployability,modul,module,139,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:113,integrability,compon,components,113,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:154,integrability,sub,submodule,154,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:113,interoperability,compon,components,113,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:32,modifiability,modul,module,32,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:80,modifiability,modul,modules,80,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:113,modifiability,compon,components,113,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:139,modifiability,modul,module,139,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:32,safety,modul,module,32,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:80,safety,modul,modules,80,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4385:139,safety,modul,module,139,[cxxmodules] Quote the imported module.; In some cases we have dict.C which the modules system considers as two. components: one top-level module and one submodule.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4385
https://github.com/root-project/root/pull/4386:13,deployability,Updat,Update,13,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:32,deployability,updat,updates,32,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:86,deployability,version,versions,86,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:408,deployability,log,logic-and-silence-wparentheses-warning,408,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:514,deployability,updat,update,514,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:86,integrability,version,versions,86,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:60,modifiability,pac,packages,60,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:86,modifiability,version,versions,86,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:283,performance,memor,memoryregulator-and-the-deletion-of-python,283,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:13,safety,Updat,Update,13,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:32,safety,updat,updates,32,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:408,safety,log,logic-and-silence-wparentheses-warning,408,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:514,safety,updat,update,514,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:541,safety,test,tests,541,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:13,security,Updat,Update,13,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:32,security,updat,updates,32,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:408,security,log,logic-and-silence-wparentheses-warning,408,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:514,security,updat,update,514,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:408,testability,log,logic-and-silence-wparentheses-warning,408,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:541,testability,test,tests,541,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:76,usability,indicat,indicated,76,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4386:283,usability,memor,memoryregulator-and-the-deletion-of-python,283,"[Exp PyROOT] Update Cppyy; This updates the following cppyy packages to the indicated versions:. - cppyy: cppyy-1.5.3. - cppyy_backend: clingwrapper-1.10.3. - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:. https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:. https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4386
https://github.com/root-project/root/pull/4387:46,deployability,modul,modulemap,46,[cxxmodules] Add a missing bits header to the modulemap.; Should fix ROOT-10316 and ROOT-10317,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4387
https://github.com/root-project/root/pull/4387:46,modifiability,modul,modulemap,46,[cxxmodules] Add a missing bits header to the modulemap.; Should fix ROOT-10316 and ROOT-10317,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4387
https://github.com/root-project/root/pull/4387:46,safety,modul,modulemap,46,[cxxmodules] Add a missing bits header to the modulemap.; Should fix ROOT-10316 and ROOT-10317,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4387
https://github.com/root-project/root/pull/4388:63,deployability,contain,container,63,"[json] fix problem with JSON_object conversion; Also for empty container produce JSON object ""{}"", otherwise. object mapping counting fails",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:134,deployability,fail,fails,134,"[json] fix problem with JSON_object conversion; Also for empty container produce JSON object ""{}"", otherwise. object mapping counting fails",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:36,interoperability,convers,conversion,36,"[json] fix problem with JSON_object conversion; Also for empty container produce JSON object ""{}"", otherwise. object mapping counting fails",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4388:134,reliability,fail,fails,134,"[json] fix problem with JSON_object conversion; Also for empty container produce JSON object ""{}"", otherwise. object mapping counting fails",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4388
https://github.com/root-project/root/pull/4389:568,deployability,Build,BuildOld,568,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:727,deployability,Build,BuildOld,727,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:753,deployability,Build,BuildOld,753,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:949,deployability,Build,BuildOld,949,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1085,deployability,Updat,Update,1085,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1394,deployability,updat,update,1394," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1710,deployability,updat,updated,1710,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1949,deployability,updat,update,1949,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2147,deployability,updat,update,2147,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2371,deployability,continu,continue,2371,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2462,deployability,updat,update,2462,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2490,deployability,Updat,Update,2490,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2516,deployability,Updat,Update,2516,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1932,energy efficiency,load,loaded,1932,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:466,integrability,pub,public,466,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:515,integrability,pub,public,515,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:641,integrability,rout,routines,641,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1012,modifiability,variab,variable,1012,"oblems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:318,performance,memor,memory,318,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1184,performance,time,time,1184,"kup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseOb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1237,performance,Time,Time,1237," of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1558,performance,Time,Time,1558," during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1852,performance,memor,memory,1852,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1932,performance,load,loaded,1932,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:211,safety,avoid,avoid,211,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1085,safety,Updat,Update,1085,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1394,safety,updat,update,1394," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1710,safety,updat,updated,1710,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1949,safety,updat,update,1949,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2147,safety,updat,update,2147,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2462,safety,updat,update,2462,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2490,safety,Updat,Update,2490,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2516,safety,Updat,Update,2516,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1085,security,Updat,Update,1085,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1394,security,updat,update,1394," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1710,security,updat,updated,1710,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1949,security,updat,update,1949,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2147,security,updat,update,2147,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2450,security,sign,significant,2450,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2462,security,updat,update,2462,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2490,security,Updat,Update,2490,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2516,security,Updat,Update,2516,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:38,testability,emul,emulated,38,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:193,testability,simpl,simpler,193,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1408,testability,emul,emulated,1408,"espace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTru",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1447,testability,emul,emulated,1447,"ass BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:193,usability,simpl,simpler,193,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:318,usability,memor,memory,318,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:419,usability,User,User,419,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:473,usability,User,User,473,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:522,usability,User,User,522,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:581,usability,User,User,581,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:602,usability,User,User,602,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:775,usability,User,User,775,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:923,usability,User,User,923,"Fixes serious problems when replacing emulated classes in case on entangled classes.; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1221,usability,User,User,1221,". initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1268,usability,User,User,1268,"ter nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1333,usability,User,User,1333,"lanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1456,usability,User,User,1456,"mFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: signific",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1542,usability,User,User,1542,". We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1611,usability,User,User,1611,"Object triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1723,usability,clear,clear,1723,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1852,usability,memor,memory,1852,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:1916,usability,User,User,1916,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4389:2399,usability,clear,cleared,2399,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4389
https://github.com/root-project/root/pull/4390:567,deployability,Build,BuildOld,567,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:726,deployability,Build,BuildOld,726,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:752,deployability,Build,BuildOld,752,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:948,deployability,Build,BuildOld,948,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1084,deployability,Updat,Update,1084,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1393,deployability,updat,update,1393," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1709,deployability,updat,updated,1709,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1948,deployability,updat,update,1948,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2146,deployability,updat,update,2146,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2370,deployability,continu,continue,2370,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2461,deployability,updat,update,2461,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2489,deployability,Updat,Update,2489,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2515,deployability,Updat,Update,2515,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1931,energy efficiency,load,loaded,1931,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:465,integrability,pub,public,465,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:514,integrability,pub,public,514,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:640,integrability,rout,routines,640,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1011,modifiability,variab,variable,1011,"roblems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:317,performance,memor,memory,317,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1183,performance,time,time,1183,"kup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseOb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1236,performance,Time,Time,1236," of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1557,performance,Time,Time,1557," during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1851,performance,memor,memory,1851,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1931,performance,load,loaded,1931,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:210,safety,avoid,avoid,210,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1084,safety,Updat,Update,1084,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1393,safety,updat,update,1393," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1709,safety,updat,updated,1709,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1948,safety,updat,update,1948,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2146,safety,updat,update,2146,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2461,safety,updat,update,2461,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2489,safety,Updat,Update,2489,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2515,safety,Updat,Update,2515,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1084,security,Updat,Update,1084,"is should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTruePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1393,security,updat,update,1393," With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1709,security,updat,updated,1709,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1948,security,updat,update,1948,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2146,security,updat,update,2146,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2449,security,sign,significant,2449,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2461,security,updat,update,2461,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2489,security,Updat,Update,2489,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2515,security,Updat,Update,2515,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:38,testability,emul,emulated,38,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:192,testability,simpl,simpler,192,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1407,testability,emul,emulated,1407,"espace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTru",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1446,testability,emul,emulated,1446,"ass BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:192,usability,simpl,simpler,192,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:317,usability,memor,memory,317,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:418,usability,User,User,418,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:472,usability,User,User,472,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:521,usability,User,User,521,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:580,usability,User,User,580,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:601,usability,User,User,601,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:774,usability,User,User,774,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:922,usability,User,User,922,"Fixes serious problems when replacing emulated classes in case on entangled classes; This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested. initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1220,usability,User,User,1220,". initialization of TClasses (leading to the outer nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1267,usability,User,User,1267,"ter nested initialization. to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1332,usability,User,User,1332,"lanation of the reasons for and details of the actual changes. With. ```. namespace User {. class TrackerVtxBase. class BeamFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1455,usability,User,User,1455,"mFlux : public User::TrackerVtxBase. class NTrackerVtx : public User::BeamFlux. }. ```. We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: signific",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1541,usability,User,User,1541,". We had a crash during BuildOld for User::BeamFlux. ```. User::TBaseObject triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1610,usability,User,User,1610,"Object triggers replacement routines. reaches NTrackerVtx. calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1722,usability,clear,clear,1722,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1851,usability,memor,memory,1851,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:1915,usability,User,User,1915,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4390:2398,usability,clear,cleared,2398,"e::InitStreaming() and BuildOld for BeamFlux. in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass). calls Init on the TStreamerElement base. this triggers the creation of the TClass for User::TrackerVtxBase. but BuildOld kept a stale pointer to the old TClass (was baseclass variable). ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(. Usually it is just a waste of time. In this case, one such type is User::TContext::Time (an enum) use as part. of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,. another class requested the update of the emulated StreamerInfo for the (still). emulated User::TContext, this in turn provoked the (unnecessary) call to. TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of. the TClass for User::TContext … one of the steps is to absorb the existing. StreamerInfo (including the one being updated) and clear them (i.e. delete. the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr). is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```. User::TDatum is loaded. provokes update of a StreamerInfo with a TTrueParticle. *spurrious* InitStreaming provoke need for TTrueParticle TClass. start consuming the TTrueParticle TProtoClass. needs the TTrueVertex TClass. provokes update of a StreamerInfo with a TBaseObject. *spurrious* InitStreaming provoke need for TBaseObject TClass. needs the TTrueParticle TClass. Consumes the TTrueParticle TProtoClass. return fine with a good TTrueVertex TClass. continue using the already “cleared” TTrueParticle TProtoClass. ```. Solution: significant update of TStreamerElement::Update and TStreamerBase::Update. to call TStreamerBase::InitStreamer if and only if there was a change in the base. class pointer, and to call TClass::GetClass only if there is a chance of finding. a new TClass ….",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4390
https://github.com/root-project/root/pull/4391:4,deployability,build,build,4,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:21,deployability,Releas,Release,21,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:44,deployability,configurat,configuration,44,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:44,integrability,configur,configuration,44,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:44,modifiability,configur,configuration,44,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:44,security,configur,configuration,44,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4391:74,usability,Visual,Visual,74,Fix build of llvm in Release mode for multi-configuration generators …; …(Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4391
https://github.com/root-project/root/pull/4392:20,security,rotat,rotation,20,Fixed typo in Euler rotation convention used.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4392
https://github.com/root-project/root/pull/4394:33,deployability,contain,contain,33,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:103,deployability,modul,modulemap,103,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:144,deployability,version,versions,144,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:216,deployability,patch,patch,216,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:284,deployability,build,builds,284,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:19,integrability,sub,submodules,19,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:144,integrability,version,versions,144,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:230,integrability,sub,submitted,230,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:103,modifiability,modul,modulemap,103,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:144,modifiability,version,versions,144,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:103,safety,modul,modulemap,103,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:216,safety,patch,patch,216,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:246,safety,review,review,246,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:216,security,patch,patch,216,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4394:246,testability,review,review,246,[cxxmodules] Allow submodules to contain headers which may be missing.; This allows us to use a single modulemap file across multiple libstdc++ versions and gives us a way forward to deal with deprecated files. This patch will be submitted for a review upstream. It fixes our gcc 4.8 builds where codecvt and cuchar header files do not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4394
https://github.com/root-project/root/pull/4395:294,availability,redund,redundant,294,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:294,deployability,redundan,redundant,294,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:309,deployability,Modul,Modules,309,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:476,deployability,modul,modules,476,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:1064,energy efficiency,Energ,Energy,1064,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:309,modifiability,Modul,Modules,309,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:476,modifiability,modul,modules,476,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:207,performance,disk,disk,207,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:375,performance,content,content,375,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:412,performance,disk,disk,412,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:917,performance,Parallel,Parallel,917,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:294,reliability,redundan,redundant,294,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:294,safety,redund,redundant,294,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:309,safety,Modul,Modules,309,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:476,safety,modul,modules,476,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:267,security,immut,immutable,267,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:1373,security,team,team,1373,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:1404,security,team,team,1404,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:92,usability,interact,interact,92,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:216,usability,user,user,216,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:333,usability,minim,minimize,333,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:399,usability,efficien,efficient,399,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:861,usability,support,supporting,861,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:895,usability,support,supported,895,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:1171,usability,help,helping,1171,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4395:1183,usability,support,supporting,1183,"[cxxmodules] Enable runtime_cxxmodules on UNIX by default.; ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4395
https://github.com/root-project/root/pull/4396:54,deployability,configurat,configurations,54,Apply the same CMAKE_ARCHIVE_OUTPUT_DIRECTORY for all configurations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4396
https://github.com/root-project/root/pull/4396:54,integrability,configur,configurations,54,Apply the same CMAKE_ARCHIVE_OUTPUT_DIRECTORY for all configurations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4396
https://github.com/root-project/root/pull/4396:54,modifiability,configur,configurations,54,Apply the same CMAKE_ARCHIVE_OUTPUT_DIRECTORY for all configurations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4396
https://github.com/root-project/root/pull/4396:54,security,configur,configurations,54,Apply the same CMAKE_ARCHIVE_OUTPUT_DIRECTORY for all configurations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4396
https://github.com/root-project/root/pull/4397:54,safety,except,exception,54,Don't use std::regex on Windows; std::regex throws an exception on Windows - probably due to the negative lookahead,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4397
https://github.com/root-project/root/pull/4398:58,energy efficiency,draw,drawing,58,"RX and RY options for TMultiGraph; Implement reverse axis drawing options, RX and RY, for TMultiGraph as requested in ROOT-10310",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4398
https://github.com/root-project/root/pull/4399:37,availability,down,down-ordering,37,Address [cling] shutdown issues/tear-down-ordering challenges; This extents commit 292b5d5c08c213a89e5f01a6ad3fcfbe155542fa.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4399:68,modifiability,exten,extents,68,Address [cling] shutdown issues/tear-down-ordering challenges; This extents commit 292b5d5c08c213a89e5f01a6ad3fcfbe155542fa.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4399
https://github.com/root-project/root/pull/4400:11,deployability,build,build,11,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:28,deployability,Releas,Release,28,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:51,deployability,configurat,configuration,51,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:51,integrability,configur,configuration,51,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:51,modifiability,configur,configuration,51,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:51,security,configur,configuration,51,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4400:81,usability,Visual,Visual,81,Try to fix build of llvm in Release mode for multi-configuration gene…; …rators (Visual Studio and Xcode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4400
https://github.com/root-project/root/pull/4401:120,energy efficiency,current,current,120,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:306,energy efficiency,model,model,306,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:1168,energy efficiency,current,currently,1168,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:690,integrability,event,event,690,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:793,integrability,Batch,Batch,793,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:47,modifiability,refact,refactored,47,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:47,performance,refactor,refactored,47,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:793,performance,Batch,Batch,793,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:1076,safety,input,inputs,1076,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:306,security,model,model,306,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:128,usability,workflow,workflow,128,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:528,usability,support,support,528,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4401:1076,usability,input,inputs,1076,"[TMVA experimental] BDT inference engine; Adds refactored BDT inference engine (WIP PR #4351) and frontend classes. The current workflow looks like this:. **External training:**. ```python. x, y = ... some dataset ... xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3). xgb.fit(x, y). # Convert to model understood by the inference engine. ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myBDT"", ""bdts.root""). ```. **Application (Python):**. ```python. bdt = ROOT.TMVA.Experimental.RBDT[](""myBDT"", ""bdts.root""). # Native numpy support. x = np.array(... some data ...). y = bdt.Compute(x). ```. **Application (C++):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. // Single event inference. auto y = bdt.Compute({... some intializer list resolving to a std::vector ... });. // Batch inference. RTensor<float> x({ ... shape ...});. auto y2 = bdt.Compute(x);. ```. **Application (RDataFrame):**. ```cpp. TMVA::Experimental::RBDT bdt(""myBDT"", ""bdts.root"");. ROOT::RDataFrame df(...);. auto df2 = df.Define(""y"", TMVA::Experimental::Compute<N, float>(bdt), { ... N inputs ...});. ```. Comparing against XGBoost in the Python application, we outperform them currently by a factor of 4 (without jitted backend). To be improved!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4401
https://github.com/root-project/root/pull/4402:142,availability,error,errors,142,"[CMake] Bump SSE to SSE2 for 32 bit systems.; On i686, floating-point math is less accurate than on other systems. By enabling SSE2, rounding errors should accumulate to a lower extent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4402:178,modifiability,exten,extent,178,"[CMake] Bump SSE to SSE2 for 32 bit systems.; On i686, floating-point math is less accurate than on other systems. By enabling SSE2, rounding errors should accumulate to a lower extent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4402:142,performance,error,errors,142,"[CMake] Bump SSE to SSE2 for 32 bit systems.; On i686, floating-point math is less accurate than on other systems. By enabling SSE2, rounding errors should accumulate to a lower extent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4402:142,safety,error,errors,142,"[CMake] Bump SSE to SSE2 for 32 bit systems.; On i686, floating-point math is less accurate than on other systems. By enabling SSE2, rounding errors should accumulate to a lower extent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4402:142,usability,error,errors,142,"[CMake] Bump SSE to SSE2 for 32 bit systems.; On i686, floating-point math is less accurate than on other systems. By enabling SSE2, rounding errors should accumulate to a lower extent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4402
https://github.com/root-project/root/pull/4404:37,availability,down,down-ordering,37,Address [cling] shutdown issues/tear-down-ordering challenges;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4404
https://github.com/root-project/root/pull/4406:435,deployability,build,build,435,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:489,deployability,patch,patched,489,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:38,integrability,sub,subprocess,38,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:196,modifiability,variab,variables,196,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:340,modifiability,interm,intermediate,340,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:282,safety,risk,risky,282,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:489,safety,patch,patched,489,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:282,security,risk,risky,282,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:489,security,patch,patched,489,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:96,usability,command,command,96,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4406:227,usability,command,command,227,"[dictpch] From Wim: disable shell for subprocess.call:; Wim says: adding 'shell=True' makes the command run on. /bin/sh and allows you to use shell features (such as expansion and. replacement of variables). But nothing in the command seems to need that. feature, and anyway it's a risky thing to rely on, or what am I missing? Spawning an intermediate shell makes a mess of the environment when running. under conda on Mac in the non-build environment. Running the normal way as. per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4406
https://github.com/root-project/root/pull/4407:531,deployability,continu,continues,531,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:645,integrability,event,event,645,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:723,integrability,event,events,723,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:993,integrability,event,event,993,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:180,performance,network,networks,180,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:302,performance,time,time,302,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:16,safety,input,input,16,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:79,safety,input,input,79,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:200,safety,avoid,avoid,200,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:227,safety,input,input,227,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:332,safety,input,input,332,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:435,safety,input,input,435,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:564,safety,input,input,564,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:801,safety,input,inputs,801,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:809,safety,input,input,809,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:180,security,network,networks,180,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:4,usability,support,support,4,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:16,usability,input,input,16,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:64,usability,support,support,64,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:79,usability,input,input,79,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:227,usability,input,input,227,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:332,usability,input,input,332,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:435,usability,input,input,435,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:552,usability,support,support,552,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:564,usability,input,input,564,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:801,usability,input,inputs,801,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4407:809,usability,input,input,809,"Add support for input vector data in TMVA; This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). . The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). . A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4407
https://github.com/root-project/root/pull/4408:56,deployability,modul,modules,56,[cxxmodules] Do not run static inits when preloading of modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4408
https://github.com/root-project/root/pull/4408:56,modifiability,modul,modules,56,[cxxmodules] Do not run static inits when preloading of modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4408
https://github.com/root-project/root/pull/4408:56,safety,modul,modules,56,[cxxmodules] Do not run static inits when preloading of modules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4408
https://github.com/root-project/root/pull/4409:28,availability,redund,redundant,28,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:171,availability,redund,redundant,171,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:28,deployability,redundan,redundant,28,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:171,deployability,redundan,redundant,171,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:210,deployability,modul,module,210,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:112,interoperability,bind,bind,112,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:112,modifiability,bind,bind,112,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:154,modifiability,variab,variable,154,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:210,modifiability,modul,module,210,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:28,reliability,redundan,redundant,28,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:171,reliability,redundan,redundant,171,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:28,safety,redund,redundant,28,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:171,safety,redund,redundant,171,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4409:210,safety,modul,module,210,"[cxxmodules] Do not trigger redundant deserializations.; ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of. introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4409
https://github.com/root-project/root/pull/4410:76,availability,failur,failures,76,[cxxmodules] Preload libMathCore as usual.; This appease the bots' sporadic failures about missing gRandom while we are investigating.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4410
https://github.com/root-project/root/pull/4410:76,deployability,fail,failures,76,[cxxmodules] Preload libMathCore as usual.; This appease the bots' sporadic failures about missing gRandom while we are investigating.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4410
https://github.com/root-project/root/pull/4410:76,performance,failur,failures,76,[cxxmodules] Preload libMathCore as usual.; This appease the bots' sporadic failures about missing gRandom while we are investigating.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4410
https://github.com/root-project/root/pull/4410:76,reliability,fail,failures,76,[cxxmodules] Preload libMathCore as usual.; This appease the bots' sporadic failures about missing gRandom while we are investigating.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4410
https://github.com/root-project/root/pull/4411:20,deployability,build,build,20,[cxxmodules] Do not build modules for R.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:26,deployability,modul,modules,26,[cxxmodules] Do not build modules for R.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:26,modifiability,modul,modules,26,[cxxmodules] Do not build modules for R.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4411:26,safety,modul,modules,26,[cxxmodules] Do not build modules for R.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4411
https://github.com/root-project/root/pull/4412:0,deployability,Updat,Update,0,Update .gitignore;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4412
https://github.com/root-project/root/pull/4412:0,safety,Updat,Update,0,Update .gitignore;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4412
https://github.com/root-project/root/pull/4412:0,security,Updat,Update,0,Update .gitignore;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4412
https://github.com/root-project/root/pull/4413:17,deployability,fail,failing,17,[cxxmodules] Fix failing nightly test stl-stl;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4413
https://github.com/root-project/root/pull/4413:17,reliability,fail,failing,17,[cxxmodules] Fix failing nightly test stl-stl;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4413
https://github.com/root-project/root/pull/4413:33,safety,test,test,33,[cxxmodules] Fix failing nightly test stl-stl;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4413
https://github.com/root-project/root/pull/4413:33,testability,test,test,33,[cxxmodules] Fix failing nightly test stl-stl;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4413
https://github.com/root-project/root/pull/4414:37,security,ident,identifier,37,Fix a crash when using an undeclared identifier (Jira #ROOT-10193);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4414
https://github.com/root-project/root/pull/4415:29,availability,robust,robust,29,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:133,integrability,sub,subject,133,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:80,interoperability,incompatib,incompatible,80,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:100,interoperability,format,format,100,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:117,interoperability,format,format,117,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:29,reliability,robust,robust,29,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:29,safety,robust,robust,29,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:37,safety,Prevent,Prevent,37,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:45,safety,accid,accidental,45,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4415:37,security,Preven,Prevent,37,[ntuple] Make tutorials more robust; Prevent accidental use of ntuple file with incompatible binary format while the format is still subject to changes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4415
https://github.com/root-project/root/pull/4416:618,availability,state,state,618,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:309,deployability,modul,module,309,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:601,deployability,unload,unloaded,601,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:644,deployability,build,builds,644,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:618,integrability,state,state,618,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:309,modifiability,modul,module,309,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:309,safety,modul,module,309,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:443,safety,test,test,443,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4416:443,testability,test,test,443,"Always process the list of ""ClassesToUpdate""; If a TClass is in fClassesToUpdate, we must run the dictionary. function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared. to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether. parsing on demand or module are turned on (even if those can affect the likely. hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':. ```. Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3. ```. seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4416
https://github.com/root-project/root/pull/4419:36,integrability,wrap,wrapper,36,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT); Fix the GSLRngROOTWrapper class. Include also in testRandom the new engine based on MixMax (uses now Mixmax 17) and fix a compiler warning found in Ubuntu 18,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4419
https://github.com/root-project/root/pull/4419:36,interoperability,wrapper,wrapper,36,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT); Fix the GSLRngROOTWrapper class. Include also in testRandom the new engine based on MixMax (uses now Mixmax 17) and fix a compiler warning found in Ubuntu 18,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4419
https://github.com/root-project/root/pull/4419:146,safety,test,testRandom,146,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT); Fix the GSLRngROOTWrapper class. Include also in testRandom the new engine based on MixMax (uses now Mixmax 17) and fix a compiler warning found in Ubuntu 18,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4419
https://github.com/root-project/root/pull/4419:146,testability,test,testRandom,146,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT); Fix the GSLRngROOTWrapper class. Include also in testRandom the new engine based on MixMax (uses now Mixmax 17) and fix a compiler warning found in Ubuntu 18,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4419
https://github.com/root-project/root/pull/4420:168,integrability,translat,translating,168,"[textinput] Fixes issue ROOT-10285; The issue was introduced in commit 0e90d01afe13c12fafd1002a5bf9fd6f8bc2fbb0. The function `KeyBinding::ToCommandCtrl()` was (early) translating Ctrl-D (EOF) to kCmdDel. Therefore, it couldn't be handled differently in `TextInput::ProcessNewInput()`. Leave it as a kCKControl and defer translation to a delete command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4420:321,integrability,translat,translation,321,"[textinput] Fixes issue ROOT-10285; The issue was introduced in commit 0e90d01afe13c12fafd1002a5bf9fd6f8bc2fbb0. The function `KeyBinding::ToCommandCtrl()` was (early) translating Ctrl-D (EOF) to kCmdDel. Therefore, it couldn't be handled differently in `TextInput::ProcessNewInput()`. Leave it as a kCKControl and defer translation to a delete command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4420:168,interoperability,translat,translating,168,"[textinput] Fixes issue ROOT-10285; The issue was introduced in commit 0e90d01afe13c12fafd1002a5bf9fd6f8bc2fbb0. The function `KeyBinding::ToCommandCtrl()` was (early) translating Ctrl-D (EOF) to kCmdDel. Therefore, it couldn't be handled differently in `TextInput::ProcessNewInput()`. Leave it as a kCKControl and defer translation to a delete command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4420:321,interoperability,translat,translation,321,"[textinput] Fixes issue ROOT-10285; The issue was introduced in commit 0e90d01afe13c12fafd1002a5bf9fd6f8bc2fbb0. The function `KeyBinding::ToCommandCtrl()` was (early) translating Ctrl-D (EOF) to kCmdDel. Therefore, it couldn't be handled differently in `TextInput::ProcessNewInput()`. Leave it as a kCKControl and defer translation to a delete command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4420:345,usability,command,command,345,"[textinput] Fixes issue ROOT-10285; The issue was introduced in commit 0e90d01afe13c12fafd1002a5bf9fd6f8bc2fbb0. The function `KeyBinding::ToCommandCtrl()` was (early) translating Ctrl-D (EOF) to kCmdDel. Therefore, it couldn't be handled differently in `TextInput::ProcessNewInput()`. Leave it as a kCKControl and defer translation to a delete command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4420
https://github.com/root-project/root/pull/4421:351,interoperability,semant,semantics,351,"[ntuple] feature to chain ntuple-files; This PR implements a feature to concatenate ntuple-files. This can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). It works for both raw-files and .root-files. Combining raw-files and .root-files is also possible (although not advised).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4421
https://github.com/root-project/root/pull/4422:125,safety,test,test,125,[ntuple] fix vector read from columns; Fix implementation for the case where a std::string goes over the page limit. A small test is also added to test it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4422:147,safety,test,test,147,[ntuple] fix vector read from columns; Fix implementation for the case where a std::string goes over the page limit. A small test is also added to test it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4422:125,testability,test,test,125,[ntuple] fix vector read from columns; Fix implementation for the case where a std::string goes over the page limit. A small test is also added to test it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4422:147,testability,test,test,147,[ntuple] fix vector read from columns; Fix implementation for the case where a std::string goes over the page limit. A small test is also added to test it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4422
https://github.com/root-project/root/pull/4423:127,safety,test,test,127,Fix TGraphAsymmErrors::Divide for Bayesian option with mode and central interval (ROOT-10324); This fixes ROOT-10324 and a new test for TEfficiency and TGraphAsymmErrors::Divide has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4423
https://github.com/root-project/root/pull/4423:127,testability,test,test,127,Fix TGraphAsymmErrors::Divide for Bayesian option with mode and central interval (ROOT-10324); This fixes ROOT-10324 and a new test for TEfficiency and TGraphAsymmErrors::Divide has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4423
https://github.com/root-project/root/pull/4424:0,usability,document,document,0,document PxPyPzEVector; Add `ROOT::Math::PxPyPzEVector` to LorentzVector summary since it is such a commonly-used variation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4424
https://github.com/root-project/root/pull/4425:35,deployability,contain,containing,35,Add support for a top level branch containing an std::array of numerical type;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4425:4,usability,support,support,4,Add support for a top level branch containing an std::array of numerical type;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4425
https://github.com/root-project/root/pull/4426:489,availability,operat,operation,489,"Fix handling of inline namespace std::__cxx11 in TClassEdit::GetSplit; This fixes ROOT-8396. The issues was the normalization of. ""std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"". into vector<string> due to the inline namespace (__cxx11). Prior to this commit, it would work but only if the name for normalized twice. This because the order of operation was. 1. check if the name is std::basic_string or basic_string. 2. do more stuff. 3. remove std and std::[any-inlined-namespace-name]. now we extended 1 to also search for std::[any-inlined-namespace-name]::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:205,energy efficiency,alloc,allocator,205,"Fix handling of inline namespace std::__cxx11 in TClassEdit::GetSplit; This fixes ROOT-8396. The issues was the normalization of. ""std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"". into vector<string> due to the inline namespace (__cxx11). Prior to this commit, it would work but only if the name for normalized twice. This because the order of operation was. 1. check if the name is std::basic_string or basic_string. 2. do more stuff. 3. remove std and std::[any-inlined-namespace-name]. now we extended 1 to also search for std::[any-inlined-namespace-name]::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:229,energy efficiency,alloc,allocator,229,"Fix handling of inline namespace std::__cxx11 in TClassEdit::GetSplit; This fixes ROOT-8396. The issues was the normalization of. ""std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"". into vector<string> due to the inline namespace (__cxx11). Prior to this commit, it would work but only if the name for normalized twice. This because the order of operation was. 1. check if the name is std::basic_string or basic_string. 2. do more stuff. 3. remove std and std::[any-inlined-namespace-name]. now we extended 1 to also search for std::[any-inlined-namespace-name]::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:301,energy efficiency,alloc,allocator,301,"Fix handling of inline namespace std::__cxx11 in TClassEdit::GetSplit; This fixes ROOT-8396. The issues was the normalization of. ""std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"". into vector<string> due to the inline namespace (__cxx11). Prior to this commit, it would work but only if the name for normalized twice. This because the order of operation was. 1. check if the name is std::basic_string or basic_string. 2. do more stuff. 3. remove std and std::[any-inlined-namespace-name]. now we extended 1 to also search for std::[any-inlined-namespace-name]::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4426:641,modifiability,exten,extended,641,"Fix handling of inline namespace std::__cxx11 in TClassEdit::GetSplit; This fixes ROOT-8396. The issues was the normalization of. ""std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"". into vector<string> due to the inline namespace (__cxx11). Prior to this commit, it would work but only if the name for normalized twice. This because the order of operation was. 1. check if the name is std::basic_string or basic_string. 2. do more stuff. 3. remove std and std::[any-inlined-namespace-name]. now we extended 1 to also search for std::[any-inlined-namespace-name]::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4426
https://github.com/root-project/root/pull/4427:229,availability,error,error,229,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:257,availability,error,error,257,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:409,availability,error,error,409,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:197,performance,time,time,197,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:229,performance,error,error,229,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:252,performance,time,time,252,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:257,performance,error,error,257,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:404,performance,time,time,404,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:409,performance,error,error,409,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:171,safety,avoid,avoid,171,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:229,safety,error,error,229,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:257,safety,error,error,257,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:301,safety,prevent,prevent,301,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:409,safety,error,error,409,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:301,security,preven,prevent,301,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:229,usability,error,error,229,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:257,usability,error,error,257,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4427:409,usability,error,error,409,"Make TH1/2/3::interpolate const by using TAxis::FindFixBin. (Fix ROOT-9994); Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. . Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4427
https://github.com/root-project/root/pull/4428:26,deployability,depend,dependencies,26,[root7] Add missing cmake dependencies for ROOTHistDraw;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4428:26,integrability,depend,dependencies,26,[root7] Add missing cmake dependencies for ROOTHistDraw;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4428:26,modifiability,depend,dependencies,26,[root7] Add missing cmake dependencies for ROOTHistDraw;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4428:26,safety,depend,dependencies,26,[root7] Add missing cmake dependencies for ROOTHistDraw;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4428:26,testability,depend,dependencies,26,[root7] Add missing cmake dependencies for ROOTHistDraw;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4428
https://github.com/root-project/root/pull/4429:4,deployability,upgrad,upgrade,4,LZ4 upgrade to latest recommended version (multiple bug fixes);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:34,deployability,version,version,34,LZ4 upgrade to latest recommended version (multiple bug fixes);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:34,integrability,version,version,34,LZ4 upgrade to latest recommended version (multiple bug fixes);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:4,modifiability,upgrad,upgrade,4,LZ4 upgrade to latest recommended version (multiple bug fixes);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4429:34,modifiability,version,version,34,LZ4 upgrade to latest recommended version (multiple bug fixes);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4429
https://github.com/root-project/root/pull/4430:967,availability,failur,failures,967,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:1037,availability,Error,Error,1037,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:50,deployability,modul,modules,50,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:780,deployability,modul,modules-specific,780,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:967,deployability,fail,failures,967,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:221,energy efficiency,Core,Core,221,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:403,energy efficiency,Core,Core,403,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:883,energy efficiency,current,current,883,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:456,integrability,transform,transform,456,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:1045,integrability,SUB,SUB,1045,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:456,interoperability,transform,transform,456,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:788,interoperability,specif,specific,788,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:50,modifiability,modul,modules,50,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:327,modifiability,scenario,scenario,327,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:780,modifiability,modul,modules-specific,780,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:967,performance,failur,failures,967,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:1037,performance,Error,Error,1037,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:545,reliability,doe,does,545,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:967,reliability,fail,failures,967,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:50,safety,modul,modules,50,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:780,safety,modul,modules-specific,780,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:1037,safety,Error,Error,1037,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:873,usability,help,helps,873,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4430:1037,usability,Error,Error,1037,[cxxmodules] Try harder to get the IO comment for modules.; In some cases such as ROOT::Experimental::Internal::TUniWeakPtr the information about if a data member is transient is kept in the template pattern (residing in Core.pcm). The template instantiation is elsewhere (in the particular case) the ROOTHistDraw.pcm. In this scenario the LinkDef request for the particular instantiation is done after Core.pcm is built leaving no chance for rootcling to transform the comment into an annotation attibute attached to the template pattern. This does not happen very often but it may occur regularly when we start writing more templated code. We should store the IO comments for the template patterns independently on if a particular template instantiation was required. This is a modules-specific issue because the PCH includes the bulk of header files altogether and this helps the current system to place this information at the required place. This should fix the failures in tutorial-hist-h1draw and cmssw CXXModules IB:. Fatal Root Error: @SUB=TProtoClass::FindDataMember. data member with index 0 is not found in class edm::value_ptr<vector<unsigned long> >.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4430
https://github.com/root-project/root/pull/4431:23,safety,test,test,23,Fix TMVA compilation & test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4431
https://github.com/root-project/root/pull/4431:23,testability,test,test,23,Fix TMVA compilation & test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4431
https://github.com/root-project/root/pull/4432:89,deployability,manag,managing,89,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:281,deployability,observ,observed,281,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:89,energy efficiency,manag,managing,89,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:393,performance,content,content-on-x-axis,393,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:89,safety,manag,managing,89,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:281,testability,observ,observed,281,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:271,usability,behavi,behaviour,271,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4432:332,usability,behavi,behavior-for-,332,"Fix the resetting of axis ranges in TH3::ProjectionX,Y,Z (ROOT-10332); This PR fixes the managing of axis range when calling TH3::ProjectionX/Y/Z. . Now we create copy of the axes, so there is no need to rest range and its bit. This was missing and was showing the wrong behaviour observed in . https://root-forum.cern.ch/t/strange-behavior-for-th3d-projection-projectiony-delete-the-overflow-content-on-x-axis/34244. This also fixes the const of function and there is no need to use an internal const_cast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4432
https://github.com/root-project/root/pull/4433:34,deployability,releas,release,34,Openui5 - switch to latest 1.70.0 release;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4433
https://github.com/root-project/root/pull/4434:70,availability,operat,operating,70,"pkg flag now defaults to tar; For non [Windows, Ubuntu, Redhat, OS X] operating systems the pkg flag to the --last stable and --current-dev arguments didn't do anything - It should create a tar because that is the default behaviour for Unix like platforms which support bash. cc: @reikdas. This PR is at vgvassilev/cling#199.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4434
https://github.com/root-project/root/pull/4434:128,energy efficiency,current,current-dev,128,"pkg flag now defaults to tar; For non [Windows, Ubuntu, Redhat, OS X] operating systems the pkg flag to the --last stable and --current-dev arguments didn't do anything - It should create a tar because that is the default behaviour for Unix like platforms which support bash. cc: @reikdas. This PR is at vgvassilev/cling#199.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4434
https://github.com/root-project/root/pull/4434:246,interoperability,platform,platforms,246,"pkg flag now defaults to tar; For non [Windows, Ubuntu, Redhat, OS X] operating systems the pkg flag to the --last stable and --current-dev arguments didn't do anything - It should create a tar because that is the default behaviour for Unix like platforms which support bash. cc: @reikdas. This PR is at vgvassilev/cling#199.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4434
https://github.com/root-project/root/pull/4434:222,usability,behavi,behaviour,222,"pkg flag now defaults to tar; For non [Windows, Ubuntu, Redhat, OS X] operating systems the pkg flag to the --last stable and --current-dev arguments didn't do anything - It should create a tar because that is the default behaviour for Unix like platforms which support bash. cc: @reikdas. This PR is at vgvassilev/cling#199.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4434
https://github.com/root-project/root/pull/4434:262,usability,support,support,262,"pkg flag now defaults to tar; For non [Windows, Ubuntu, Redhat, OS X] operating systems the pkg flag to the --last stable and --current-dev arguments didn't do anything - It should create a tar because that is the default behaviour for Unix like platforms which support bash. cc: @reikdas. This PR is at vgvassilev/cling#199.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4434
https://github.com/root-project/root/pull/4435:0,modifiability,Reu,Reuse,0,Reuse TClass's function list;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4435
https://github.com/root-project/root/pull/4437:506,availability,Error,Error,506,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:557,availability,error,error,557,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:756,availability,error,error,756,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2262,availability,error,error,2262,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2365,availability,Error,Error,2365,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2485,availability,error,error,2485,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:371,deployability,patch,patch,371,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:499,deployability,Fail,Failed,499,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:674,deployability,modul,module,674,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:1120,deployability,build,builds,1120,"el the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is he",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2400,deployability,build,builds,2400,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:120,energy efficiency,model,model,120,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2474,integrability,messag,message,2474,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2474,interoperability,messag,message,2474,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:674,modifiability,modul,module,674,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:506,performance,Error,Error,506,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:557,performance,error,error,557,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:756,performance,error,error,756,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2262,performance,error,error,2262,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2365,performance,Error,Error,2365,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2485,performance,error,error,2485,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:499,reliability,Fail,Failed,499,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:371,safety,patch,patch,371,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:440,safety,Test,Test,440,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:506,safety,Error,Error,506,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:557,safety,error,error,557,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:674,safety,modul,module,674,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:756,safety,error,error,756,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2262,safety,error,error,2262,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2365,safety,Error,Error,2365,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2485,safety,error,error,2485,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:120,security,model,model,120,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:371,security,patch,patch,371,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:440,testability,Test,Test,440,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:506,usability,Error,Error,506,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:557,usability,error,error,557,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:756,usability,error,error,756,"PR33746: Store the 'inline'ness of a static data member with the upda…; …te record for instantiating its definition. We model the 'inline'ness as being instantiated with the static data member in. order to track whether the declaration has become a definition yet. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@317147 91177308-0d34-0410-b5e6-96231b3b80d8. This patch fixes a problem in cxxmodules and c++17 of the kind:. ```. 1/2 Test #263: tutorial-dataframe-df004_cutFlowReport ......***Failed Error regular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2262,usability,error,error,2262,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2326,usability,indicat,indicate,2326,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2365,usability,Error,Error,2365,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4437:2485,usability,error,error,2485,"ular expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C... In module 'std' imported from input_line_1:1:. /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer. static constexpr size_type npos = size_type(-1);. ^. /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here. rfind(_CharT __c, size_type __pos = npos) const noexcept;. ^. /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here. return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);. ^. input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here. *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));. ^. /usr/include/c++/7/string_view:88:41: note: previous initialization is here. static constexpr size_type npos = size_type(-1);. ^. terminate called after throwing an instance of 'std::runtime_error'. what(): . An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):. error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4437
https://github.com/root-project/root/pull/4438:36,deployability,modul,modulemap,36,[cxxmodules] Add string_view to the modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4438
https://github.com/root-project/root/pull/4438:36,modifiability,modul,modulemap,36,[cxxmodules] Add string_view to the modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4438
https://github.com/root-project/root/pull/4438:36,safety,modul,modulemap,36,[cxxmodules] Add string_view to the modulemap.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4438
https://github.com/root-project/root/pull/4439:73,availability,error,error,73,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:111,availability,error,error,111,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:22,integrability,filter,filter,22,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:73,performance,error,error,73,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:111,performance,error,error,111,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:52,safety,Prevent,Prevent,52,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:73,safety,error,error,73,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:111,safety,error,error,111,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:153,safety,input,input,153,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:52,security,Preven,Prevent,52,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:73,usability,error,error,73,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:111,usability,error,error,111,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4439:153,usability,input,input,153,Fix ACLiC on Windows (filter out system libraries); Prevent this kind of error when using ACLiC:. LINK : fatal error LNK1181: it is not possible to open input file 'VCRUNTIME140.lib',MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4439
https://github.com/root-project/root/pull/4440:100,availability,error,errors,100,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:0,deployability,Updat,Update,0,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,deployability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,integrability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,interoperability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,modifiability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:100,performance,error,errors,100,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,reliability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:0,safety,Updat,Update,0,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:100,safety,error,errors,100,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:0,security,Updat,Update,0,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,security,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:135,testability,integr,integral,135,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4440:100,usability,error,errors,100,Update roo keys pdf; I have debugged the code up till the evaluate() method and it seems ok. So the errors are maybe at the analytical integral...,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4440
https://github.com/root-project/root/pull/4441:65,usability,Support,Support,65,[RDF] Fixes / new features for CSV data source; This PR adds:. - Support for 1.0e+10 syntax for type inference of double columns. - Skipping empty lines. as a result of the issue opened here:. https://sft.its.cern.ch/jira/browse/ROOT-10313,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4441
https://github.com/root-project/root/pull/4442:83,availability,failur,failures,83,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:83,deployability,fail,failures,83,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:221,interoperability,bind,bindings,221,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:57,modifiability,interm,intermittent,57,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:221,modifiability,bind,bindings,221,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:83,performance,failur,failures,83,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:83,reliability,fail,failures,83,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:13,safety,Prevent,Prevent,13,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:36,safety,input,input,36,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:42,safety,test,test,42,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:78,safety,test,test,78,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:192,safety,test,testReport,192,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:257,safety,test,test,257,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:13,security,Preven,Prevent,13,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:42,testability,test,test,42,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:78,testability,test,test,78,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:192,testability,test,testReport,192,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:257,testability,test,test,257,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4442:36,usability,input,input,36,"[Exp PyROOT] Prevent double copy of input test file; Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4442
https://github.com/root-project/root/pull/4444:0,safety,Avoid,Avoid,0,Avoid interger overflow in TFile::GetBestBuffer.; This fixes ROOT-10334.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4444
https://github.com/root-project/root/pull/4445:44,security,CheckSum,CheckSum,44,[IO] Do not include base classes of pair in CheckSum calculation.; This fixes ROOT-10244. This is an addendum to 6983ad85eb14ba28f915d354d752287c54de00d0. and thus related to ROOT-9808.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4445
https://github.com/root-project/root/pull/4446:9,deployability,Updat,Updates,9,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:159,performance,cach,cached,159,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:9,safety,Updat,Updates,9,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:269,safety,test,test,269,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:281,safety,test,test,281,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:9,security,Updat,Updates,9,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:269,testability,test,test,269,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4446:281,testability,test,test,281,"[TCling] Updates required by Cling's Definitionshadower; Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4446
https://github.com/root-project/root/pull/4447:44,deployability,unload,unload,44,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:112,deployability,unload,unload,112,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:339,deployability,stack,stack,339,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:706,deployability,unload,unload,706,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:643,integrability,interfac,interface,643,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:643,interoperability,interfac,interface,643,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:643,modifiability,interfac,interface,643,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:693,safety,avoid,avoiding,693,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4447:489,usability,undo,undo,489,"[cling] Fixes issue in DeclUnloader: do not unload templates intantiated in the PCH; DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header. ```. root [0] std::vector<int> foo, bar;. root [1] std::swap(foo, bar);. root [2] .undo 1. root [3] std::swap(foo, bar);. IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]! ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4447
https://github.com/root-project/root/pull/4448:70,deployability,Depend,Depends,70,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:70,integrability,Depend,Depends,70,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:70,modifiability,Depend,Depends,70,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:70,safety,Depend,Depends,70,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:70,testability,Depend,Depends,70,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4448:60,usability,workflow,workflow,60,"[TMVA experimental] Add tutorials illustrating the new TMVA workflow; Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4448
https://github.com/root-project/root/pull/4449:24,deployability,build,building,24,[cxxmodules] Re-disable building a module for R;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4449
https://github.com/root-project/root/pull/4449:35,deployability,modul,module,35,[cxxmodules] Re-disable building a module for R;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4449
https://github.com/root-project/root/pull/4449:35,modifiability,modul,module,35,[cxxmodules] Re-disable building a module for R;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4449
https://github.com/root-project/root/pull/4449:35,safety,modul,module,35,[cxxmodules] Re-disable building a module for R;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4449
https://github.com/root-project/root/pull/4451:101,availability,failur,failures,101,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:101,deployability,fail,failures,101,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:118,deployability,build,build,118,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:134,deployability,modul,modules,134,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:134,modifiability,modul,modules,134,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:101,performance,failur,failures,101,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:101,reliability,fail,failures,101,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:44,safety,avoid,avoid,44,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4451:134,safety,modul,modules,134,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0; This should fix the compilation failures when we build ROOT with modules. in c++17 mode. This should be solved in clang upstream.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4451
https://github.com/root-project/root/pull/4453:17,deployability,fail,failing,17,[cxxmodules] Fix failing gRandom in PyROOT;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4453
https://github.com/root-project/root/pull/4453:17,reliability,fail,failing,17,[cxxmodules] Fix failing gRandom in PyROOT;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4453
https://github.com/root-project/root/pull/4454:196,energy efficiency,draw,drawing,196,"Reland ""[cxxmodules] Preload libMathCore as usual.""; This reverts commit e00fe57c831140383fbfe19ce486127fa7c0ac93. We cannot only limit the preloading of libMathCore to PyROOT. roottest-root-meta-drawing also seems to have issues with gRandom.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4454
https://github.com/root-project/root/pull/4455:63,usability,help,help,63,"[rdrawable] add destructor for HistDrawable; Not sure, but may help on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4455
https://github.com/root-project/root/pull/4456:134,deployability,compos,compose,134,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:352,deployability,Updat,Update,352,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:134,modifiability,compos,compose,134,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:315,safety,test,testing,315,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:352,safety,Updat,Update,352,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:352,security,Updat,Update,352,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:315,testability,test,testing,315,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:159,usability,Support,Support,159,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4456:285,usability,Clear,Clear,285,[rdrawable] use hex code in RColor; 1. Use hex string for RGB like 01FFC5. 2. Use also hex for color alpha like FF. 3. Make easier to compose result color. 4. Support plain SVG names - need to provide predefined list. 5. Reintroduce methods for HLS. 6. Provide different Setter/Getter/Clear methods. 7. Move RColor testing to correspondent library. 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4456
https://github.com/root-project/root/pull/4457:16,availability,error,errors,16,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:55,availability,error,errors,55,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:16,performance,error,errors,16,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:55,performance,error,errors,55,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:16,safety,error,errors,16,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:55,safety,error,errors,55,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:16,usability,error,errors,16,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4457:55,usability,error,errors,55,"Fix compilation errors on Windows; This should fix the errors LNK2019: unresolved external symbol ""const ROOT::Experimental::RHistDrawable<1>::'vftable'""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4457
https://github.com/root-project/root/pull/4458:46,energy efficiency,Adapt,Adapt,46,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:46,integrability,Adapt,Adapt,46,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:46,interoperability,Adapt,Adapt,46,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:46,modifiability,Adapt,Adapt,46,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:126,safety,Compl,Complex,126,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:169,safety,Compl,Complex,169,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:231,safety,Compl,Complex,231,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:275,safety,Compl,Complex,275,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:126,security,Compl,Complex,126,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:169,security,Compl,Complex,169,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:231,security,Compl,Complex,231,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4458:275,security,Compl,Complex,275,"No longer strip/ignore std in ResolveTypedef. Adapt reference file.; This is needed to solve ROOT-10337. ```. root [0] struct Complex {};. root [1] auto v = std::vector<Complex>{};. root [2] TClassEdit::ResolveTypedef(""std::vector<Complex>::value_type""). (std::string) ""std::Complex"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4458
https://github.com/root-project/root/pull/4459:228,availability,Recov,Recover,228,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:228,deployability,Recov,Recover,228,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:228,reliability,Recov,Recover,228,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:190,safety,avoid,avoid,190,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:211,safety,test,tests,211,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:228,safety,Recov,Recover,228,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:173,security,modif,modifications,173,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:228,security,Recov,Recover,228,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4459:211,testability,test,tests,211,"Fixes in vmc for multi-engine mode (B. Volkel, I. Hrivnacova):; - Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc). - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs. - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4459
https://github.com/root-project/root/pull/4461:0,safety,Prevent,Prevent,0,Prevent leak in TBasket when reading uncompressed TTree.; This was first reported at https://cdcvs.fnal.gov/redmine/issues/23348.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4461:0,security,Preven,Prevent,0,Prevent leak in TBasket when reading uncompressed TTree.; This was first reported at https://cdcvs.fnal.gov/redmine/issues/23348.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4461
https://github.com/root-project/root/pull/4462:0,safety,Prevent,Prevent,0,Prevent leak in TBasket when reading uncompressed TTree. ; This was first reported at https://cdcvs.fnal.gov/redmine/issues/23348.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4462
https://github.com/root-project/root/pull/4462:0,security,Preven,Prevent,0,Prevent leak in TBasket when reading uncompressed TTree. ; This was first reported at https://cdcvs.fnal.gov/redmine/issues/23348.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4462
https://github.com/root-project/root/pull/4464:79,deployability,build,build,79,[TMVA experimental] Veto BDT inference tests on 32bit; This fixes todays 32bit build: http://cdash.cern.ch/viewBuildError.php?buildid=733343,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4464:126,deployability,build,buildid,126,[TMVA experimental] Veto BDT inference tests on 32bit; This fixes todays 32bit build: http://cdash.cern.ch/viewBuildError.php?buildid=733343,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4464:39,safety,test,tests,39,[TMVA experimental] Veto BDT inference tests on 32bit; This fixes todays 32bit build: http://cdash.cern.ch/viewBuildError.php?buildid=733343,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4464:39,testability,test,tests,39,[TMVA experimental] Veto BDT inference tests on 32bit; This fixes todays 32bit build: http://cdash.cern.ch/viewBuildError.php?buildid=733343,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4464
https://github.com/root-project/root/pull/4465:168,deployability,unload,unload,168,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:175,energy efficiency,load,load,175,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:290,modifiability,variab,variable,290,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:175,performance,load,load,175,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:215,performance,time,timestamp,215,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:156,safety,avoid,avoided,156,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:35,usability,support,support,35,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:199,usability,command,command,199,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4465:320,usability,behavi,behavior,320,"[cling] MetaSema code cleanup; add support in `.x` for a list of functions that will be called, in order (fallback); Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:. - General `MetaSema.cpp` code cleanup. - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4465
https://github.com/root-project/root/pull/4466:6,reliability,diagno,diagnostics,6,"Add a diagnostics if the pch/pcm is out of date before asserting.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4466
https://github.com/root-project/root/pull/4466:6,testability,diagno,diagnostics,6,"Add a diagnostics if the pch/pcm is out of date before asserting.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4466
https://github.com/root-project/root/pull/4466:55,testability,assert,asserting,55,"Add a diagnostics if the pch/pcm is out of date before asserting.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4466
https://github.com/root-project/root/pull/4469:39,deployability,log,logic,39,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:614,deployability,log,logic,614,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:834,deployability,automat,automatically,834,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:19,energy efficiency,draw,drawable,19,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:79,energy efficiency,draw,drawable,79,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:143,energy efficiency,draw,drawables,143,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:159,energy efficiency,draw,drawable,159,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:382,energy efficiency,draw,drawable,382,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:754,energy efficiency,draw,drawable,754,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:848,interoperability,distribut,distributed,848,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:673,reliability,RCa,RCanvas,673,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:39,safety,log,logic,39,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:356,safety,compl,complication,356,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:614,safety,log,logic,614,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:28,security,ident,identifier,28,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:39,security,log,logic,39,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:356,security,compl,complication,356,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:614,security,log,logic,614,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:39,testability,log,logic,39,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:46,testability,simpl,simplify,46,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:614,testability,log,logic,614,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:690,testability,context,context,690,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:834,testability,automat,automatically,834,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:46,usability,simpl,simplify,46,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:182,usability,custom,custom,182,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:662,usability,support,support,662,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4469:698,usability,menu,menu,698,"[RDrawable] change drawable identifier logic, simplify painting; 1. Now unique drawable id will be produced when display items are created for drawables. Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. . `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4469
https://github.com/root-project/root/pull/4471:52,integrability,wrap,wrapper,52,TClassEdit::ResolveTypedef add support for unknown::wrapper<int>;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4471
https://github.com/root-project/root/pull/4471:52,interoperability,wrapper,wrapper,52,TClassEdit::ResolveTypedef add support for unknown::wrapper<int>;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4471
https://github.com/root-project/root/pull/4471:31,usability,support,support,31,TClassEdit::ResolveTypedef add support for unknown::wrapper<int>;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4471
https://github.com/root-project/root/pull/4472:39,deployability,build,builds,39,[cxxmodules] Fix the clangHEAD nightly builds.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4472
https://github.com/root-project/root/pull/4473:8,interoperability,format,formatting,8,"Doxygen formatting for V7 graphics; Revisit the doxygen formatting for ROOT 7 graphics. Make new groups to better reflect the structure in ""Functional part""of the Reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4473:56,interoperability,format,formatting,56,"Doxygen formatting for V7 graphics; Revisit the doxygen formatting for ROOT 7 graphics. Make new groups to better reflect the structure in ""Functional part""of the Reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4473:173,usability,guid,guide,173,"Doxygen formatting for V7 graphics; Revisit the doxygen formatting for ROOT 7 graphics. Make new groups to better reflect the structure in ""Functional part""of the Reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4473
https://github.com/root-project/root/pull/4474:34,availability,error,error,34,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:83,availability,error,error,83,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:225,deployability,version,versions,225,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:225,integrability,version,versions,225,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:225,modifiability,version,versions,225,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:34,performance,error,error,34,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:83,performance,error,error,83,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:34,safety,error,error,34,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:83,safety,error,error,83,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:34,usability,error,error,34,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:83,usability,error,error,83,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4474:237,usability,Visual,Visual,237,"Remove work around for a compiler error on Windows; Remove the work-around for the error C2668: 'ROOT::TThreadExecutor::Map': ambiguous call to overloaded function, due to a MS compiler bug, which is now fixed in more recent versions of Visual Studio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4474
https://github.com/root-project/root/pull/4475:378,integrability,event,event,378,"[ntuple] [WIP/do not merge] Addition of 5th tutorial; This PR is not intended to be merged to master. Instead its intention is for others to see this tutorial and discuss how realistic such an analysis would be in physics and where RNTuple has room for improvement. 2 already identified aspects which could be improved are:. 1. `auto nhitrpView = ntuple->GetView<std::int32_t>(""event.tracks.H1Event::Track.nhitrp"");`. 2. `nhitrpView(*trackView.GetViewRange(i).begin()+ik)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4475
https://github.com/root-project/root/pull/4475:276,security,ident,identified,276,"[ntuple] [WIP/do not merge] Addition of 5th tutorial; This PR is not intended to be merged to master. Instead its intention is for others to see this tutorial and discuss how realistic such an analysis would be in physics and where RNTuple has room for improvement. 2 already identified aspects which could be improved are:. 1. `auto nhitrpView = ntuple->GetView<std::int32_t>(""event.tracks.H1Event::Track.nhitrp"");`. 2. `nhitrpView(*trackView.GetViewRange(i).begin()+ik)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4475
https://github.com/root-project/root/pull/4476:412,availability,error,error-handling,412,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:250,integrability,event,events,250,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:287,integrability,event,event,287,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:330,integrability,event,event,330,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:378,integrability,event,event,378,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:412,performance,error,error-handling,412,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:412,safety,error,error-handling,412,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:187,usability,clear,clear,187,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4476:412,usability,error,error-handling,412,"[TMVA experimental] Add branchless jitted forests as inference backend; Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```. XGB: 2.30692 microsec/event. BranchlessForest: 0.962279 microsec/event. BranchlessJittedForest: 0.67292 microsec/event. ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4476
https://github.com/root-project/root/pull/4477:12,deployability,depend,dependency,12,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:177,deployability,build,builds,177,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:222,deployability,build,building,222,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:231,deployability,modul,module,231,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:299,deployability,build,builds,299,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:337,deployability,build,build,337,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:12,integrability,depend,dependency,12,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:12,modifiability,depend,dependency,12,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:231,modifiability,modul,module,231,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:12,safety,depend,dependency,12,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:231,safety,modul,module,231,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4477:12,testability,depend,dependency,12,"Add missing dependency for Hist library; [ 73%] Generating G__Hist.cxx, ../../lib/Hist.pcm. In file included from input_line_21:82:. /home/oksana/CERN_sources/root-rtcxxmodules/builds/include/ROOT/RHist.hxx:21:10: remark: building module 'ROOTGpadv7' as '/home/oksana/CERN_sources/root-rtcxxmodules/builds/lib/ROOTGpadv7.pcm'. [-Rmodule-build]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4477
https://github.com/root-project/root/pull/4478:1,deployability,modul,modules,1,[modules] A better fix for clangHEAD;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4478
https://github.com/root-project/root/pull/4478:1,modifiability,modul,modules,1,[modules] A better fix for clangHEAD;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4478
https://github.com/root-project/root/pull/4478:1,safety,modul,modules,1,[modules] A better fix for clangHEAD;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4478
https://github.com/root-project/root/pull/4480:565,deployability,patch,patch,565,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:790,deployability,patch,patch,790,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:571,modifiability,exten,extends,571,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:288,performance,disk,disk,288,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:632,performance,time,timestamps,632,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:702,performance,disk,disk,702,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:150,reliability,doe,does,150,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:362,reliability,doe,does,362,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:26,safety,valid,validation,26,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:371,safety,compl,complain,371,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:384,safety,valid,validation,384,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:470,safety,Input,InputFile,470,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:565,safety,patch,patch,565,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:650,safety,avoid,avoid,650,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:790,safety,patch,patch,790,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:26,security,validat,validation,26,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:371,security,compl,complain,371,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:384,security,validat,validation,384,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:565,security,patch,patch,565,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:790,security,patch,patch,790,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:422,testability,assert,assert,422,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4480:470,usability,Input,InputFile,470,"[cxxmodules][pch] Disable validation of transent files.; In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4480
https://github.com/root-project/root/pull/4481:198,performance,lock,locked,198,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:49,reliability,RCa,RCanvas,49,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:542,safety,test,test,542,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:198,security,lock,locked,198,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:425,testability,simpl,simple,425,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:506,testability,simpl,simple,506,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:542,testability,test,test,542,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:425,usability,simpl,simple,425,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:506,usability,simpl,simple,506,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4481:531,usability,support,supported,531,"Introduce real RStyle functionality to RDrawable/RCanvas; Each RDrawable can get assigned RStyle object via `weak_ptr`. At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:. - by id, which can be assigned to any RDrawable . - by class, which is again arbitrary value for each RDrawable . - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on. For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4481
https://github.com/root-project/root/pull/4482:99,performance,I/O,I/O,99,[RooFit] RooGenericPdf default Constructor; adding back default constructor for RooGenericPdf (for I/O),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4482
https://github.com/root-project/root/pull/4484:102,deployability,build,building,102,[cxxmodules] Order includes by generality.; This is attempt to fix an infinite loop of rootcling when building G__TreePlayer described in ROOT-10336. We do not have a dedicated issue or reproducer for the particular issue and thus we can only guess for the moment.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4484
https://github.com/root-project/root/pull/4485:7,energy efficiency,optim,optimize,7,Try to optimize treeviewer and treeplayer includes ROOT-10336; There are some difficulties in generating dictionary for these libraries. Idea to minimize number of include files in headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4485:7,performance,optimiz,optimize,7,Try to optimize treeviewer and treeplayer includes ROOT-10336; There are some difficulties in generating dictionary for these libraries. Idea to minimize number of include files in headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4485:145,usability,minim,minimize,145,Try to optimize treeviewer and treeplayer includes ROOT-10336; There are some difficulties in generating dictionary for these libraries. Idea to minimize number of include files in headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4485
https://github.com/root-project/root/pull/4486:0,safety,Avoid,Avoid,0,Avoid stdlib.h in GUI includes ROOT-10336; Causes warning from cling when generating dictionary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4486
https://github.com/root-project/root/pull/4487:337,availability,fault,fault,337,"[Cling] print the value of the pointer when value printing smart pointers.; . This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,. the previous implementation was attempting to valuePrint the pointee (rather than the pointer value). but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4487:337,energy efficiency,fault,fault,337,"[Cling] print the value of the pointer when value printing smart pointers.; . This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,. the previous implementation was attempting to valuePrint the pointee (rather than the pointer value). but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4487:337,performance,fault,fault,337,"[Cling] print the value of the pointer when value printing smart pointers.; . This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,. the previous implementation was attempting to valuePrint the pointee (rather than the pointer value). but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4487:337,reliability,fault,fault,337,"[Cling] print the value of the pointer when value printing smart pointers.; . This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,. the previous implementation was attempting to valuePrint the pointee (rather than the pointer value). but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4487:337,safety,fault,fault,337,"[Cling] print the value of the pointer when value printing smart pointers.; . This fixes ROOT-10333. Since the printValue set of functions always takes a pointer and dereferences it without any checks,. the previous implementation was attempting to valuePrint the pointee (rather than the pointer value). but this lead to a segmentation fault whenever the smart pointer was set to nullptr. Now, the valuePrinting for the smart pointers behaves the same as for regular pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4487
https://github.com/root-project/root/pull/4488:624,availability,error,error,624,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:635,availability,error,error,635,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:86,deployability,build,builds,86,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:221,deployability,depend,dependencies,221,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:394,deployability,depend,dependency,394,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:574,deployability,patch,patch,574,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:607,deployability,build,builds,607,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:221,integrability,depend,dependencies,221,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:394,integrability,depend,dependency,394,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:524,interoperability,specif,specify,524,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:221,modifiability,depend,dependencies,221,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:394,modifiability,depend,dependency,394,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:624,performance,error,error,624,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:635,performance,error,error,635,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:221,safety,depend,dependencies,221,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:394,safety,depend,dependency,394,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:574,safety,patch,patch,574,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:624,safety,error,error,624,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:635,safety,error,error,635,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:574,security,patch,patch,574,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:221,testability,depend,dependencies,221,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:394,testability,depend,dependency,394,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:624,usability,error,error,624,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4488:635,usability,error,error,635,[cmake] Add LLVMRES to ClingUtils to propagate to all cling-related t…; …argets. ROOT builds cling and then moves a set of headers under the semi-private $ROOTSYS/etc/cling. This poses an issue -- the set of proper cling dependencies seem not enough to propagate that information to rootcling for example. Instead of adding LLVMRES to rootcling (as it is the case for rootcling_stage1) add the dependency to something more fundamental such as ClingUtils. This will propagate it transitively to all parties without having to specify the sort-of internal LLVMRES target. This patch should fix the incremental builds where the error is:. error: file '/.../RuntimePrintValue.h' from the precompiled header has been overridden. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4488
https://github.com/root-project/root/pull/4489:6,integrability,messag,message,6,Add a message for the long-deprecated Gtypes.h and Htypes.h headers.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4489
https://github.com/root-project/root/pull/4489:6,interoperability,messag,message,6,Add a message for the long-deprecated Gtypes.h and Htypes.h headers.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4489
https://github.com/root-project/root/pull/4490:46,deployability,modul,modulemap,46,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:111,deployability,modul,modules,111,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:70,energy efficiency,reduc,reduce,70,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:46,modifiability,modul,modulemap,46,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:111,modifiability,modul,modules,111,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:46,safety,modul,modulemap,46,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4490:111,safety,modul,modules,111,"[cxxmodules] Add bits/stl_{map,tree}.h to the modulemap.; This should reduce the textual duplicates in all C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4490
https://github.com/root-project/root/pull/4491:24,deployability,modul,modules,24,[cxxmodules] Enable C++ modules for c++17 and beyond.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:24,modifiability,modul,modules,24,[cxxmodules] Enable C++ modules for c++17 and beyond.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4491:24,safety,modul,modules,24,[cxxmodules] Enable C++ modules for c++17 and beyond.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4491
https://github.com/root-project/root/pull/4492:39,energy efficiency,alloc,allocation,39,fix ROOT-10343 ROOT-10344; off by hand allocation and infinite recursion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4492
https://github.com/root-project/root/pull/4493:166,availability,error,error,166,[Exp PyROOT] Throw exception when trying to open non-existing file; As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4493
https://github.com/root-project/root/pull/4493:166,performance,error,error,166,[Exp PyROOT] Throw exception when trying to open non-existing file; As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4493
https://github.com/root-project/root/pull/4493:19,safety,except,exception,19,[Exp PyROOT] Throw exception when trying to open non-existing file; As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4493
https://github.com/root-project/root/pull/4493:166,safety,error,error,166,[Exp PyROOT] Throw exception when trying to open non-existing file; As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4493
https://github.com/root-project/root/pull/4493:166,usability,error,error,166,[Exp PyROOT] Throw exception when trying to open non-existing file; As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4493
https://github.com/root-project/root/pull/4495:470,availability,error,error,470,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:927,availability,error,error,927,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:55,deployability,patch,patch,55,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:267,deployability,build,build,267,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:576,deployability,build,build,576,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:607,deployability,build,build-any-ib,607,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:622,deployability,BUILD,BUILD,622,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:737,deployability,Modul,Module,737,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:915,deployability,fail,failed,915,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:989,deployability,build,build,989,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:304,interoperability,distribut,distributable,304,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:446,interoperability,xml,xml,446,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1015,interoperability,distribut,distribution,1015,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1188,interoperability,distribut,distribution,1188,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:737,modifiability,Modul,Module,737,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1079,modifiability,variab,variable,1079,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:202,performance,disk,disk,202,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:470,performance,error,error,470,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:927,performance,error,error,927,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:915,reliability,fail,failed,915,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1106,reliability,diagno,diagnostic,1106,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:55,safety,patch,patch,55,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:66,safety,compl,complementary,66,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:470,safety,error,error,470,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:737,safety,Modul,Module,737,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:772,safety,Input,InputFile,772,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:783,safety,Input,InputFile,783,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:927,safety,error,error,927,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1249,safety,safe,safe,1249,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:55,security,patch,patch,55,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:66,security,compl,complementary,66,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:140,security,isO,isOutOfDate,140,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:255,security,control,control,255,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:844,security,isO,isOverridden,844,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:860,security,isO,isOutOfDate,860,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1201,security,team,team,1201,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:255,testability,control,control,255,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:831,testability,Assert,Assertion,831,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:1106,testability,diagno,diagnostic,1106,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:470,usability,error,error,470,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:697,usability,tool,tools,697,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:772,usability,Input,InputFile,772,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:783,usability,Input,InputFile,783,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4495:927,usability,error,error,927,"[cxxmodules] Mark the overridden transient file.; This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml. input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden. ^. rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and. on the distribution machine. We should probably rely on an environment variable. to turn off this diagnostic selectively and more the reponsibility if something goes. wrong to the distribution team. They should have better knowledge what is safe to. be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4495
https://github.com/root-project/root/pull/4496:134,safety,compl,complication,134,"Embed web-based canvas in Rbrowser; Instead of plain JSROOT graphics TWebCanvas will be used now to display objects in RBrowser. Main complication - appropriate embedding of RWebWindow inside another one. Exactly same approach will be used for ROOT7 web canvas, Geometry viewer and all other future widgets which should be supported in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:134,security,compl,complication,134,"Embed web-based canvas in Rbrowser; Instead of plain JSROOT graphics TWebCanvas will be used now to display objects in RBrowser. Main complication - appropriate embedding of RWebWindow inside another one. Exactly same approach will be used for ROOT7 web canvas, Geometry viewer and all other future widgets which should be supported in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:299,usability,widget,widgets,299,"Embed web-based canvas in Rbrowser; Instead of plain JSROOT graphics TWebCanvas will be used now to display objects in RBrowser. Main complication - appropriate embedding of RWebWindow inside another one. Exactly same approach will be used for ROOT7 web canvas, Geometry viewer and all other future widgets which should be supported in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4496:323,usability,support,supported,323,"Embed web-based canvas in Rbrowser; Instead of plain JSROOT graphics TWebCanvas will be used now to display objects in RBrowser. Main complication - appropriate embedding of RWebWindow inside another one. Exactly same approach will be used for ROOT7 web canvas, Geometry viewer and all other future widgets which should be supported in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4496
https://github.com/root-project/root/pull/4497:32,interoperability,distribut,distribution,32,Use in Jupyter JSROOT from ROOT distribution ROOT-10116; This is try to use Jupyter static location for JSROOT files. Should be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:128,safety,test,tested,128,Use in Jupyter JSROOT from ROOT distribution ROOT-10116; This is try to use Jupyter static location for JSROOT files. Should be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4497:128,testability,test,tested,128,Use in Jupyter JSROOT from ROOT distribution ROOT-10116; This is try to use Jupyter static location for JSROOT files. Should be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4497
https://github.com/root-project/root/pull/4498:38,availability,error,error,38,Rbrowser use TFile directly; Plus fix error with TCanvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4498:38,performance,error,error,38,Rbrowser use TFile directly; Plus fix error with TCanvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4498:38,safety,error,error,38,Rbrowser use TFile directly; Plus fix error with TCanvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4498:38,usability,error,error,38,Rbrowser use TFile directly; Plus fix error with TCanvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4498
https://github.com/root-project/root/pull/4499:317,deployability,updat,update,317,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:167,integrability,interfac,interface,167,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:167,interoperability,interfac,interface,167,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:154,modifiability,extens,extension,154,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:167,modifiability,interfac,interface,167,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:19,reliability,RCa,RCanvas,19,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:60,reliability,RCa,RCanvas,60,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:272,reliability,RCa,RCanvas,272,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:317,safety,updat,update,317,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:221,security,ident,identical,221,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:317,security,updat,update,317,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4499:8,usability,support,support,8,Provide support of RCanvas in RBrowser; Now both TCanvas or RCanvas can be used in RBrowser. In both cases very similar code is used for embedding - some extension of interface was required. On client side code is mostly identical. For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4499
https://github.com/root-project/root/pull/4500:62,deployability,updat,update,62,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:4,reliability,RCa,RCanvas,4,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:40,reliability,RCa,RCanvas,40,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:62,safety,updat,update,62,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:106,safety,test,test-case,106,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:62,security,updat,update,62,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4500:106,testability,test,test-case,106,use RCanvas by default in RBrowser; Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4500
https://github.com/root-project/root/pull/4503:147,safety,test,tests,147,Change some LangOptions for MSVC; Add 'MSVCCompat' flag and set 'ThreadsafeStatics = 0' (this fixes crash when running line.cxx and text.cxx root7 tests in interpreted mode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4503
https://github.com/root-project/root/pull/4503:147,testability,test,tests,147,Change some LangOptions for MSVC; Add 'MSVCCompat' flag and set 'ThreadsafeStatics = 0' (this fixes crash when running line.cxx and text.cxx root7 tests in interpreted mode),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4503
https://github.com/root-project/root/pull/4504:202,deployability,contain,containing,202,"[core] Do not deprecate the obsolete headers Htypes.h, Gtypes.h:; The cost for the devs is minimal, and there is no point in making users pay. As Vassil suggested, keep the #include of the ""new header"" containing the. declarations originally present in this header.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4504
https://github.com/root-project/root/pull/4504:1,energy efficiency,core,core,1,"[core] Do not deprecate the obsolete headers Htypes.h, Gtypes.h:; The cost for the devs is minimal, and there is no point in making users pay. As Vassil suggested, keep the #include of the ""new header"" containing the. declarations originally present in this header.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4504
https://github.com/root-project/root/pull/4504:91,usability,minim,minimal,91,"[core] Do not deprecate the obsolete headers Htypes.h, Gtypes.h:; The cost for the devs is minimal, and there is no point in making users pay. As Vassil suggested, keep the #include of the ""new header"" containing the. declarations originally present in this header.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4504
https://github.com/root-project/root/pull/4504:132,usability,user,users,132,"[core] Do not deprecate the obsolete headers Htypes.h, Gtypes.h:; The cost for the devs is minimal, and there is no point in making users pay. As Vassil suggested, keep the #include of the ""new header"" containing the. declarations originally present in this header.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4504
https://github.com/root-project/root/pull/4505:19,energy efficiency,draw,drawing,19,Javascript browser drawing options; Added the functionality to have drawings options per graph types on the javascript browser,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4505
https://github.com/root-project/root/pull/4505:68,energy efficiency,draw,drawings,68,Javascript browser drawing options; Added the functionality to have drawings options per graph types on the javascript browser,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4505
https://github.com/root-project/root/pull/4506:0,deployability,Updat,Update,0,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:48,deployability,updat,updated,48,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:106,modifiability,variab,variable,106,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:0,safety,Updat,Update,0,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:48,safety,updat,updated,48,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:0,security,Updat,Update,0,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4506:48,security,updat,updated,48,Update bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4506
https://github.com/root-project/root/pull/4507:745,availability,error,error,745,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:293,energy efficiency,current,currently,293,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:377,energy efficiency,draw,drawn,377,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:450,energy efficiency,draw,drawn,450,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:771,energy efficiency,draw,draw,771,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:532,performance,time,times,532,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:745,performance,error,error,745,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:745,safety,error,error,745,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:17,usability,Close,Closed,17,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:249,usability,visual,visualize,249,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4507:745,usability,error,error,745,"Unfold plotting; Closed the previous pull request and creating a new one after rebasing. All changes are pertaining to plotting changes within RooFit. @cburgard's comments from the previous MR . The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4507
https://github.com/root-project/root/pull/4508:55,energy efficiency,draw,drawing,55,"[RBrowser] tabs canvas selection; This PR do that when drawing or adding a canvas, selected tab will change to the correct one",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4508
https://github.com/root-project/root/pull/4509:48,deployability,updat,updated,48,Ranged bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4509:106,modifiability,variab,variable,106,Ranged bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4509:48,safety,updat,updated,48,Ranged bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4509:48,security,updat,updated,48,Ranged bernstein; The RooBernstein pdf is to be updated to have the correct definition over ranges of the variable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4509
https://github.com/root-project/root/pull/4510:105,deployability,automat,automatic,105,"Introduce RLegend class; It directly reference RDrawable objects. Using existing solution for I/O. While automatic colors need to be introduced, special solution will be provided later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:94,performance,I/O,I/O,94,"Introduce RLegend class; It directly reference RDrawable objects. Using existing solution for I/O. While automatic colors need to be introduced, special solution will be provided later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4510:105,testability,automat,automatic,105,"Introduce RLegend class; It directly reference RDrawable objects. Using existing solution for I/O. While automatic colors need to be introduced, special solution will be provided later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4510
https://github.com/root-project/root/pull/4511:224,deployability,automat,automatically,224,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4511:104,energy efficiency,draw,drawing,104,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4511:169,performance,perform,performs,169,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4511:112,reliability,RCa,RCanvas,112,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4511:224,testability,automat,automatically,224,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4511:169,usability,perform,performs,169,"Provide preliminary autocolor functionality for RDrawable; Introduce *Auto* property for RColor. Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment. Later method can be invoked automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4511
https://github.com/root-project/root/pull/4512:69,availability,error,error,69,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:121,availability,error,error,121,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:40,deployability,instal,installed,40,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:98,deployability,modul,module,98,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:105,deployability,modul,modulemap,105,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:144,deployability,modul,module,144,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:164,deployability,modul,module,164,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:98,modifiability,modul,module,98,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:105,modifiability,modul,modulemap,105,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:144,modifiability,modul,module,144,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:164,modifiability,modul,module,164,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:69,performance,error,error,69,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:121,performance,error,error,121,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:69,safety,error,error,69,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:98,safety,modul,module,98,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:105,safety,modul,modulemap,105,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:121,safety,error,error,121,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:144,safety,modul,module,144,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:164,safety,modul,module,164,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:69,usability,error,error,69,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4512:121,usability,error,error,121,Disable rtcxxmodules if ROOT is already installed in the system; Fix error: . `/usr/local/include/module.modulemap:14:8: error: redefinition of module ROOT_Config. module ROOT_Config [system] {`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4512
https://github.com/root-project/root/pull/4513:58,safety,avoid,avoid,58,Use incognito mode to start RWebWindow widgets; Allows to avoid several problems when browser app already running. Used for chrome and firefox browsers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4513
https://github.com/root-project/root/pull/4513:39,usability,widget,widgets,39,Use incognito mode to start RWebWindow widgets; Allows to avoid several problems when browser app already running. Used for chrome and firefox browsers,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4513
https://github.com/root-project/root/pull/4514:125,availability,error,error,125,"[RF] Fix ROOT-10331.; When compiled in debug mode, RooFit was outlining a normally inlined. function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4514
https://github.com/root-project/root/pull/4514:136,interoperability,specif,specific,136,"[RF] Fix ROOT-10331.; When compiled in debug mode, RooFit was outlining a normally inlined. function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4514
https://github.com/root-project/root/pull/4514:125,performance,error,error,125,"[RF] Fix ROOT-10331.; When compiled in debug mode, RooFit was outlining a normally inlined. function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4514
https://github.com/root-project/root/pull/4514:125,safety,error,error,125,"[RF] Fix ROOT-10331.; When compiled in debug mode, RooFit was outlining a normally inlined. function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4514
https://github.com/root-project/root/pull/4514:125,usability,error,error,125,"[RF] Fix ROOT-10331.; When compiled in debug mode, RooFit was outlining a normally inlined. function, which created a linker error in a specific setup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4514
https://github.com/root-project/root/pull/4515:51,deployability,modul,modules,51,Revert (partially) the changes for MSVC (it breaks modules);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4515
https://github.com/root-project/root/pull/4515:51,modifiability,modul,modules,51,Revert (partially) the changes for MSVC (it breaks modules);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4515
https://github.com/root-project/root/pull/4515:51,safety,modul,modules,51,Revert (partially) the changes for MSVC (it breaks modules);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4515
https://github.com/root-project/root/pull/4516:60,deployability,modul,modules,60,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,deployability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:317,deployability,modul,modules,317,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:331,deployability,patch,patch,331,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:400,deployability,contain,contains,400,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:422,deployability,modul,modules,422,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:468,deployability,modul,modules,468,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:477,deployability,Patch,Patch,477,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,integrability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,interoperability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:60,modifiability,modul,modules,60,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,modifiability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:138,modifiability,variab,variables,138,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:269,modifiability,variab,variables,269,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:317,modifiability,modul,modules,317,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:358,modifiability,variab,variable,358,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:422,modifiability,modul,modules,422,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:468,modifiability,modul,modules,468,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,reliability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:230,reliability,doe,does,230,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:60,safety,modul,modules,60,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:285,safety,prevent,prevents,285,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:317,safety,modul,modules,317,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:331,safety,patch,patch,331,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:422,safety,modul,modules,422,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:468,safety,modul,modules,468,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:477,safety,Patch,Patch,477,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,security,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:285,security,preven,prevents,285,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:331,security,patch,patch,331,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:477,security,Patch,Patch,477,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:81,testability,integr,integrity,81,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4516:195,usability,command,command,195,[cxxmodules] Don't rely on the LD_LIBRARY_PATH for prebuilt modules.; The system integrity protection (SIP) on osx blocks 'dangerous' env variables when spawning a new process. The MetaProcessor command `.!` which calls the shell does not propagate (DY)LD_LIBRARY_PATH variables which prevents cling from finding the modules. This patch introduces a new env variable CLING_PREBUILT_MODULE_PATH which contains the prebuilt modules' location where cling should look for modules. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4516
https://github.com/root-project/root/pull/4517:156,deployability,modul,modules,156,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:16,energy efficiency,load,load,16,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:107,energy efficiency,load,load,107,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:156,modifiability,modul,modules,156,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:16,performance,load,load,16,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:107,performance,load,load,107,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:45,safety,test,test,45,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:156,safety,modul,modules,156,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:223,safety,test,test,223,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:45,testability,test,test,45,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4517:223,testability,test,test,223,"[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336; As it is now, cling is not capable to load library for outlined. functions. As long as modules not enabled by default - add. R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4517
https://github.com/root-project/root/pull/4519:49,deployability,modul,module,49,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:150,deployability,instal,installed,150,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:195,deployability,Patch,Patch,195,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:160,integrability,pub,public,160,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:49,modifiability,modul,module,49,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:49,safety,modul,module,49,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:195,safety,Patch,Patch,195,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4519:195,security,Patch,Patch,195,[cxxmodules] Rely on ROOT to tell us the primary module location.; This enables ROOT to run without requiring to source thisroot.sh and also run from installed public locations (via gnuinstall). Patch by Oksana Shadura and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4519
https://github.com/root-project/root/pull/4520:49,availability,error,error,49,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:458,availability,operat,operator,458,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:786,availability,state,state,786,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:8,deployability,modul,modules,8,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:243,deployability,modul,modules,243,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:140,energy efficiency,alloc,allocator,140,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:778,energy efficiency,current,current,778,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:786,integrability,state,state,786,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:8,modifiability,modul,modules,8,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:243,modifiability,modul,modules,243,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:49,performance,error,error,49,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:8,safety,modul,modules,8,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:49,safety,error,error,49,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:243,safety,modul,modules,243,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:709,testability,Assert,Assertion,709,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4520:49,usability,error,error,49,"Disable modules on aarch64 due to ODR violation; error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4520
https://github.com/root-project/root/pull/4521:642,availability,error,error,642,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:190,energy efficiency,current,currently,190,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:274,energy efficiency,draw,drawn,274,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:347,energy efficiency,draw,drawn,347,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:668,energy efficiency,draw,draw,668,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:429,performance,time,times,429,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:642,performance,error,error,642,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:642,safety,error,error,642,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
