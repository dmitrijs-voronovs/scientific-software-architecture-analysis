id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/14159:344,modifiability,Configur,Configuring,344,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:700,modifiability,version,version,700,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:938,modifiability,version,version,938,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1021,modifiability,VERSION,VERSION,1021,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:220,performance,Error,Error,220,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:368,performance,error,errors,368,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:668,performance,error,error,668,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:974,performance,content,content,974,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12,safety,compl,complaining,12,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:174,safety,compl,complains,174,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:220,safety,Error,Error,220,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:368,safety,error,errors,368,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:668,safety,error,error,668,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12,security,compl,complaining,12,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:174,security,compl,complains,174,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:344,security,Configur,Configuring,344,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:512,security,ssh,ssh,512,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1306,security,access,access,1306,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:921,testability,context,context,921,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:220,usability,Error,Error,220,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:368,usability,error,errors,368,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:404,usability,statu,status,404,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:517,usability,user,username,517,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:668,usability,error,error,668,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1324,usability,document,documentation,1324,"CMake exits complaining `ROOT must be built out-of-source` even when building out-of-source; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console. $ cmake ../root. CMake Error at CMakeLists.txt:20 (message):. ROOT must be built out-of-source. Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred! ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh. ssh <username>@lxplus8.cern.ch. git clone https://github.com/root-project/root.git. mkdir root-build.foo. cd root-build.foo. cmake ../root. ```. 2. See the error described above. ### ROOT version. Git branch: master. Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2. * `/etc/os-release` content. ```. NAME=""Red Hat Enterprise Linux"". VERSION=""8.9 (Ootpa)"". ID=""rhel"". ID_LIKE=""fedora"". VERSION_ID=""8.9"". PLATFORM_ID=""platform:el8"". PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)"". ANSI_COLOR=""0;31"". CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos"". HOME_URL=""https://www.redhat.com/"". DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8"". BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8"". REDHAT_BUGZILLA_PRODUCT_VERSION=8.9. REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux"". REDHAT_SUPPORT_PRODUCT_VERSION=""8.9"". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/pull/14160:150,availability,error,errors,150,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:71,deployability,build,building,71,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:182,deployability,version,version,182,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:695,deployability,updat,updated,695,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:214,energy efficiency,core,core,214,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:182,integrability,version,version,182,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:182,modifiability,version,version,182,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:339,modifiability,variab,variable,339,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:150,performance,error,errors,150,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:150,safety,error,errors,150,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:665,safety,test,tested,665,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:695,safety,updat,updated,695,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:695,security,updat,updated,695,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:665,testability,test,tested,665,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:150,usability,error,errors,150,"Minuit2: Fix VERSION_FILE path for standalone mode; Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14157 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/issues/14162:198,availability,error,error,198,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:222,availability,Error,Error,222,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:270,availability,Error,Error,270,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:318,availability,Error,Error,318,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1469,availability,Operat,Operating,1469,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:613,deployability,instal,installed,613,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:631,deployability,depend,dependencies,631,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1396,deployability,version,version,1396,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1423,deployability,Instal,Installation,1423,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:839,energy efficiency,Draw,Draw,839,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:631,integrability,depend,dependencies,631,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1396,integrability,version,version,1396,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:631,modifiability,depend,dependencies,631,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1396,modifiability,version,version,1396,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:198,performance,error,error,198,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:222,performance,Error,Error,222,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:270,performance,Error,Error,270,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:318,performance,Error,Error,318,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:198,safety,error,error,198,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:222,safety,Error,Error,222,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:270,safety,Error,Error,270,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:318,safety,Error,Error,318,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:631,safety,depend,dependencies,631,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:631,testability,depend,dependencies,631,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1516,testability,context,context,1516,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:198,usability,error,error,198,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:222,usability,Error,Error,222,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:270,usability,Error,Error,270,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:318,usability,Error,Error,318,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:1354,usability,command,command,1354,"`RooFFTConvPdf` is not working for ROOT 6.30/02; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:. ```. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. Error in <TVirtualFFT::FFT>: handler not found. [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it? terminate called after throwing an instance of 'std::runtime_error'. what(): Cannot get a handle to fftw. ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:. ```. auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);. t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);. RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);. RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);. ```. I'm sorry I can't provide the rest of the script. I run this script with the following command. ```. root fit.cxx. ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14163:279,availability,error,error,279,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:364,availability,Error,Error,364,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1287,availability,error,error,1287,"elated to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1991,availability,Error,Error,1991,"on"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:3210,availability,Operat,Operating,3210,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:216,deployability,fail,fails,216,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:264,deployability,releas,release,264,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:395,deployability,Modul,Modules,395,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:566,deployability,configurat,configuration,566,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:668,deployability,configurat,configuration,668,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:727,deployability,version,version,727,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:840,deployability,instal,installation,840,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:943,deployability,contain,containing,943,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1067,deployability,instal,installed,1067,"ut not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1083,deployability,Stack,Stack,1083,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Coul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1254,deployability,instal,install,1254,"inary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1935,deployability,version,version,1935,"ory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2022,deployability,Modul,Modules,2022,"ent package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2146,deployability,Stack,Stack,2146,"ke:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ---------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2201,deployability,Modul,Modules,2201,"ckage). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2291,deployability,modul,modules,2291,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2375,deployability,Modul,Modules,2375,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2601,deployability,VERSION,VERSION,2601,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2693,deployability,version,version,2693,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:3169,deployability,Instal,Installation,3169,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:3197,deployability,Releas,Release,3197,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:566,integrability,configur,configuration,566,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:668,integrability,configur,configuration,668,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:727,integrability,version,version,727,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1935,integrability,version,version,1935,"ory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2071,integrability,messag,message,2071,"d. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits',",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2601,integrability,VERSION,VERSION,2601,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2693,integrability,version,version,2693,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:378,interoperability,share,share,378,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2005,interoperability,share,share,2005," separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2071,interoperability,messag,message,2071,"d. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits',",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2184,interoperability,share,share,2184,"ts.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation metho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2358,interoperability,share,share,2358,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:395,modifiability,Modul,Modules,395,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:558,modifiability,pac,package,558,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:566,modifiability,configur,configuration,566,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:660,modifiability,pac,package,660,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:668,modifiability,configur,configuration,668,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:727,modifiability,version,version,727,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1030,modifiability,pac,package,1030,"h 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/Find",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1935,modifiability,version,version,1935,"ory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2022,modifiability,Modul,Modules,2022,"ent package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2201,modifiability,Modul,Modules,2201,"ckage). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2291,modifiability,modul,modules,2291,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2375,modifiability,Modul,Modules,2375,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2601,modifiability,VERSION,VERSION,2601,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2693,modifiability,version,version,2693,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:279,performance,error,error,279,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:364,performance,Error,Error,364,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1287,performance,error,error,1287,"elated to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1991,performance,Error,Error,1991,"on"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:216,reliability,fail,fails,216,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:279,safety,error,error,279,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:364,safety,Error,Error,364,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:395,safety,Modul,Modules,395,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1287,safety,error,error,1287,"elated to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1312,safety,test,testroot,1312,"builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1424,safety,Detect,Detecting,1424,"make:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_packag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1458,safety,Detect,Detecting,1458,"oviding ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1555,safety,Detect,Detecting,1555,"ckage configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ###",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1588,safety,Detect,Detecting,1588," by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1628,safety,Detect,Detecting,1628,"find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectNa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1664,safety,Detect,Detecting,1664,"onfiguration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1766,safety,Detect,Detecting,1766,"mes:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ----------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1801,safety,Detect,Detecting,1801,"ohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1991,safety,Error,Error,1991,"on"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2022,safety,Modul,Modules,2022,"ent package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2201,safety,Modul,Modules,2201,"ckage). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2291,safety,modul,modules,2291,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2375,safety,Modul,Modules,2375,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:566,security,configur,configuration,566,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:668,security,configur,configuration,668,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1220,security,hack,hack,1220,"with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1250,security,apt,apt,1250," the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1341,security,ident,identification,1341,"ere. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_ar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1391,security,ident,identification,1391,"ules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDepend",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1424,security,Detect,Detecting,1424,"make:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_packag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1458,security,Detect,Detecting,1458,"oviding ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1555,security,Detect,Detecting,1555,"ckage configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ###",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1588,security,Detect,Detecting,1588," by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1628,security,Detect,Detecting,1628,"find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectNa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1664,security,Detect,Detecting,1664,"onfiguration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1766,security,Detect,Detecting,1766,"mes:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ----------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1801,security,Detect,Detecting,1801,"ohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2848,security,Team,Team,2848,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1312,testability,test,testroot,1312,"builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:3257,testability,context,context,3257,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:279,usability,error,error,279,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:364,usability,Error,Error,364,"cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. CMake find_package(ROOT) worked well with 6.28. Now it fails with 6.30 on Ubuntu 22.04 with the binary release. First error was related to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1287,usability,error,error,1287,"elated to not finding the builtin nlohmann even if it's there. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1953,usability,minim,minimum,1953," of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:1991,usability,Error,Error,1991,"on"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:3031,usability,help,help,3031,"v. Next error is:. ```. cmake ../testroot/. -- The C compiler identification is GNU 11.4.0. -- The CXX compiler identification is GNU 11.4.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). CMakeLists.txt:5 (find_package). ```. And not sure how to solve it. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/pull/14164:16,availability,failur,failures,16,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:327,availability,Failur,Failure,327,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:16,deployability,fail,failures,16,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,deployability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,deployability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:244,deployability,build,builddir,244,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:253,deployability,build,build,253,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:259,deployability,BUILD,BUILD,259,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:327,deployability,Fail,Failure,327,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:435,deployability,FAIL,FAILED,435,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,deployability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:542,deployability,updat,updated,542,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,integrability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,integrability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,integrability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,interoperability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,interoperability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,interoperability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,modifiability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,modifiability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,modifiability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:16,performance,failur,failures,16,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:327,performance,Failur,Failure,327,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:16,reliability,fail,failures,16,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,reliability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,reliability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:327,reliability,Fail,Failure,327,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:435,reliability,FAIL,FAILED,435,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,reliability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:7,safety,test,test,7,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:296,safety,test,test,296,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:301,safety,test,testRooTruthModel,301,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:512,safety,test,tested,512,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:542,safety,updat,updated,542,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,security,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,security,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,security,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:542,security,updat,updated,542,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:7,testability,test,test,7,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:127,testability,Integr,IntegrateSubrange,127,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:206,testability,integr,integral,206,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:296,testability,test,test,296,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:301,testability,test,testRooTruthModel,301,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:458,testability,Integr,IntegrateSubrange,458,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14164:512,testability,test,tested,512,"Adjust test for failures on aarch64, ppc64le and s390x; # This Pull request:. ## Changes or fixes:. ```. [ RUN ] RooTruthModel.IntegrateSubrange. [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]. /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure. Expected equality of these values:. integ->getVal(). Which is: -2.8822093e-17. 0.0. Which is: 0. [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms). ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14164
https://github.com/root-project/root/pull/14166:224,deployability,updat,updated,224,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:18,interoperability,format,formating,18,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:94,interoperability,format,formatting,94,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:194,safety,test,tested,194,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:224,safety,updat,updated,224,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:224,security,updat,updated,224,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14166:194,testability,test,tested,194,[NFC] Fix doxygen formating in tgnumberentry; # This Pull request:. ## Changes or fixes:. Bad formatting of list in https://root.cern.ch/doc/master/classTGNumberEntry.html. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14166
https://github.com/root-project/root/pull/14167:48,deployability,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14167:152,deployability,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14167:48,safety,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14167:152,safety,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14167:48,security,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14167:152,security,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 7; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/14164. - https://github.com/root-project/root/pull/14185. - https://github.com/root-project/root/pull/14174. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14167
https://github.com/root-project/root/pull/14168:183,availability,error,erroring,183,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/pull/14168:310,energy efficiency,reduc,reducing,310,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/pull/14168:183,performance,error,erroring,183,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/pull/14168:183,safety,error,erroring,183,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/pull/14168:114,usability,user,user,114,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/pull/14168:183,usability,error,erroring,183,"[RF] Introduce `RooAbsCollection::addTyped()` method; It's a very common pattern in the RooFit implementation and user code to check the type when adding to a `RooAbsCollection`, and erroring out if the type is not correct. This commit suggests a function in `RooAbsCollection` to do exactly this, drastically reducing the code duplication in RooFit and experiment frameworks like CMS combine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14168
https://github.com/root-project/root/issues/14169:241,availability,error,error,241,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:260,availability,Error,Error,260,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:530,availability,Operat,Operating,530,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:12,deployability,fail,fails,12,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:137,deployability,Build,Building,137,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:177,deployability,fail,fails,177,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:211,deployability,build,build,211,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:295,deployability,depend,dependencies,295,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:453,deployability,version,version,453,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:486,deployability,Instal,Installation,486,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:507,deployability,build,build,507,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:21,integrability,configur,configure,21,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:186,integrability,configur,configure,186,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:295,integrability,depend,dependencies,295,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:453,integrability,version,version,453,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:21,modifiability,configur,configure,21,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:186,modifiability,configur,configure,186,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:295,modifiability,depend,dependencies,295,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:453,modifiability,version,version,453,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:241,performance,error,error,241,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:260,performance,Error,Error,260,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:12,reliability,fail,fails,12,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:177,reliability,fail,fails,177,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:377,reliability,doe,does,377,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:241,safety,error,error,241,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:260,safety,Error,Error,260,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:295,safety,depend,dependencies,295,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:21,security,configur,configure,21,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:186,security,configur,configure,186,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:295,testability,depend,dependencies,295,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:584,testability,context,context,584,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:241,usability,error,error,241,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:260,usability,Error,Error,260,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/issues/14169:273,usability,User,Users,273,ROOT 6.30.X fails to configure due to missing `llvm.spec.in`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```. CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist. ```. ### Reproducer. - Checkout ROOT. - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14169
https://github.com/root-project/root/pull/14170:140,deployability,configurat,configuration,140,"Revert ""[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD""; This reverts commit 2ee691da61ca51e4dd857ac8c88f778948fb49a7, it breaks configuration with the latest XRootD 5.6.3, for example already found in EPEL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:140,integrability,configur,configuration,140,"Revert ""[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD""; This reverts commit 2ee691da61ca51e4dd857ac8c88f778948fb49a7, it breaks configuration with the latest XRootD 5.6.3, for example already found in EPEL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:140,modifiability,configur,configuration,140,"Revert ""[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD""; This reverts commit 2ee691da61ca51e4dd857ac8c88f778948fb49a7, it breaks configuration with the latest XRootD 5.6.3, for example already found in EPEL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/pull/14170:140,security,configur,configuration,140,"Revert ""[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD""; This reverts commit 2ee691da61ca51e4dd857ac8c88f778948fb49a7, it breaks configuration with the latest XRootD 5.6.3, for example already found in EPEL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14170
https://github.com/root-project/root/issues/14171:149,availability,avail,available,149,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1401,availability,error,error,1401,"problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2204,availability,Error,Error,2204,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2806,availability,Operat,Operating,2806,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:43,deployability,updat,update,43,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:236,deployability,updat,update-mode,236,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:321,deployability,contain,containing,321,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:489,deployability,updat,update,489,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:873,deployability,Automat,Automatic,873,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:969,deployability,contain,contain,969,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1037,deployability,version,version,1037,"e update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection na",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1084,deployability,version,version,1084,"cked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStream",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1112,deployability,updat,updated,1112,"cription. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1292,deployability,updat,updated,1292,"er multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1501,deployability,updat,updated,1501,"o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1680,deployability,version,version,1680,"cutables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1715,deployability,version,version,1715,"headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1778,deployability,version,version,1778," content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1789,deployability,Updat,Updating,1789,"r some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1804,deployability,contain,containing,1804,"files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Ope",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1835,deployability,version,version,1835,"t ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1918,deployability,updat,updated,1918,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2150,deployability,updat,updated,2150,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2722,deployability,version,version,2722,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2762,deployability,Instal,Installation,2762,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2783,deployability,build,build,2783,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:518,energy efficiency,load,loading,518,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:833,energy efficiency,current,current,833,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:883,integrability,schema,schema,883,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1037,integrability,version,version,1037,"e update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection na",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1084,integrability,version,version,1084,"cked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStream",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1680,integrability,version,version,1680,"cutables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1715,integrability,version,version,1715,"headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1778,integrability,version,version,1778," content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1835,integrability,version,version,1835,"t ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2722,integrability,version,version,2722,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1037,modifiability,version,version,1037,"e update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection na",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1084,modifiability,version,version,1084,"cked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStream",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1680,modifiability,version,version,1680,"cutables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1715,modifiability,version,version,1715,"headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1778,modifiability,version,version,1778," content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1835,modifiability,version,version,1835,"t ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2722,modifiability,version,version,2722,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:518,performance,load,loading,518,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:783,performance,content,content,783,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1401,performance,error,error,1401,"problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2204,performance,Error,Error,2204,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:149,reliability,availab,available,149,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:43,safety,updat,update,43,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:149,safety,avail,available,149,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:236,safety,updat,update-mode,236,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:489,safety,updat,update,489,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1112,safety,updat,updated,1112,"cription. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1292,safety,updat,updated,1292,"er multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1401,safety,error,error,1401,"problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1501,safety,updat,updated,1501,"o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1789,safety,Updat,Updating,1789,"r some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1918,safety,updat,updated,1918,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1944,safety,test,testFile,1944,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2150,safety,updat,updated,2150,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2176,safety,test,testFile,2176,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2204,safety,Error,Error,2204,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:27,security,loss,loss,27,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:43,security,updat,update,43,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:149,security,availab,available,149,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:236,security,updat,update-mode,236,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:489,security,updat,update,489,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1112,security,updat,updated,1112,"cription. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1292,security,updat,updated,1292,"er multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1501,security,updat,updated,1501,"o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1732,security,ident,identical,1732,"s inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1789,security,Updat,Updating,1789,"r some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1918,security,updat,updated,1918,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2150,security,updat,updated,2150,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:570,testability,simpl,simple,570,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:873,testability,Automat,Automatic,873,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1944,testability,test,testFile,1944,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2176,testability,test,testFile,2176,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2853,testability,context,context,2853,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:570,usability,simpl,simple,570,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:599,usability,close,closes,599,"StreamerInfo corruption or loss upon TFile update; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The original report is available here:. https://root-forum.cern.ch/t/streamerinfo-is-not-stored-in-tfile-with-update-mode/57383. ```. We have an executable which loops over multiple TFiles (each containing 1 object of different classes not known to this application, though the problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:1401,usability,error,error,1401,"problem is the same if all includes are added) , and for each file. opens it in the ""update"" mode (w/o explicitly loading the object stored in the file). writes some simple struct with metadata. closes the file. Afterwards, in separate processes, these files are read by other executables (Consumers) which include headers for objects inside these files. The ClassVersion of the content for some of these files is lower than the current ClassVersion used by Consumers. Automatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/issues/14171:2204,usability,Error,Error,2204,"tomatic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ). the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error. I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;. ./runTest.sh. It produces (suppressing ACLIC output):. Creating library for MyClass version 1. Storing object of class version 1 in two identical files. Creating library for MyClass version 2. Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file. Processing testFile.C(""outv1.root"")... printing GetStreamerInfoList()->Print() for outv1.root. Collection name='TList', class='TList', size=2. OBJ: TStreamerInfo	MyClass	. OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file. Processing testFile.C(""outv2.root"")... Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6. Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(). printing GetStreamerInfoList()->Print() for outv2.root. Collection name='TList', class='TList', size=1. OBJ: TStreamerInfo	OtherClass	. ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip). and run the shell script`runTest.sh`. ### ROOT version. 6.28/04. gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14171
https://github.com/root-project/root/pull/14172:239,deployability,build,builds,239,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:348,deployability,version,versions,348,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:513,deployability,version,version,513,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:612,deployability,updat,updated,612,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:206,energy efficiency,current,currently,206,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:348,integrability,version,versions,348,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:513,integrability,version,version,513,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:192,interoperability,standard,standards,192,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:348,modifiability,version,versions,348,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:513,modifiability,version,version,513,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:582,safety,test,tested,582,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:612,safety,updat,updated,612,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:612,security,updat,updated,612,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:582,testability,test,tested,582,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:170,usability,support,supported,170,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:317,usability,prototyp,prototype,317,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:373,usability,support,supported,373,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/pull/14172:408,usability,prototyp,prototype,408,Remove the K&R style definitions from builtin zlib; . # This Pull request:. ## Changes or fixes:. Fix the K&R style definitions in builtin zlib as they will no longer be supported by future C standards and currently emit warnings on clang builds:. ```. zlib/deflate.c:393:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. int ZEXPORT deflateResetKeep (strm). ```. This also seems to have landed in upstream zlib in version 1.3 (see [zlib.net](https://zlib.net/). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). The same changes as in iLCSoft/SIO#20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14172
https://github.com/root-project/root/issues/14173:1058,availability,Operat,Operating,1058,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,deployability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,deployability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:998,deployability,version,version,998,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:1025,deployability,Instal,Installation,1025,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:9,integrability,coupl,couple,9,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:115,integrability,coupl,couple,115,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:441,integrability,compon,component,441,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,integrability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,integrability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:998,integrability,version,version,998,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:441,interoperability,compon,component,441,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:649,interoperability,coordinat,coordinate,649,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,interoperability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,interoperability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:9,modifiability,coupl,couple,9,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:115,modifiability,coupl,couple,115,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:441,modifiability,compon,component,441,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,modifiability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,modifiability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:998,modifiability,version,version,998,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,reliability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,reliability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,security,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,security,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:9,testability,coupl,couple,9,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:115,testability,coupl,couple,115,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:328,testability,simpl,simply,328,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:402,testability,Simpl,Simple,402,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:843,testability,integr,integral,843,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:939,testability,integr,integral-in-a-thnd,939,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:1098,testability,context,context,1098,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:328,usability,simpl,simply,328,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/issues/14173:402,usability,Simpl,Simple,402,"Adding a couple of useful methods in THnD; ### Explain what you would like to see improved and how. I am missing a couple of methods inside `THnD` class that I use frequently when working with the usual `TH1D`, `TH2D`, ... classes. I am missing something like: `std::vector <Double_t> GetBinCenter(std::vector<Int_t> idx)` that simply returns the center of the bin using the ranges and number of bins. Simple implementation such as for each component doing:. ```. xMin + (xMax-xMin)*((double)bin-0.5)/Nbins;. ```. where `xMin`, `xMax`, `Nbins` are known for each dimensions inside `THnD` and `bin` is the corresponding bin where we want to know its coordinate. Perhaps there is another way to achieve this (please let me know), but it would be interesting that there would be coherence between `TH` and `THn` methods. Also a method to get the integral would be interesting. See this post:. https://root-forum.cern.ch/t/method-to-calculate-integral-in-a-thnd/57276. Thanks for considering! ### ROOT version. ROOT 6.26/02. ### Installation method. source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14173
https://github.com/root-project/root/pull/14174:646,availability,avail,available,646,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:710,availability,error,error,710,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:809,availability,error,error,809,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:878,availability,ERROR,ERROR,878,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:100,deployability,build,building,100,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:292,deployability,build,builds,292,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:609,deployability,instal,install,609,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:917,deployability,Fail,Failed,917,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1024,deployability,Instal,Install,1024,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1112,deployability,instal,installed,1112,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1252,deployability,configurat,configuration,1252,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1433,deployability,Fail,Failed,1433,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:136,integrability,sub,subpackage,136,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:180,integrability,interfac,interface,180,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:498,integrability,rout,routine,498,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1252,integrability,configur,configuration,1252,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1321,integrability,rout,routines,1321,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:180,interoperability,interfac,interface,180,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:222,interoperability,incompatib,incompatible,222,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:670,interoperability,distribut,distributions,670,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:180,modifiability,interfac,interface,180,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1252,modifiability,configur,configuration,1252,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:710,performance,error,error,710,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:809,performance,error,error,809,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:878,performance,ERROR,ERROR,878,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:646,reliability,availab,available,646,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:917,reliability,Fail,Failed,917,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1433,reliability,Fail,Failed,1433,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:646,safety,avail,available,646,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:710,safety,error,error,710,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:809,safety,error,error,809,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:878,safety,ERROR,ERROR,878,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:646,security,availab,available,646,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:1252,security,configur,configuration,1252,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:587,usability,user,user,587,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:685,usability,Close,Closes,685,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:710,usability,error,error,710,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:809,usability,error,error,809,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14174:878,usability,ERROR,ERROR,878,"[RF] Make `RooFFTConfPdf` also work if ROOT was built with `fftw3=OFF`; Since ROOT 6.30, we are not building ROOT with the `math/fftw`. subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and. fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for. FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work. again in this situation: the routine that uses fftw is declared. on-the-fly to the interpreter. This will work if the user has an. external install of `fftw3`, which is usually available in all Linux. distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:. ```txt. input_line_21:1:10: fatal error: 'fftw3.h' file not found. #include ""fftw3.h"". ^~~~~~~~~. [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. You have three options to fix this problem:. 1) Install fftw3 on your system so that the interpreter can find it. 2) In case fftw3.h is installed somewhere else,. tell ROOT with gInterpreter->AddIncludePath() where to find it. 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,. such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'. what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14174
https://github.com/root-project/root/pull/14175:319,energy efficiency,schedul,schedule,319,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:219,interoperability,plug,plugin,219,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:191,modifiability,Exten,Extends,191,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:270,modifiability,Exten,Extends,270,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:319,performance,schedul,schedule,319,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:442,safety,test,tested,442,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14175:442,testability,test,tested,442,"[ntuple, io] Gracefully handle vector read limits; # This Pull request:. Adds a mechanism to RRawFile to report limitations of vector read requests. Xrootd servers are enforcing such limits. Extends the XRootD RRawFile plugin to query and report the server-side limits. Extends the RNTuple file page source to properly schedule vector reads in presence of limits. ## Changes or fixes:. Fixes RNTuple reading from XRootD. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14175
https://github.com/root-project/root/pull/14176:9,deployability,Instal,Install,9,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:109,deployability,instal,installed,109,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:268,deployability,instal,installation,268,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:385,deployability,patch,patches,385,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:407,deployability,build,build,407,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:499,deployability,updat,updated,499,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:544,deployability,build,build,544,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:157,integrability,configur,configurable,157,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:248,interoperability,specif,specify,248,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:157,modifiability,configur,configurable,157,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:413,modifiability,pac,packages,413,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:563,modifiability,pac,package,563,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:385,safety,patch,patches,385,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:469,safety,test,tested,469,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:499,safety,updat,updated,499,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:157,security,configur,configurable,157,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:385,security,patch,patches,385,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:499,security,updat,updated,499,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:469,testability,test,tested,469,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:152,usability,user,user,152,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:240,usability,user,user,240,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14176:343,usability,command,command,343,"Minuit2: Install libs to CMAKE_INSTALL_LIBDIR.; Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14176
https://github.com/root-project/root/pull/14177:57,deployability,releas,release,57,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:136,deployability,releas,release,136,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:802,deployability,build,building,802,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:436,integrability,interfac,interface,436,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:768,integrability,interfac,interfaces,768,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:436,interoperability,interfac,interface,436,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:768,interoperability,interfac,interfaces,768,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:436,modifiability,interfac,interface,436,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:631,modifiability,paramet,parameters,631,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:768,modifiability,interfac,interfaces,768,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:211,performance,memor,memory,211,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:565,performance,memor,memory-safe,565,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:756,performance,memor,memory-safe,756,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:204,safety,detect,detect,204,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:572,safety,safe,safe,572,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:763,safety,safe,safe,763,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:204,security,detect,detect,204,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:48,usability,user,users,48,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:159,usability,user,users,159,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:211,usability,memor,memory,211,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:302,usability,help,helper,302,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:431,usability,user,user,431,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:565,usability,memor,memory-safe,565,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14177:756,usability,memor,memory-safe,756,"[RF] Promote `ROOFIT_MEMORY_SAFE_INTERFACES` to users in release notes; * The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14177
https://github.com/root-project/root/pull/14178:130,deployability,build,build,130,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:539,deployability,version,versions,539,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:880,deployability,updat,updated,880,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:539,integrability,version,versions,539,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:801,integrability,rout,route,801,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:539,modifiability,version,versions,539,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:699,modifiability,variab,variable,699,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:850,safety,test,tested,850,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:880,safety,updat,updated,880,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:455,security,polic,policy,455,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:475,security,polic,policy,475,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:557,security,polic,policy,557,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:880,security,updat,updated,880,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:850,testability,test,tested,850,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:203,usability,user,user,203,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:443,usability,help,help,443,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:516,usability,Support,Supporting,516,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:676,usability,learn,learn,676,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14178:694,usability,hint,hint,694,"VDT Finding Fix, master branch (2023.12.05.); # This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14178
https://github.com/root-project/root/pull/14179:333,integrability,event,eventually,333,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:19,safety,test,test,19,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:52,safety,test,test,52,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:126,safety,test,test,126,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:308,safety,test,test,308,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:19,testability,test,test,19,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:52,testability,test,test,52,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:126,testability,test,test,126,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14179:308,testability,test,test,308,"[RF] Deprecate old test statistics headers; The old test statistic headers and classes should not be used anymore,. since the test statistics should be created with the higher-level. functions `createNLL()` and `createChi2()`. This allows us more. flexibility in the implementation, and to phase out the old test. statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14179
https://github.com/root-project/root/pull/14180:261,deployability,releas,released,261,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:362,deployability,version,version,362,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:362,integrability,version,version,362,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:362,modifiability,version,version,362,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:628,usability,Close,Closes,628,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14180:643,usability,Close,Closes,643,"[cmake] Migrate to `XRootDConfig.cmake` shipped by XRootD; **Do not merge for now**. Migrates finding XRootD to the `XRootDConfig.cmake` from XRootD itself. This repeats the second commit of #13752, which was rightfully reverted by #14170. Once xrootd 5.6.4 is released, the `XRootDConfig.cmake` shipped by XRootD should actually work for ROOT. When this xrootd version lands on `cvmfs` and Fedora/EPEL, this PR can be merged. I just opened it now already so this story is not forgotten (including all the relevant links). See also the discussion after https://github.com/root-project/root/issues/12631#issuecomment-1838178520. Closes #12631. Closes #11750.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14180
https://github.com/root-project/root/pull/14181:695,availability,consist,consistency,695,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:307,deployability,build,builds,307,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:333,deployability,modul,modules,333,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:240,energy efficiency,load,loaded,240,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:548,energy efficiency,current,currently,548,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:516,integrability,discover,discovered,516,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:516,interoperability,discover,discovered,516,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:333,modifiability,modul,modules,333,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:240,performance,load,loaded,240,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:333,safety,modul,modules,333,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:516,usability,discov,discovered,516,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14181:695,usability,consist,consistency,695,"[ntuple] Fix the way `RPairField` determines member offsets; This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14181
https://github.com/root-project/root/pull/14182:62,deployability,build,builds,62,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14182:169,deployability,fail,fail,169,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14182:105,modifiability,variab,variable,105,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14182:169,reliability,fail,fail,169,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14182:163,safety,test,tests,163,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14182:163,testability,test,tests,163,"[cling] Provide fallback for LLVM_INCLUDE_DIRS; In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14182
https://github.com/root-project/root/pull/14184:491,deployability,updat,updated,491,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:315,integrability,sub,subject,315,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:289,modifiability,paramet,parameters,289,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:134,performance,time,time,134,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:461,safety,test,tested,461,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:491,safety,updat,updated,491,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:491,security,updat,updated,491,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:461,testability,test,tested,461,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:13,usability,support,support,13,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:81,usability,support,support,81,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:150,usability,support,support,150,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:247,usability,Support,Support,247,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14184:380,usability,support,support,380,"[ntuple] Add support for n-dim C arrays in EDMs; # This Pull request:. Adds type support for multidimensional C style arrays. For the time being, the support is limited to the construction of fields from type strings through `RFieldBase::Create`. Support for construction through template parameters `MakeField` is subject to a follow-up PR. ## Changes or fixes:. Enables RNTuple support for classes with multidimensional C array members . ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14184
https://github.com/root-project/root/pull/14185:340,availability,robust,robust,340,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:579,deployability,version,versions-,579,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:579,integrability,version,versions-,579,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:119,modifiability,refact,refactoring,119,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:579,modifiability,version,versions-,579,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:119,performance,refactor,refactoring,119,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:340,reliability,robust,robust,340,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:340,safety,robust,robust,340,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:649,safety,valid,validated,649,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/pull/14185:649,security,validat,validated,649,"[RF] Again skip overflow bins correctly in HistFactory in 2D and 3D case; In the 6.30 dev cycle, I made a mistake when refactoring the HistFactory code in 3c68044c257:. https://github.com/root-project/root/commit/3c68044c257e9ee7207e23e7cceb69d7eda596e9#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1801-L1804. The robust way to skip overflow bins in 2D and 3D was replaced with something that only worked in 1D. Thanks to Veronica for reporting this on the ROOT forum! https://root-forum.cern.ch/t/discrepancy-in-2d-histfactory-fit-results-between-root-versions-6-28-06-vs-nightlies-with-beeston-barlow-method-activated. I validated now that the fit results with the reproducer on the forum are the same with 6.28 and 6.30. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14185
https://github.com/root-project/root/issues/14186:194,availability,operat,operations,194,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1456,availability,echo,echo,1456,"ake the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2606,availability,Operat,Operating,2606,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:216,deployability,fail,failing,216,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:301,deployability,build,build,301,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:325,deployability,build,build,325,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:817,deployability,version,version,817,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:946,deployability,version,version,946,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1197,deployability,depend,depend,1197,"ions. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1412,deployability,build,build,1412,"ctionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1426,deployability,patch,patches,1426,"loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1537,deployability,patch,patches,1537,"ears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1571,deployability,build,build,1571,"like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1612,deployability,build,build,1612,"heritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1657,deployability,build,build,1657," Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1686,deployability,patch,patches,1686,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1712,deployability,patch,patches,1712,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2094,deployability,fail,failed,2094,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2545,deployability,version,version,2545,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2563,deployability,patch,patches,2563,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2576,deployability,Instal,Installation,2576,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:315,energy efficiency,optim,optimized,315,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:430,energy efficiency,load,loaded,430,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:518,energy efficiency,load,loading,518,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1146,energy efficiency,reduc,reduced,1146,"e now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2152,energy efficiency,load,loading,2152,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:661,integrability,Schema,Schematically,661,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:817,integrability,version,version,817,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:912,integrability,pub,public,912,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:946,integrability,version,version,946,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1197,integrability,depend,depend,1197,"ions. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1348,integrability,pub,public,1348,"o work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2545,integrability,version,version,2545,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:600,interoperability,specif,specify,600,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:613,modifiability,inherit,inheritance,613,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:817,modifiability,version,version,817,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:946,modifiability,version,version,946,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1197,modifiability,depend,depend,1197,"ions. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2545,modifiability,version,version,2545,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:147,performance,time,time,147,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:315,performance,optimiz,optimized,315,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:430,performance,load,loaded,430,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:518,performance,load,loading,518,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2152,performance,load,loading,2152,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:216,reliability,fail,failing,216,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1081,reliability,pra,practice,1081,"- [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be com",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1188,reliability,doe,does,1188,"ary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2094,reliability,fail,failed,2094,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:46,safety,compl,complete,46,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1197,safety,depend,depend,1197,"ions. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1227,safety,test,test,1227,"clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataV",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1426,safety,patch,patches,1426,"loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1537,safety,patch,patches,1537,"ears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1594,safety,test,test,1594," to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1686,safety,patch,patches,1686,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1712,safety,patch,patches,1712,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2082,safety,compl,complete,2082,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2132,safety,test,test,2132,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2563,safety,patch,patches,2563,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:46,security,compl,complete,46,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1426,security,patch,patches,1426,"loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1537,security,patch,patches,1537,"ears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1686,security,patch,patches,1686,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1712,security,patch,patches,1712,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2082,security,compl,complete,2082,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2563,security,patch,patches,2563,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:0,testability,Assert,Assertion,0,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:22,testability,context,context,22,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:235,testability,assert,assertions,235,"Assertion Declaration context must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1197,testability,depend,depend,1197,"ions. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1227,testability,test,test,1227,"clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataV",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1594,testability,test,test,1594," to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1871,testability,Assert,Assertion,1871,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2058,testability,context,context,2058,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2132,testability,test,test,2132,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:2648,testability,context,context,2648,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1022,usability,user,user,1022,"ntext must already be complete!; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations. sometimes failing with clang assertions. When this happens, it is. of course only in the debug build; in the optimized build,. everything seems to work fine. The problem. is related to the ordering in which dictionaries are loaded --- we can. usually make the crashes go away by forcing a particular dictionary. loading order. This appears to be related to the traits-like class that we use to specify. the inheritance relations for our DataVector class. Schematically, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/issues/14186:1741,usability,tool,tools,1741,"ally, it looks. like this:. ```. struct NoBase {};. template <class T>. struct DataVectorBase. {. typedef NoBase Base;. };. // Specialized derived version. template <class T, class BASE = typename DataVectorBase<T>::Base>. class DataVector : public BASE {...};. // Base class version. template <class T>. class DataVector<T, NoBase> {...};. ```. where user classes then specialize the DataVectorBase class. (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that. it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach. archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```. $ . ./setup. $ echo $ROOTSYS. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg. $ ./build.sh . $ python -i test.py. python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed. *** Break *** abort. ```. The test script here is loading dictionaries from two separate libraries:. ```. getattr( ROOT, 'DataVector<TrackParticle_v1>', None ). getattr( ROOT, 'DataVector<Egamma_v1>', None ). ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942. May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14186
https://github.com/root-project/root/pull/14187:30,deployability,build,build,30,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:131,deployability,build,build,131,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:173,deployability,instal,installation,173,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:394,deployability,build,builds,394,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:408,deployability,build,build,408,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:58,energy efficiency,current,currently,58,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:329,integrability,pub,public,329,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/pull/14187:344,testability,Context,Context,344,"[RF] Enable external roottest build; By moving the header currently hidden in `src/RooFit` to `inc/RooFit` we can allow a roottest build to work when built with an external installation of ROOT. To preserve the intent of the header, the functions declared are moved to the `RooFit::Internal` namespace, as they are not meant for public use. ## Context. This is required for the conda nightlies builds, which build roottest after having built ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14187
https://github.com/root-project/root/issues/14188:308,availability,Error,Error,308,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1931,availability,Operat,Operating,1931,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:339,deployability,Modul,Modules,339,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:510,deployability,configurat,configuration,510,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:612,deployability,configurat,configuration,612,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:671,deployability,version,version,671,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:784,deployability,instal,installation,784,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:887,deployability,contain,containing,887,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1011,deployability,instal,installed,1011,"ge ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-proje",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1027,deployability,Stack,Stack,1027,"roken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1202,deployability,releas,release,1202,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1322,deployability,VERSION,VERSION,1322,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1414,deployability,version,version,1414,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1890,deployability,Instal,Installation,1890,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1918,deployability,Releas,Release,1918,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:510,integrability,configur,configuration,510,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:612,integrability,configur,configuration,612,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:671,integrability,version,version,671,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1322,integrability,VERSION,VERSION,1322,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1414,integrability,version,version,1414,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:322,interoperability,share,share,322,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:339,modifiability,Modul,Modules,339,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:502,modifiability,pac,package,502,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:510,modifiability,configur,configuration,510,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:604,modifiability,pac,package,604,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:612,modifiability,configur,configuration,612,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:671,modifiability,version,version,671,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:974,modifiability,pac,package,974,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1322,modifiability,VERSION,VERSION,1322,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1414,modifiability,version,version,1414,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:308,performance,Error,Error,308,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:308,safety,Error,Error,308,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:339,safety,Modul,Modules,339,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:510,security,configur,configuration,510,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:612,security,configur,configuration,612,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1569,security,Team,Team,1569,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1978,testability,context,context,1978,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:182,usability,user,users,182,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:308,usability,Error,Error,308,"cmake find_package ROOT 6.30 broken: it requires nlohmann-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/issues/14188:1752,usability,help,help,1752,"-json; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. @bellenot @linev, this was seen by several users: . https://github.com/root-project/root/issues/14163. https://github.com/root-project/root-docker/issues/60. ```. CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):. By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this. project has asked CMake to find a package configuration file provided by. ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json"". (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake. nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set. ""nlohmann_json_DIR"" to a directory containing one of the above files. If. ""nlohmann_json"" provides a separate development package or SDK, be sure it. has been installed. Call Stack (most recent call first):. /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency). gui/CMakeLists.txt:28 (find_package). ```. `builtin_nlohmann` is off in the binary release, so the Findpackage CMake script should not require it to be found. ### Reproducer. ```. cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFIG REQUIRED). ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/02 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 27 2023, 19:50:38 |. | From tags/v6-30-02@ |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. https://github.com/root-project/root/pull/14178#discussion_r1415435156",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14188
https://github.com/root-project/root/pull/14189:29,deployability,API,API,29,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:175,energy efficiency,current,current,175,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:29,integrability,API,API,29,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:29,interoperability,API,API,29,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:132,interoperability,bind,binding,132,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:132,modifiability,bind,binding,132,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:41,security,expos,expose,41,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14189:168,security,expos,expose,168,"[webgui] change loopback via API, do not expose server dirs [6.30]; Introduce `RWebWindowsManager::SetLoopbackMode()` to let change binding to loopback device . Do not expose current directory via webgui http server. Do not provide list of window on default webpage. Do not allow to reconnect to RBrowser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14189
https://github.com/root-project/root/pull/14190:318,availability,cluster,cluster,318,"[ntuple] Implement RPageSinkFile::CommitSealedPageVImpl; Instead of writing one key per page, the vector of sealed pages can be written into a single key by first reserving an appropriate size. ---. This PR changes the RNTuple embedding into `TFile`s, in particular we can have both schemes now (key per page, key per cluster, or mixture). I think this is fine because the locator information is solely an offset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14190:318,deployability,cluster,cluster,318,"[ntuple] Implement RPageSinkFile::CommitSealedPageVImpl; Instead of writing one key per page, the vector of sealed pages can be written into a single key by first reserving an appropriate size. ---. This PR changes the RNTuple embedding into `TFile`s, in particular we can have both schemes now (key per page, key per cluster, or mixture). I think this is fine because the locator information is solely an offset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14190
https://github.com/root-project/root/pull/14191:171,deployability,updat,updated,171,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:141,safety,test,tested,141,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:171,safety,updat,updated,171,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:171,security,updat,updated,171,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:141,testability,test,tested,141,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:9,usability,document,documentation,9,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14191:76,usability,document,documentation,76,[DF] Add documentation for RDatasetSpec class; # This Pull request:. Adding documentation for the RDatasetSpec class. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14101 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14191
https://github.com/root-project/root/pull/14192:88,integrability,compon,components,88,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:133,integrability,COMPON,COMPONENTS,133,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:216,integrability,compon,components,216,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:88,interoperability,compon,components,88,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:133,interoperability,COMPON,COMPONENTS,133,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:216,interoperability,compon,components,216,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:227,interoperability,specif,specified,227,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:88,modifiability,compon,components,88,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:133,modifiability,COMPON,COMPONENTS,133,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:216,modifiability,compon,components,216,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14192:66,usability,command,command,66,"[cmake] clarify search for nlohmann_json; if `find_package(ROOT)` command list required components like: `find_package(ROOT REQUIRED COMPONENTS Gpad)`. one can decide if external `nlohmann/json` really needed. If no components specified - always search for external, of course if builtin is not used. Address #14188",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14192
https://github.com/root-project/root/pull/14193:72,energy efficiency,schedul,scheduler,72,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:124,energy efficiency,alloc,allocation,124,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:182,integrability,buffer,buffer,182,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:316,integrability,buffer,buffer,316,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:72,performance,schedul,scheduler,72,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14193:110,safety,avoid,avoids,110,"[ntuple] RPageSinkBuf: Always seal before CommitCluster; Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14193
https://github.com/root-project/root/pull/14194:88,deployability,build,build,88,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:113,deployability,version,version,113,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:154,deployability,version,version,154,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:113,integrability,version,version,113,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:154,integrability,version,version,154,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:113,modifiability,version,version,113,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:154,modifiability,version,version,154,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:248,reliability,doe,does,248,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/pull/14194:196,usability,support,support,196,"[http] let use external civetweb; With `-Dbuiltin_civetweb=OFF` one can try to find and build ROOT with external version of civetweb. . But this external version should be compiled with websocket support - which is not always a case. For instance, does not work on OpenSUSE, where civetweb compiled without websockets",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14194
https://github.com/root-project/root/issues/14195:448,availability,Error,Error,448,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1045,availability,error,errors,1045,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1237,availability,Operat,Operating,1237,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:50,deployability,contain,container,50,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:168,deployability,version,version,168,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:199,deployability,contain,container,199,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:392,deployability,version,version,392,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:479,deployability,Modul,Modules,479,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:603,deployability,Stack,Stack,603,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:658,deployability,Modul,Modules,658,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:748,deployability,modul,modules,748,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:832,deployability,Modul,Modules,832,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1185,deployability,version,version,1185,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1204,deployability,Instal,Installation,1204,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:956,energy efficiency,Load,LoadROOT,956,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:168,integrability,version,version,168,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:392,integrability,version,version,392,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:528,integrability,messag,message,528,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1021,integrability,Configur,Configuring,1021,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1185,integrability,version,version,1185,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:462,interoperability,share,share,462,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:528,interoperability,messag,message,528,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:641,interoperability,share,share,641,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:815,interoperability,share,share,815,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:168,modifiability,version,version,168,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:226,modifiability,variab,variables,226,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:392,modifiability,version,version,392,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:479,modifiability,Modul,Modules,479,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:658,modifiability,Modul,Modules,658,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:748,modifiability,modul,modules,748,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:832,modifiability,Modul,Modules,832,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1021,modifiability,Configur,Configuring,1021,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1185,modifiability,version,version,1185,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:448,performance,Error,Error,448,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:956,performance,Load,LoadROOT,956,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1045,performance,error,errors,1045,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:448,safety,Error,Error,448,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:479,safety,Modul,Modules,479,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:658,safety,Modul,Modules,658,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:748,safety,modul,modules,748,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:832,safety,Modul,Modules,832,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1045,safety,error,errors,1045,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1021,security,Configur,Configuring,1021,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1278,testability,context,context,1278,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:410,usability,minim,minimum,410,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:448,usability,Error,Error,448,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/issues/14195:1045,usability,error,errors,1045,"cmake find_package `VDT not found` in root docker container; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container. The VDT related variables are not found in cmake although it is built internally. ```. -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") . CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):. Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY). Call Stack (most recent call first):. /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE). /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args). /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package). /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency). cmake/Req/LoadROOT.cmake:5 (find_package). CMakeLists.txt:83 (include). -- Configuring incomplete, errors occurred! ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14195
https://github.com/root-project/root/pull/14196:131,security,access,access,131,[ntuple] Add RDF factory for datasource with chain; # This Pull request:. Adds `FromRNTuple` for vectors of file names. Gives easy access to the RNTuple chains in RDF through PyROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14196
https://github.com/root-project/root/pull/14197:16,testability,Simpl,Simplify,16,"Revert ""[Cling] Simplify std::tuple/pair value printer""; This reverts commit bfbb58e6f74c38b883ce6e6e096b6c6e44028869. cling needs to be able to interpret C++11, even if built with C++17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14197
https://github.com/root-project/root/pull/14197:16,usability,Simpl,Simplify,16,"Revert ""[Cling] Simplify std::tuple/pair value printer""; This reverts commit bfbb58e6f74c38b883ce6e6e096b6c6e44028869. cling needs to be able to interpret C++11, even if built with C++17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14197
https://github.com/root-project/root/issues/14198:644,availability,Operat,Operating,644,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:586,deployability,version,version,586,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:607,deployability,Instal,Installation,607,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:586,integrability,version,version,586,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:586,modifiability,version,version,586,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:493,performance,memor,memory,493,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:29,safety,valid,valid,29,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:684,testability,context,context,684,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14198:493,usability,memor,memory,493,"Value printer confused about valid address; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On MacOS the address of the name returned by `type_index` for the `type_info` of numerical types (and `void`) is incorrectly tagged by the value printer as an invalid address. . ### Reproducer. ```. root.exe -b -l. root [0] std::type_index(typeid(TObject)).name(). (const char *) ""7TObject"". root [1] std::type_index(typeid(int)).name(). (const char *) 0x19eab659c <invalid memory address>. root [2] std::cout << (const char *) 0x19eab659c << '\n';. i. ```. ### ROOT version. master. ### Installation method. from sorce. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14198
https://github.com/root-project/root/issues/14199:3354,availability,Operat,Operating,3354,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:193,deployability,stack,stack,193,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3281,deployability,version,version,3281,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3316,deployability,Instal,Installation,3316,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:1896,energy efficiency,alloc,allocator,1896,"*, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:1987,energy efficiency,alloc,allocator,1987,".10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinim",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:2084,energy efficiency,alloc,allocator,2084,"otateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:2110,energy efficiency,alloc,allocator,2110,"in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:2182,energy efficiency,alloc,allocator,2182,"t+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3059,energy efficiency,alloc,allocator,3059,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3147,energy efficiency,alloc,allocator,3147,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3281,integrability,version,version,3281,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3281,modifiability,version,version,3281,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:0,performance,Memor,Memory,0,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:223,performance,memor,memory,223,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:301,security,loss,loss,301,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:886,security,Ident,IdentifierInfo,886,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:1920,security,hash,hash,1920,"vmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginMana",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:199,testability,trace,trace,199,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:3392,testability,context,context,3392,"rg/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (TCling.cxx:6172). ==201374== by 0xF2983743: TCling::AutoLoad(char const*, bool) (TCling.cxx:6284). ==201374== by 0xF29838A5: TCling::AutoLoad(std::type_info const&, bool) (TCling.cxx:6103). ==201374== by 0x14EB2D47: TClass::GetClass(std::type_info const&, bool, bool, unsigned long, unsigned long) (TClass.cxx:3316). ==201374== by 0x139AA957: GetClass (TClass.h:628). ==201374== by 0x139AA957: GetClassHelper<std::tuple<char const*> > (TClass.h:644). ==201374== by 0x139AA957: GetClass<std::tuple<char const*> > (TClass.h:654). ==201374== by 0x139AA957: long TPluginHandler::ExecPluginImpl<char const*>(char const* const&) (TPluginManager.h:175). ==201374== by 0x139A9B5C: ExecPlugin<char const*> (TPluginManager.h:218). ==201374== by 0x139A9B5C: ROOT::Math::Factory::CreateMinimizer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Factory.cxx:100). ```. ### Reproducer. See https://github.com/art-framework-suite/art/issues/142. ### ROOT version. master, v6.30, v6.28. ### Installation method. from source. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:0,usability,Memor,Memory,0,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/issues/14199:223,usability,memor,memory,223,"Memory hoarding triggered by the TPluginManager; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://github.com/art-framework-suite/art/issues/142 the stack trace below is hoarding memory:. ```. ==201374== 672,560 bytes in 6,005 blocks are definitely lost in loss record 29,240 of 29,249. ==201374== at 0x4C2B15C: malloc (vg_replace_malloc.c:431). ==201374== by 0xF344E725: clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF33E28E0: clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec&, clang::OpaquePtr<clang::QualType>, bool, bool, bool*, bool, clang::IdentifierInfo**, bool, bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF345DBD2: clang::Parser::TryAnnotateCXXScopeToken(bool) (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF2A57896: cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (in /cvmfs/mu2e.opensciencegrid.org/artexternals/root/v6_28_06b/Linux64bit+3.10-2.17-e28-p3915-prof/lib/libCling.so.6.28.06). ==201374== by 0xF29824CD: GetClassSharedLibsForModule (TCling.cxx:6957). ==201374== by 0xF29824CD: TCling::GetClassSharedLibs(char const*) (TCling.cxx:7061). ==201374== by 0xF2965186: TCling::ShallowAutoLoadImpl(char const*) (TCling.cxx:6119). ==201374== by 0xF2983220: TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14199
https://github.com/root-project/root/pull/14200:697,deployability,modul,module,697,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:0,energy efficiency,Core,Core,0,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:275,energy efficiency,load,load,275,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:397,energy efficiency,load,loaded,397,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:728,energy efficiency,alloc,allocation,728,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:817,energy efficiency,load,load,817,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:697,modifiability,modul,module,697,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:23,performance,memor,memory,23,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:275,performance,load,load,275,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:336,performance,memor,memory,336,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:397,performance,load,loaded,397,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:466,performance,memor,memory,466,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:721,performance,memor,memory,721,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:817,performance,load,load,817,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:6,safety,Avoid,Avoid,6,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:697,safety,modul,module,697,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:351,testability,emul,emulated,351,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:23,usability,memor,memory,23,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:336,usability,memor,memory,336,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:466,usability,memor,memory,466,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:656,usability,user,user,656,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14200:721,usability,memor,memory,721,Core: Avoid (indirect) memory hoarding in TPluginManager.; This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of. (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14200
https://github.com/root-project/root/pull/14201:20,deployability,modul,module,20,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:76,deployability,instal,installation,76,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:557,deployability,updat,updated,557,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:594,deployability,updat,updated,594,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:20,modifiability,modul,module,20,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:164,modifiability,variab,variable,164,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:253,modifiability,variab,variable,253,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:130,reliability,Doe,Does,130,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:20,safety,modul,module,20,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:527,safety,test,tested,527,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:557,safety,updat,updated,557,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:594,safety,updat,updated,594,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:557,security,updat,updated,557,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:594,security,updat,updated,594,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:527,testability,test,tested,527,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:356,usability,interact,interactively,356,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14201:466,usability,support,support,466,"Enhance CMake FindR module; - On Windows, attempts to find R in the default installation paths if not found via `find_program`. - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows. - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14201
https://github.com/root-project/root/pull/14203:171,availability,sli,slightly-wrong-what-is-the-default-confidence-level,171,[hist] [skip-ci] Fix legend in TEfficiency doc example; Fix the legend as reported and suggested in the ROOT Forum [here](https://root-forum.cern.ch/t/tefficiency-example-slightly-wrong-what-is-the-default-confidence-level/57480).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14203
https://github.com/root-project/root/pull/14203:171,reliability,sli,slightly-wrong-what-is-the-default-confidence-level,171,[hist] [skip-ci] Fix legend in TEfficiency doc example; Fix the legend as reported and suggested in the ROOT Forum [here](https://root-forum.cern.ch/t/tefficiency-example-slightly-wrong-what-is-the-default-confidence-level/57480).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14203
https://github.com/root-project/root/issues/14205:75,deployability,upgrad,upgrade,75,"[cling] Replace llvm::Optional and llvm::None with std::optional; With the upgrade to LLVM 16, `llvm::Optional` is a deprecated / legacy alias of `std::optional`: https://github.com/llvm/llvm-project/commit/2916b99182752b1aece8cc4479d8d6a20b5e02da Likewise, `llvm::None` / `llvm::NoneType` become `std::nullopt` / `std::nullopt_t`: https://github.com/llvm/llvm-project/commit/abfe65a12b77f9f0292d3ec70bd9fc3b9c13d905. These transitional aliases are removed with LLVM 17: https://github.com/llvm/llvm-project/commit/397f2e9ebee8d8e45547e90dd05228d7f965df67 To prepare for this, we should replace, in `core/metacling/` and `interpreter/cling`. * [ ] all spellings of `llvm::Optional` with `std::optional`,. * [ ] all spellings of `llvm::None` / `llvm::NoneType` with `std::nullopt` / `std::nullopt_t`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14205
https://github.com/root-project/root/issues/14205:600,energy efficiency,core,core,600,"[cling] Replace llvm::Optional and llvm::None with std::optional; With the upgrade to LLVM 16, `llvm::Optional` is a deprecated / legacy alias of `std::optional`: https://github.com/llvm/llvm-project/commit/2916b99182752b1aece8cc4479d8d6a20b5e02da Likewise, `llvm::None` / `llvm::NoneType` become `std::nullopt` / `std::nullopt_t`: https://github.com/llvm/llvm-project/commit/abfe65a12b77f9f0292d3ec70bd9fc3b9c13d905. These transitional aliases are removed with LLVM 17: https://github.com/llvm/llvm-project/commit/397f2e9ebee8d8e45547e90dd05228d7f965df67 To prepare for this, we should replace, in `core/metacling/` and `interpreter/cling`. * [ ] all spellings of `llvm::Optional` with `std::optional`,. * [ ] all spellings of `llvm::None` / `llvm::NoneType` with `std::nullopt` / `std::nullopt_t`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14205
https://github.com/root-project/root/issues/14205:75,modifiability,upgrad,upgrade,75,"[cling] Replace llvm::Optional and llvm::None with std::optional; With the upgrade to LLVM 16, `llvm::Optional` is a deprecated / legacy alias of `std::optional`: https://github.com/llvm/llvm-project/commit/2916b99182752b1aece8cc4479d8d6a20b5e02da Likewise, `llvm::None` / `llvm::NoneType` become `std::nullopt` / `std::nullopt_t`: https://github.com/llvm/llvm-project/commit/abfe65a12b77f9f0292d3ec70bd9fc3b9c13d905. These transitional aliases are removed with LLVM 17: https://github.com/llvm/llvm-project/commit/397f2e9ebee8d8e45547e90dd05228d7f965df67 To prepare for this, we should replace, in `core/metacling/` and `interpreter/cling`. * [ ] all spellings of `llvm::Optional` with `std::optional`,. * [ ] all spellings of `llvm::None` / `llvm::NoneType` with `std::nullopt` / `std::nullopt_t`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14205
https://github.com/root-project/root/pull/14206:31,availability,error,errors,31,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:0,deployability,Updat,Update,0,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:143,deployability,updat,updated,143,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:31,performance,error,errors,31,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:0,safety,Updat,Update,0,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:31,safety,error,errors,31,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:113,safety,test,tested,113,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:143,safety,updat,updated,143,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:0,security,Updat,Update,0,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:14,security,AUTH,AUTH,14,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:143,security,updat,updated,143,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:113,testability,test,tested,113,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/pull/14206:31,usability,error,errors,31,Update README.AUTH; minor typo errors solved... # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14206
https://github.com/root-project/root/issues/14207:547,availability,error,error,547,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:619,availability,error,error,619,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:832,availability,error,error,832,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:896,availability,error,error,896,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1346,availability,Operat,Operating,1346,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:76,deployability,instal,installed,76,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:182,deployability,build,build,182,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:264,deployability,build,building,264,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:416,deployability,build,build,416,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:453,deployability,BUILD,BUILD,453,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:590,deployability,version,version,590,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:661,deployability,version,version,661,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:701,deployability,build,build,701,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:738,deployability,BUILD,BUILD,738,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1174,deployability,build,build,1174,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1288,deployability,version,version,1288,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1310,deployability,Instal,Installation,1310,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1335,deployability,build,build,1335,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:590,integrability,version,version,590,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:661,integrability,version,version,661,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:862,integrability,Protocol,Protocol,862,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:871,integrability,Buffer,Buffer,871,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:925,integrability,Protocol,Protocol,925,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:934,integrability,Buffer,Buffer,934,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1288,integrability,version,version,1288,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:386,interoperability,conflict,conflict,386,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:839,interoperability,incompatib,incompatible,839,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:862,interoperability,Protocol,Protocol,862,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:902,interoperability,incompatib,incompatible,902,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:925,interoperability,Protocol,Protocol,925,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1231,interoperability,incompatib,incompatible,1231,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:590,modifiability,version,version,590,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:661,modifiability,version,version,661,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1288,modifiability,version,version,1288,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:547,performance,error,error,547,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:619,performance,error,error,619,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:832,performance,error,error,832,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:896,performance,error,error,896,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:547,safety,error,error,547,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:619,safety,error,error,619,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:832,safety,error,error,832,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:896,safety,error,error,896,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:1386,testability,context,context,1386,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:11,usability,support,support,11,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:225,usability,support,support,225,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:547,usability,error,error,547,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:619,usability,error,error,619,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:832,usability,error,error,832,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14207:896,usability,error,error,896,"SOFIE ONNX support breaks on macOS if own protobuf is provided and its also installed by homebrew ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is. #error This file was generated by an older version of protoc which is. ^. /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please. #error incompatible with your Protocol Buffer headers. Please. ^. ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path? ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14207
https://github.com/root-project/root/issues/14209:109,deployability,upgrad,upgraded,109,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:414,deployability,version,version,414,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:430,deployability,log,logic,430,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:737,deployability,upgrad,upgrades,737,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:414,integrability,version,version,414,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:109,modifiability,upgrad,upgraded,109,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:414,modifiability,version,version,414,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:713,modifiability,deco,decouple,713,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:737,modifiability,upgrad,upgrades,737,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:430,safety,log,logic,430,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:669,safety,test,testing,669,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:430,security,log,logic,430,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:430,testability,log,logic,430,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14209:669,testability,test,testing,669,"[cling] Enable JITLink for AArch64 and x86_64 on Linux; Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365. so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14209
https://github.com/root-project/root/issues/14210:225,availability,avail,available,225,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:42,deployability,patch,patches,42,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:225,reliability,availab,available,225,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:8,safety,Review,Review,8,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:42,safety,patch,patches,42,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:97,safety,review,reviews,97,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:225,safety,avail,available,225,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:42,security,patch,patches,42,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:225,security,availab,available,225,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:8,testability,Review,Review,8,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14210:97,testability,review,reviews,97,"[cling] Review workarounds for upstreamed patches; * [ ] `DeclUnloader::VisitNamedDecl`: https://reviews.llvm.org/D119675 was committed in https://github.com/llvm/llvm-project/commit/8c0eb32d2aa0bc73c176d7b25f47bdf37f967d3b, available since LLVM 15:. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/DeclUnloader.cpp#L559-L563. * [ ] `ExternalInterpreterSource::ImportDecl`. https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/ExternalInterpreterSource.cpp#L100-L118. I'm pretty sure there are more - these are the first results grepping for `FIXME` and `TODO` in `interpreter/cling/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14210
https://github.com/root-project/root/issues/14211:123,energy efficiency,current,current,123,Implement value printing for `std::source_location`; ### Feature description. It'd be great to have `std::source_location::current()` print out more than `(std::source_location) @0x...`! Just needs a `cling::printValue(const std::source_location *)` overload. ### Alternatives considered. _No response_. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14211
https://github.com/root-project/root/issues/14211:319,testability,context,context,319,Implement value printing for `std::source_location`; ### Feature description. It'd be great to have `std::source_location::current()` print out more than `(std::source_location) @0x...`! Just needs a `cling::printValue(const std::source_location *)` overload. ### Alternatives considered. _No response_. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14211
https://github.com/root-project/root/pull/14212:166,deployability,updat,updated,166,"[cling] Replace llvm::Optional, llvm::None with their std equivalents; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:136,safety,test,tested,136,"[cling] Replace llvm::Optional, llvm::None with their std equivalents; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:166,safety,updat,updated,166,"[cling] Replace llvm::Optional, llvm::None with their std equivalents; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:166,security,updat,updated,166,"[cling] Replace llvm::Optional, llvm::None with their std equivalents; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14212:136,testability,test,tested,136,"[cling] Replace llvm::Optional, llvm::None with their std equivalents; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14212
https://github.com/root-project/root/pull/14213:143,deployability,releas,release,143,[tree][relnotes] Add TChain::Add subdir globbing; # This Pull request:. Adds some examples of subdirectory globbing with `TChain::Add` to 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14213
https://github.com/root-project/root/pull/14213:33,integrability,sub,subdir,33,[tree][relnotes] Add TChain::Add subdir globbing; # This Pull request:. Adds some examples of subdirectory globbing with `TChain::Add` to 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14213
https://github.com/root-project/root/pull/14213:94,integrability,sub,subdirectory,94,[tree][relnotes] Add TChain::Add subdir globbing; # This Pull request:. Adds some examples of subdirectory globbing with `TChain::Add` to 6.32 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14213
https://github.com/root-project/root/pull/14214:203,deployability,updat,updated,203,[relnotes] mention missing changes 6.30; # This Pull request:. ## Changes or fixes:. https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14214
https://github.com/root-project/root/pull/14214:173,safety,test,tested,173,[relnotes] mention missing changes 6.30; # This Pull request:. ## Changes or fixes:. https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14214
https://github.com/root-project/root/pull/14214:203,safety,updat,updated,203,[relnotes] mention missing changes 6.30; # This Pull request:. ## Changes or fixes:. https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14214
https://github.com/root-project/root/pull/14214:203,security,updat,updated,203,[relnotes] mention missing changes 6.30; # This Pull request:. ## Changes or fixes:. https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14214
https://github.com/root-project/root/pull/14214:173,testability,test,tested,173,[relnotes] mention missing changes 6.30; # This Pull request:. ## Changes or fixes:. https://mattermost.web.cern.ch/root/pl/eem7ubp74frpz8wu7bj1cutc9c. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14214
https://github.com/root-project/root/issues/14215:1815,availability,Operat,Operating,1815,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1733,deployability,version,version,1733,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1752,deployability,Instal,Installation,1752,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:942,energy efficiency,Charg,Charge,942,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:323,integrability,event,events,323,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:513,integrability,event,events,513,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:637,integrability,event,event,637,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:840,integrability,Event,Event,840,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1733,integrability,version,version,1733,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:856,modifiability,variab,variables,856,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1733,modifiability,version,version,1733,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:34,performance,time,times,34,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:171,performance,time,times,171,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:219,performance,time,times,219,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1857,testability,context,context,1857,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:527,usability,clear,clear,527,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/issues/14215:1636,usability,person,person,1636,"Python loop not iterating as many times as it should; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. A PyRoot for loop isn't iterating as many times as it should (actually about half as many times as it should). ### Reproducer. I have a TTree in a for loop and have been comparing the number of events (the details of which are in branches) with someone else at various points in that loop. Within that loop is a second loop where I'm looking at the number of tracks coming from those events. It is clear that that inner track isn't iterating anywhere nearly as much as it should be. ```python. # This is the event loop . for entryNum in range (0, AutreeData.GetEntries()):. if (entryNum % 5000 == 0):. print(""Data Fourth Pass (Vn Corrected for Resolution)"", entryNum). # TTree. AutreeData.GetEntry(entryNum). # Event and track variables. px = AutreeData.Px. py = AutreeData.Py. pz = AutreeData.Pz. q = AutreeData.Charge. tofBeta = AutreeData.tofBeta. dEdx = AutreeData.dEdx. NSigmaPr = AutreeData.nSigmaPr. NSigmaKa = AutreeData.nSigmaKa. NSigmaPi = AutreeData.nSigmaPi. vx = AutreeData.Vx. vy = AutreeData.Vy. vz = AutreeData.Vz. Centrality = AutreeData.centrality. EPDnMIP = AutreeData.EPDnMip. EPDID = AutreeData.EPDid. DCA = AutreeData.DCA. NHits = AutreeData.nHits. NHitsdEdx = AutreeData.nHitsDedx. NHitsFit = AutreeData.nHitsFit. NHitsPoss = AutreeData.nHitsPoss. Tracknumber = AutreeData.tracknumber. # Various checks and irrelevant things go here. # Track loop. for index in range(Tracknumber):. # This histogram is filled to determine how many tracks there were initially. I had half of the other person's tracks (rougly). OverallTrackCheck.Fill(1) . # Irrelevant things go here. ```. ### ROOT version. 6.20. ### Installation method. It was in an online Jupyter notebook. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14215
https://github.com/root-project/root/pull/14216:52,deployability,updat,update,52,[ci] Enable Pythia8 on Fedora + C++20; There was an update to Pythia8 8.310 with my fix for compatibility with C++20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/pull/14216:92,interoperability,compatib,compatibility,92,[ci] Enable Pythia8 on Fedora + C++20; There was an update to Pythia8 8.310 with my fix for compatibility with C++20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/pull/14216:52,safety,updat,update,52,[ci] Enable Pythia8 on Fedora + C++20; There was an update to Pythia8 8.310 with my fix for compatibility with C++20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/pull/14216:52,security,updat,update,52,[ci] Enable Pythia8 on Fedora + C++20; There was an update to Pythia8 8.310 with my fix for compatibility with C++20.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14216
https://github.com/root-project/root/issues/14217:446,availability,error,error,446,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:3018,availability,Operat,Operating,3018,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:0,deployability,Modul,Module,0,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:74,deployability,build,build,74,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:228,deployability,fail,failing,228,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:316,deployability,modul,module,316,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:560,deployability,modul,module,560,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:724,deployability,modul,module,724,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2885,deployability,Build,Build,2885,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2957,deployability,version,version,2957,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2980,deployability,Instal,Installation,2980,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:528,energy efficiency,alloc,allocator,528,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:700,energy efficiency,alloc,allocator,700,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2957,integrability,version,version,2957,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:0,modifiability,Modul,Module,0,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:316,modifiability,modul,module,316,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:560,modifiability,modul,module,560,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:724,modifiability,modul,module,724,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2957,modifiability,version,version,2957,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:446,performance,error,error,446,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:228,reliability,fail,failing,228,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:914,reliability,doe,does,914,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1110,reliability,doe,does,1110,"nd passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1300,reliability,doe,does,1300,"216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1499,reliability,doe,does,1499,"d::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1676,reliability,doe,does,1676,"ar_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1817,reliability,doe,does,1817,"redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:1988,reliability,doe,does,1988,". ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2149,reliability,doe,does,2149,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2312,reliability,doe,does,2312,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2478,reliability,doe,does,2478,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2650,reliability,doe,does,2650,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:2811,reliability,doe,does,2811,"./include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match. pair(_U1&& __x, _U2&& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:323:2: note: declaration of 'pair' does not match. pair(_U1&&, _U2&&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:330:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:339:2: note: declaration of 'pair' does not match. pair(const pair<_U1, _U2>&) = delete;. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:345:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&& __p). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:354:2: note: declaration of 'pair' does not match. pair(pair<_U1, _U2>&&) = delete;. ^. ```. ### Reproducer. Build with GCC 13, `CMAKE_CXX_STANDARD=20`, and Pythia8 8.310. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:0,safety,Modul,Module,0,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:126,safety,test,tests,126,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:316,safety,modul,module,316,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:446,safety,error,error,446,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:560,safety,modul,module,560,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:724,safety,modul,module,724,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:126,testability,test,tests,126,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/issues/14217:446,usability,error,error,446,"Module merge problems with GCC 13, C++20, Pythia8; ### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:. ```. In module 'std' imported from input_line_1:1:. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match. constexpr pair(const pair&) = default; ///< Copy constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match. constexpr pair(pair&&) = default; ///< Move constructor. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match. pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match. pair(tuple<_Args1...>&, tuple<_Args2...>&,. ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match. pair(). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match. pair(const _T1& __x, const _T2& __y). ^. /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14217
https://github.com/root-project/root/pull/14218:530,deployability,updat,updated,530,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:186,energy efficiency,current,current,186,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:407,energy efficiency,current,current,407,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:500,safety,test,tested,500,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:530,safety,updat,updated,530,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:530,security,updat,updated,530,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/pull/14218:500,testability,test,tested,500,[cling] Implement value printing for std::source_location; # This Pull request:. Implements value printing for std::source_location. ## Changes or fixes:. Running `std::source_location::current()` . now shows . `(std::source_location) filename:line:function_name`. . Using `std::source_location` requires C++20: https://en.cppreference.com/w/cpp/utility/source_location. ```. root [0] std::source_location::current(). (std::source_location) ROOT_prompt_0:1:__cling_Un1Qu30. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14211 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14218
https://github.com/root-project/root/issues/14219:231,deployability,version,version,231,"[cling] Use deduction guides for llvm::ArrayRef; LLVM 16 deprecated the `makeArrayRef` function in favor of using deduction guides: https://github.com/llvm/llvm-project/commit/36117cc46388d677359f1180bd536f80d0c5fe97 A future LLVM version will likely remove them (hasn't happened yet), so we should preemptively migrate away.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14219
https://github.com/root-project/root/issues/14219:231,integrability,version,version,231,"[cling] Use deduction guides for llvm::ArrayRef; LLVM 16 deprecated the `makeArrayRef` function in favor of using deduction guides: https://github.com/llvm/llvm-project/commit/36117cc46388d677359f1180bd536f80d0c5fe97 A future LLVM version will likely remove them (hasn't happened yet), so we should preemptively migrate away.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14219
https://github.com/root-project/root/issues/14219:231,modifiability,version,version,231,"[cling] Use deduction guides for llvm::ArrayRef; LLVM 16 deprecated the `makeArrayRef` function in favor of using deduction guides: https://github.com/llvm/llvm-project/commit/36117cc46388d677359f1180bd536f80d0c5fe97 A future LLVM version will likely remove them (hasn't happened yet), so we should preemptively migrate away.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14219
https://github.com/root-project/root/issues/14219:22,usability,guid,guides,22,"[cling] Use deduction guides for llvm::ArrayRef; LLVM 16 deprecated the `makeArrayRef` function in favor of using deduction guides: https://github.com/llvm/llvm-project/commit/36117cc46388d677359f1180bd536f80d0c5fe97 A future LLVM version will likely remove them (hasn't happened yet), so we should preemptively migrate away.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14219
https://github.com/root-project/root/issues/14219:124,usability,guid,guides,124,"[cling] Use deduction guides for llvm::ArrayRef; LLVM 16 deprecated the `makeArrayRef` function in favor of using deduction guides: https://github.com/llvm/llvm-project/commit/36117cc46388d677359f1180bd536f80d0c5fe97 A future LLVM version will likely remove them (hasn't happened yet), so we should preemptively migrate away.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14219
https://github.com/root-project/root/pull/14221:264,deployability,updat,updated,264,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:156,safety,review,reviews,156,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:234,safety,test,tested,234,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:264,safety,updat,updated,264,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:264,security,updat,updated,264,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:156,testability,review,reviews,156,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:234,testability,test,tested,234,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:22,usability,guid,guides,22,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14221:140,usability,guid,guides,140,[cling] Use deduction guides for llvm::ArrayRef; # This Pull request:. Removes the usage of `llvm::makeArrayRef` in cling and use deduction guides (https://reviews.llvm.org/D140896) instead. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14219 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14221
https://github.com/root-project/root/pull/14222:338,availability,Consist,Consistently,338,"[RF] Some documentation fixes; * More functions with `R__DEPRECATED` at the end of RooWorkspace.h to not break doxygen (thanks @will-cern for noticing the problem!). * Put RooFit developer docs in `Roofitmain` doxygen group. * Don't forget namespace in `\class RooFit::Evaluator`. * The Python programming language name is capitalized. * Consistently use ""workspace"" instead of ""work space""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14222
https://github.com/root-project/root/pull/14222:10,usability,document,documentation,10,"[RF] Some documentation fixes; * More functions with `R__DEPRECATED` at the end of RooWorkspace.h to not break doxygen (thanks @will-cern for noticing the problem!). * Put RooFit developer docs in `Roofitmain` doxygen group. * Don't forget namespace in `\class RooFit::Evaluator`. * The Python programming language name is capitalized. * Consistently use ""workspace"" instead of ""work space""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14222
https://github.com/root-project/root/pull/14222:338,usability,Consist,Consistently,338,"[RF] Some documentation fixes; * More functions with `R__DEPRECATED` at the end of RooWorkspace.h to not break doxygen (thanks @will-cern for noticing the problem!). * Put RooFit developer docs in `Roofitmain` doxygen group. * Don't forget namespace in `\class RooFit::Evaluator`. * The Python programming language name is capitalized. * Consistently use ""workspace"" instead of ""work space""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14222
https://github.com/root-project/root/issues/14223:1744,availability,Operat,Operating,1744,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:177,deployability,contain,containing,177,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:477,deployability,observ,observed,477,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:566,deployability,instal,installations,566,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1029,deployability,version,version,1029,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1684,deployability,Instal,Installation,1684,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1709,deployability,build,build,1709,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1720,deployability,instal,installed,1720,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:33,energy efficiency,load,loading,33,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:291,energy efficiency,load,load,291,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:417,energy efficiency,load,loading,417,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:708,energy efficiency,Load,Load,708,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1029,integrability,version,version,1029,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1038,interoperability,Standard,Standard,1038,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1029,modifiability,version,version,1029,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:23,performance,time,time,23,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:33,performance,load,loading,33,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:283,performance,time,time,283,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:291,performance,load,load,291,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:417,performance,load,loading,417,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:451,performance,time,time,451,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:708,performance,Load,Load,708,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:906,performance,time,time,906,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:916,performance,time,time,916,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:945,performance,time,time,945,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:443,security,expir,expired,443,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1380,security,Team,Team,1380,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:477,testability,observ,observed,477,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1912,testability,context,context,1912,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:486,usability,behavi,behaviour,486,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:830,usability,help,help,830,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14223:1546,usability,help,help,1546,"Extremely long startup time when loading dictionaries with pyroot; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the presence of LD_LIBRARY_PATH containing directories with many entries (typically when using the LCG view),. it takes a very, very long time to load a dictionary using pyroot. After some initial debugging with Axel he admitted . that there is something going wrong when loading dictionaries. The expired time is way too long. The observed behaviour is not limited to the reproducer below, but also occurs on standalone installations. ### Reproducer. 1) Use a LCG view on cvmfs. ```. . /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/setup.sh. ```. 2) Load a dictionary from pyroot:. ```. $ python. Python 3.9.12 (main, Jul 31 2023, 15:05:19) . [GCC 12.1.0] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import time. >>> time.ctime(); import dd4hep; time.ctime(). 'Wed Dec 13 09:15:34 2023'. 'Wed Dec 13 09:16:27 2023'. ```. ### ROOT version. Standard root vervion of LCG 103 on cvmfs:. ```. $ which root. /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. $ /cvmfs/sft.cern.ch/lcg/views/LCG_104/x86_64-el9-gcc12-dbg/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++ (GCC) 12.1.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Pre-build, pre-installed on cvmfs. ### Operating system. Linux lxplus940.cern.ch 5.14.0-362.8.1.el9_3.x86_64 #1 SMP PREEMPT_DYNAMIC Tue Oct 3 11:12:36 EDT 2023 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14223
https://github.com/root-project/root/issues/14225:18,availability,fault,fault,18,"[RF] Segmentation fault in ROOT 6.30 workspace creation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a HistFactory setup where one of the NormFactors is constant and set to -1. During the Workspace creation (HistoToWorkspaceFactoryFast) the code crashes:. ```. --------. RooFormulaVar::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ==========================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1319,availability,ERROR,ERROR,1319,"r::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./po",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3854,availability,Operat,Operating,3854,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1780,deployability,stack,stack,1780," -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1913,deployability,stack,stack,1913,"stFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2470,deployability,Stack,StackTrace,2470,"s present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /ho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3442,deployability,Configurat,Configuration,3442,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3673,deployability,version,version,3673,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3687,deployability,Version,Version,3687,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3810,deployability,Instal,Installation,3810,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3831,deployability,build,build,3831,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:18,energy efficiency,fault,fault,18,"[RF] Segmentation fault in ROOT 6.30 workspace creation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a HistFactory setup where one of the NormFactors is constant and set to -1. During the Workspace creation (HistoToWorkspaceFactoryFast) the code crashes:. ```. --------. RooFormulaVar::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ==========================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1512,energy efficiency,Measur,Measurement,1512,"u_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_insta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1698,energy efficiency,Measur,Measurement,1698,"O:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2232,energy efficiency,optim,optimized,2232,"n. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2382,energy efficiency,optim,optimized,2382,"it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2938,energy efficiency,Measur,Measurement,2938,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3169,energy efficiency,Measur,Measurement,3169,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3376,energy efficiency,Measur,Measurement,3376,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3442,integrability,Configur,Configuration,3442,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3673,integrability,version,version,3673,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3687,integrability,Version,Version,3687,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1492,interoperability,XML,XML,1492,"NFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /ho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1506,interoperability,xml,xml,1506,"y -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3618,interoperability,XML,XML,3618,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1355,modifiability,variab,variable,1355," = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca550",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1465,modifiability,variab,variable,1465,"u_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3442,modifiability,Configur,Configuration,3442,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3673,modifiability,version,version,3673,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3687,modifiability,Version,Version,3687,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:18,performance,fault,fault,18,"[RF] Segmentation fault in ROOT 6.30 workspace creation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a HistFactory setup where one of the NormFactors is constant and set to -1. During the Workspace creation (HistoToWorkspaceFactoryFast) the code crashes:. ```. --------. RooFormulaVar::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ==========================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1319,performance,ERROR,ERROR,1319,"r::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./po",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2232,performance,optimiz,optimized,2232,"n. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2382,performance,optimiz,optimized,2382,"it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:18,reliability,fault,fault,18,"[RF] Segmentation fault in ROOT 6.30 workspace creation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a HistFactory setup where one of the NormFactors is constant and set to -1. During the Workspace creation (HistoToWorkspaceFactoryFast) the code crashes:. ```. --------. RooFormulaVar::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ==========================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:18,safety,fault,fault,18,"[RF] Segmentation fault in ROOT 6.30 workspace creation; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a HistFactory setup where one of the NormFactors is constant and set to -1. During the Workspace creation (HistoToWorkspaceFactoryFast) the code crashes:. ```. --------. RooFormulaVar::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ==========================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1319,safety,ERROR,ERROR,1319,"r::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./po",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:2659,security,sign,signal,2659,"ue"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3442,security,Configur,Configuration,3442,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1786,testability,trace,trace,1786,"V_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1919,testability,trace,trace,1919,"ory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3577,testability,simpl,simple,3577,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3901,testability,context,context,3901,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:1319,usability,ERROR,ERROR,1319,"r::b2[ actualVars=(b) formula=""b*b"" ] = 0.294849. [#2] INFO:HistFactory -- making normFactor: mu_ttbar. [#2] INFO:HistFactory -- processing hist emu_OS_2b_Mc_regBin. [#2] INFO:HistFactory -- Mc_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_stop_2b_regBin. [#2] INFO:HistFactory -- stop_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_ttV_2b_regBin. [#2] INFO:HistFactory -- ttV_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_diboson_2b_regBin. [#2] INFO:HistFactory -- diboson_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- processing hist emu_OS_2b_wjets_2b_regBin. [#2] INFO:HistFactory -- wjets_2b_emu_OS_2b has no variation histograms . [#2] INFO:HistFactory -- making normFactor: mu_Z. [#2] INFO:HistFactory -- processing hist emu_OS_2b_zjets_2b_regBin. [#2] INFO:HistFactory -- zjets_2b_emu_OS_2b has no variation histograms . [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation. ```. While the relevant variable is present in the XML file:. ```xml. <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >. <POI>mu_ttbar mu_Z b</POI>. <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>. </Measurement>. ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./po",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3577,usability,simpl,simple,3577,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/issues/14225:3657,usability,help,helps,3657,"e of all threads:. ===========================================================. #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7fffe7747e28, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so. #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so. #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&, RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration const&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so. ```. ### Reproducer. Unfortunately, I do not have a simple reproducer. But I can provide the XML files produced by the code if that helps? ### ROOT version. ROOT Version: 6.31/01. Built for linuxx8664gcc on Nov 26 2023, 09:58:47. From remotes/origin/HEAD@v6-31-01-341-gab6cdd5dda. ### Installation method. build from source. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14225
https://github.com/root-project/root/pull/14238:362,availability,error,error,362,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:627,availability,error,error,627,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:741,availability,error,error,741,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:371,deployability,observ,observed,371,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:853,deployability,updat,updated,853,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:362,performance,error,error,362,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:627,performance,error,error,627,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:741,performance,error,error,741,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:362,safety,error,error,362,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:627,safety,error,error,627,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:741,safety,error,error,741,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:823,safety,test,tested,823,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:853,safety,updat,updated,853,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:853,security,updat,updated,853,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:82,testability,regress,regression,82,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:371,testability,observ,observed,371,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:823,testability,test,tested,823,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:298,usability,tool,tools,298,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:362,usability,error,error,362,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:627,usability,error,error,627,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14238:741,usability,error,error,741,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14238
https://github.com/root-project/root/pull/14239:14,safety,safe,safety,14,[v6-30] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14239
https://github.com/root-project/root/pull/14239:56,safety,Prevent,Prevent,56,[v6-30] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14239
https://github.com/root-project/root/pull/14239:56,security,Preven,Prevent,56,[v6-30] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14239
https://github.com/root-project/root/pull/14240:14,safety,safe,safety,14,[v6-28] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14240
https://github.com/root-project/root/pull/14240:56,safety,Prevent,Prevent,56,[v6-28] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14240
https://github.com/root-project/root/pull/14240:56,security,Preven,Prevent,56,[v6-28] Add a safety check on `std::multimap::empty()`; Prevent a potential crash on Windows in Debug mode when the multimap is empty,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14240
https://github.com/root-project/root/pull/14241:85,deployability,version,version,85,"[webgui] disable rootrc parameters for web-based widgets, disable --web flag; Shrink version of #14189 . I can add generic `TROOT::PrintWebIssuseWarning()` static method if required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:85,integrability,version,version,85,"[webgui] disable rootrc parameters for web-based widgets, disable --web flag; Shrink version of #14189 . I can add generic `TROOT::PrintWebIssuseWarning()` static method if required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:24,modifiability,paramet,parameters,24,"[webgui] disable rootrc parameters for web-based widgets, disable --web flag; Shrink version of #14189 . I can add generic `TROOT::PrintWebIssuseWarning()` static method if required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:85,modifiability,version,version,85,"[webgui] disable rootrc parameters for web-based widgets, disable --web flag; Shrink version of #14189 . I can add generic `TROOT::PrintWebIssuseWarning()` static method if required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14241:49,usability,widget,widgets,49,"[webgui] disable rootrc parameters for web-based widgets, disable --web flag; Shrink version of #14189 . I can add generic `TROOT::PrintWebIssuseWarning()` static method if required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14241
https://github.com/root-project/root/pull/14242:78,deployability,Modul,Modules,78,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:143,deployability,build,building,143,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:520,deployability,Stack,Stack,520,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:590,deployability,modul,modules,590,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:338,integrability,transform,transform,338,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:338,interoperability,transform,transform,338,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:78,modifiability,Modul,Modules,78,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:590,modifiability,modul,modules,590,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:78,safety,Modul,Modules,78,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:590,safety,modul,modules,590,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:12,security,polic,policy,12,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:294,security,Polic,Policy,294,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:403,security,polic,policy,403,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:423,security,polic,policy,423,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:480,security,polic,policy,480,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:398,usability,help,help-policy,398,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14242:461,usability,command,command,461,"[cmake] Set policy CMP0116 to OLD; As done by `interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake`, but this resolves many warnings when building with `builtin_llvm=OFF` (but `builtin_clang=ON`):. ```. CMake Warning (dev) at /usr/lib64/cmake/llvm/TableGen.cmake:95 (add_custom_command):. Policy CMP0116 is not set: Ninja generators transform DEPFILEs from. add_custom_command(). Run ""cmake --help-policy CMP0116"" for policy. details. Use the cmake_policy command to set the policy and suppress this. warning. Call Stack (most recent call first):. interpreter/llvm-project/clang/cmake/modules/AddClang.cmake:25 (tablegen). interpreter/llvm-project/clang/include/clang/AST/CMakeLists.txt:73 (clang_tablegen). This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14242
https://github.com/root-project/root/pull/14243:250,deployability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,deployability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,integrability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,integrability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,interoperability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,interoperability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:373,interoperability,format,formatting,373,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,modifiability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,modifiability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,reliability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,reliability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:5,safety,Compl,Complete,5,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:131,safety,compl,completing,131,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:268,safety,test,test,268,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:302,safety,test,test,302,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:5,security,Compl,Complete,5,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:131,security,compl,completing,131,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,security,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,security,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:250,testability,integr,integral,250,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:263,testability,Unit,Unit,263,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:268,testability,test,test,268,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:297,testability,Unit,Unit,297,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:302,testability,test,test,302,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:322,testability,integr,integral,322,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/pull/14243:197,usability,Support,Support,197,"[RF] Complete `RooBifurGauss` implementation; Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral. 2. Unit test for fitting with AD. 3. Unit test for analytical integral, cross-checking with RooGaussian. 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14243
https://github.com/root-project/root/issues/14244:18,availability,operat,operators,18,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:153,availability,operat,operators,153,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:340,availability,consist,consistent,340,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:408,availability,operat,operator,408,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:530,availability,operat,operator,530,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:708,availability,Operat,Operating,708,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:642,deployability,version,version,642,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:664,deployability,Instal,Installation,664,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:685,deployability,build,build,685,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:276,energy efficiency,core,core,276,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:642,integrability,version,version,642,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:642,modifiability,version,version,642,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:757,testability,context,context,757,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/issues/14244:340,usability,consist,consistent,340,"String comparison operators defined in TString.h should be defined as constexpr; ### Explain what you would like to see improved and how. The comparison operators of `const char*` with `std::string_view` defined in [TString.h](https://github.com/root-project/root/blob/master/core/base/inc/TString.h) should be defined as `constexpr` to be consistent with the std definition. ```c++. constexpr inline Bool_t operator==(const char *s1, const std::string_view &s2). {. return std::string_view(s1) == s2;. }. constexpr inline Bool_t operator==(const std::string_view &s1, const char *s2). {. return s1 == std::string_view(s2);. }. ```. ### ROOT version. 6.30/02. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14244
https://github.com/root-project/root/pull/14245:35,availability,operat,operators,35,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:124,availability,operat,operators,124,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:150,availability,consist,consistent,150,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:207,safety,test,tested,207,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:207,testability,test,tested,207,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14245:150,usability,consist,consistent,150,Remove std::string_view comparison operators; # This Pull request:. ## Changes or fixes:. Makes std::string_view comparison operators constexpr to be consistent with the std defintions. ## Checklist:. - [x] tested changes locally. This PR fixes #14244.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14245
https://github.com/root-project/root/pull/14246:151,deployability,updat,updated,151,[cling] Enable JITLink for AArch64 and x86_64 on Linux; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14209 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:121,safety,test,tested,121,[cling] Enable JITLink for AArch64 and x86_64 on Linux; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14209 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:151,safety,updat,updated,151,[cling] Enable JITLink for AArch64 and x86_64 on Linux; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14209 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:151,security,updat,updated,151,[cling] Enable JITLink for AArch64 and x86_64 on Linux; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14209 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/pull/14246:121,testability,test,tested,121,[cling] Enable JITLink for AArch64 and x86_64 on Linux; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14209 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14246
https://github.com/root-project/root/issues/14247:261,availability,Error,Error,261,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:595,availability,Operat,Operating,595,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:43,deployability,releas,release,43,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:291,deployability,Build,Build,291,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:364,deployability,version,version,364,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:554,deployability,Instal,Installation,554,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:582,deployability,releas,release,582,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:364,integrability,version,version,364,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:364,modifiability,version,version,364,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:261,performance,Error,Error,261,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:261,safety,Error,Error,261,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:642,testability,context,context,642,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/issues/14247:261,usability,Error,Error,261,"[gui] TGSpeedo class broken in 6.30 binary release Ubu22.04; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TGSpeedo no longer works on 6.30.02, it's missing the image speedo.gif. ### Reproducer. ```. root -l. root [0] new TGSpeedo. Error in <TGSpeedo::TGSpeedo::Build>: speedo.gif not found. (TGSpeedo *) 0x556984fae6a0. ```. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary release. ### Operating system. Ubuntu 22.04. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8552. https://forum.gsi.de/index.php?t=tree&th=3483&mid=13297&rid=0&rev=&reveal=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14247
https://github.com/root-project/root/pull/14248:553,deployability,patch,patch,553,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:614,deployability,updat,updated,614,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:100,energy efficiency,current,current,100,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:292,modifiability,paramet,parameters,292,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:141,safety,valid,valid,141,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:455,safety,compl,completely,455,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:553,safety,patch,patch,553,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:584,safety,test,tested,584,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:614,safety,updat,updated,614,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:455,security,compl,completely,455,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:499,security,polic,policy,499,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:553,security,patch,patch,553,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:614,security,updat,updated,614,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14248:584,testability,test,tested,584,"[RF][HS3] Bugfix for fully constrained shapesys; # This Pull request:. ## Changes or fixes:. In the current implementation, shapesys with no valid data (all constraints constant) are written out in an invalid way, making it impossible for the reader to then instantiate the correct number of parameters. This PR fixes this by forcing the write-out of data with all-zeros for such invalid shapesys. Alternatively, one could imagine dropping these shapesys completely, but that's maybe something of a policy decision that I don't want to make in a bugfix patch :). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14248
https://github.com/root-project/root/pull/14249:447,availability,error,error,447,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:563,deployability,updat,updated,563,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:36,modifiability,paramet,parameter,36,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:183,modifiability,paramet,parameter,183,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:297,modifiability,paramet,parameter,297,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:365,modifiability,paramet,parameter,365,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:447,performance,error,error,447,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:472,reliability,doe,does,472,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:447,safety,error,error,447,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:533,safety,test,tested,533,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:563,safety,updat,updated,563,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:16,security,access,access,16,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:283,security,access,accessing,283,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:563,security,updat,updated,563,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:533,testability,test,tested,533,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:447,usability,error,error,447,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/pull/14249:488,usability,indicat,indicate,488,"[RF][HF] Do not access non-existent parameter when setting it to const in HistoToWorkspaceFactoryFast; # This Pull request:. Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:. Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14249
https://github.com/root-project/root/issues/14250:1365,availability,error,error,1365,"oot with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1506,availability,operat,operator,1506," -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2086,availability,operat,operator,2086,"fal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8635,availability,state,states,8635,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8844,availability,Operat,Operating,8844,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:7,deployability,build,build,7,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:127,deployability,build,build,127,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:275,deployability,build,build,275,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:346,deployability,build,building,346,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:404,deployability,build,build,404,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:594,deployability,Releas,Release,594,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1592,deployability,fail,failed,1592,"elease -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2973,deployability,Modul,ModuleFileExtension,2973,"d252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3033,deployability,Modul,ModuleFileExtension,3033,"::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3306,deployability,Modul,ModuleFileExtension,3306,"cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -exclude",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3366,deployability,Modul,ModuleFileExtension,3366,"e(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4069,deployability,Stack,Stack,4069," bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8547,deployability,version,version,8547,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8681,deployability,build,build,8681,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8698,deployability,patch,patches,8698,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8788,deployability,version,version,8788,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8811,deployability,Instal,Installation,8811,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2477,energy efficiency,alloc,allocator,2477,"564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2501,energy efficiency,alloc,allocator,2501,"operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2573,energy efficiency,alloc,allocator,2573,"o OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3000,energy efficiency,alloc,allocator,3000,"+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3333,energy efficiency,alloc,allocator,3333,"004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3563,energy efficiency,core,core,3563,">, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3667,energy efficiency,core,core,3667,"52:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compile",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3754,energy efficiency,core,core,3754,"t* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3928,energy efficiency,core,core,3928,"const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4125,energy efficiency,core,core,4125,"reter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4764,energy efficiency,core,core,4764,ng_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtyp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4795,energy efficiency,core,core,4795,cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4829,energy efficiency,core,core,4829,_libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4860,energy efficiency,core,core,4860,o.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4897,energy efficiency,core,core,4897,_start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4934,energy efficiency,core,core,4934,tcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:4965,energy efficiency,core,core,4965,ge1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGrad,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5002,energy efficiency,core,core,5002,eport to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5042,energy efficiency,core,core,5042,ude the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5079,energy efficiency,core,core,5079, 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5109,energy efficiency,core,core,5109,oot/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5140,energy efficiency,core,core,5140,age1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5171,energy efficiency,core,core,5171,f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObje,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5207,energy efficiency,core,core,5207,ot/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPlug,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5243,energy efficiency,core,core,5243,Path /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TPro,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5276,energy efficiency,core,core,5276,/bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5306,energy efficiency,core,core,5306,-excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5368,energy efficiency,core,core,5368,/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5398,energy efficiency,core,core,5398,eEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCt,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5460,energy efficiency,core,core,5460,insics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5491,energy efficiency,core,core,5491,ion_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirecto,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8461,energy efficiency,core,core,8461,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:331,integrability,compon,component,331,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3990,integrability,sub,submit,3990,", std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/bld_nvhpc/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include -compilerI/usr/include -I/bld6/root/bld_nvhpc/include -I/bld6/root/bld_nvhpc/ginclude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5735,integrability,Messag,MessageTypes,5735,clude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPain,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8486,integrability,Sub,Subprocess,8486,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8547,integrability,version,version,8547,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8635,integrability,state,states,8635,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8788,integrability,version,version,8788,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:331,interoperability,compon,component,331,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:5735,interoperability,Messag,MessageTypes,5735,clude -I/bld6/root/src/core/base/inc -I/bld6/root/src/core/base/v7/inc -I/bld6/root/src/core/clib/inc -I/bld6/root/src/core/clingutils/inc -I/bld6/root/src/core/clingutils/res -I/bld6/root/src/core/cont/inc -I/bld6/root/src/core/foundation/inc -I/bld6/root/src/core/foundation/v7/inc -I/bld6/root/src/core/foundation/res -I/bld6/root/src/core/gui/inc -I/bld6/root/src/core/meta/inc -I/bld6/root/src/core/rint/inc -I/bld6/root/src/core/textinput/inc -I/bld6/root/src/core/textinput/src -I/bld6/root/src/core/thread/inc -I/bld6/root/src/core/zip/inc -I/bld6/root/src/core/lzma/inc -I/bld6/root/bld_nvhpc/include -I/bld6/root/src/core/lz4/inc -I/bld6/root/src/core/zstd/inc -I/bld6/root/src/builtins/zstd -I/bld6/root/src/core/unix/inc -I/bld6/root/src/core/unix/../clib/res -I/usr/include -I/bld6/root/src/builtins/xxhash -I/bld6/root/src/builtins/lz4 ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPain,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:331,modifiability,compon,component,331,"How to build external llvm for root?; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I'm trying to build root with NVIDIA's nvc++, but there are issues (see https://github.com/root-project/root/issues/9036). So to sidestep this problem, I want to build llvm with g++ (11.4), and use that as an external component when building the rest of root with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2973,modifiability,Modul,ModuleFileExtension,2973,"d252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3033,modifiability,Modul,ModuleFileExtension,3033,"::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3306,modifiability,Modul,ModuleFileExtension,3306,"cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -exclude",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3366,modifiability,Modul,ModuleFileExtension,3366,"e(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8547,modifiability,version,version,8547,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8788,modifiability,version,version,8788,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1365,performance,error,error,1365,"oot with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1592,reliability,fail,failed,1592,"elease -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1365,safety,error,error,1365,"oot with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:2973,safety,Modul,ModuleFileExtension,2973,"d252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3033,safety,Modul,ModuleFileExtension,3033,"::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3306,safety,Modul,ModuleFileExtension,3306,"cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -exclude",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:3366,safety,Modul,ModuleFileExtension,3366,"e(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1. #11 0x00000000042ea266 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool, cling::Interpreter const*) /bld6/root/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:210:1. #12 0x00000000040e516e cling::Interpreter::Interpreter(int, char const* const*, char const*, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, void*, bool) /bld6/root/src/interpreter/cling/include/cling/Interpreter/Interpreter.h:368:1. #13 0x00000000040aa68f RootClingMain(int, char**, bool) /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:4377:1. #14 0x00000000040b4769 ROOT_rootcling_Driver /bld6/root/src/core/dictgen/src/rootcling_impl.cxx:6196:1. #15 0x0000000003efba18 main /bld6/root/src/core/rootcling_stage1/src/rootcling_stage1.cxx:46:1. #16 0x00007ffb0a4e0555 __libc_start_main (/lib64/libc.so.6+0x22555). #17 0x0000000003efb67b _start (/bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1+0x3efb67b). PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace. Stack dump:. 0. Program arguments: /bld6/root/bld_nvhpc/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /bld6/root/bld_nvhpc/lib/libCore.so -excludePath /bld6/root/src -excludePath /bld6/root/bld_nvhpc/ginclude -excludePath /bld6/root/bld_nvhpc/externals -excludePath /bld6/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8698,safety,patch,patches,8698,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1658,security,Sign,Signals,1658,"ND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOption",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1697,security,Sign,SignalHandler,1697,"DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1716,security,Sign,Signals,1716,"=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1. #10 0x00000000043257e4 cling::InvocationOptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8698,security,patch,patches,8698,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1526,testability,Assert,Assertion,1526,"LIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8513,testability,understand,understand,8513,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:8886,testability,context,context,8886,ndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h. Subprocess aborted. ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied? I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/issues/14250:1365,usability,error,error,1365,"oot with nvc++. This is my cmake to build llvm 13.0.1. ```. cmake -DCMAKE_INSTALL_PREFIX=/opt/clang/13.0.1-gcc114 -DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm. ```. then for root:. ```. cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src. ```. However this results in the following error:. ```. rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed. #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0. #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0. #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387). #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78). #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252). #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1. #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1. #9 0x0000000004324c6c cling::CompilerOptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14250
https://github.com/root-project/root/pull/14251:576,availability,ERROR,ERROR,576,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:683,availability,ERROR,ERROR,683,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:713,availability,error,error,713,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:20,deployability,contain,contains,20,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:223,deployability,contain,containers,223,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:296,deployability,contain,contains,296,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:400,deployability,updat,updated,400,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:651,deployability,version,version,651,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:516,energy efficiency,CPU,CPU,516,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:745,energy efficiency,CPU,CPU,745,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:832,energy efficiency,CPU,CPU,832,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:916,energy efficiency,CPU,CPU,916,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:651,integrability,version,version,651,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:651,modifiability,version,version,651,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:516,performance,CPU,CPU,516,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:576,performance,ERROR,ERROR,576,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:683,performance,ERROR,ERROR,683,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:713,performance,error,error,713,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:745,performance,CPU,CPU,745,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:832,performance,CPU,CPU,832,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:916,performance,CPU,CPU,916,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:368,safety,test,tested,368,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:400,safety,updat,updated,400,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:464,safety,Test,Tests,464,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:576,safety,ERROR,ERROR,576,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:683,safety,ERROR,ERROR,683,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:713,safety,error,error,713,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:137,security,ident,identify,137,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:400,security,updat,updated,400,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:207,testability,emul,emulated,207,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:337,testability,emul,emulated,337,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:368,testability,test,tested,368,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:464,testability,Test,Tests,464,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:321,usability,command,command,321,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:576,usability,ERROR,ERROR,576,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:683,usability,ERROR,ERROR,683,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14251:713,usability,error,error,713,"thisroot.sh: if exe contains qemu, use /proc/$$/comm instead; # This Pull request:. This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:. When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:. - [x] tested changes locally. - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests. Before:. ```console. (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). > source thisroot.sh. ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""! (ERROR)-(Exit Code 1)-(General error). (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21). ```. After:. ```console. (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). > source thisroot.sh. (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14251
https://github.com/root-project/root/pull/14252:48,deployability,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:152,deployability,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:48,safety,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:152,safety,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:48,security,patch,patches,48,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14252:152,security,patch,patches,152,[v630][RF] Backports of RooFit PRs to `v6-30-00-patches`: Part 8; This is a backport of some RooFit PRs that were recently merged to master to v6-30-00-patches:. - https://github.com/root-project/root/pull/13111. - https://github.com/root-project/root/pull/14176. - https://github.com/root-project/root/pull/14248. - https://github.com/root-project/root/pull/14249. - https://github.com/root-project/root/pull/14251. - https://github.com/root-project/root/pull/14257. - https://github.com/root-project/root/pull/14253. - https://github.com/root-project/root/pull/14265. * at least the first commit that is not applying to new developments after 6.30. - https://github.com/root-project/root/pull/14266. - https://github.com/root-project/root/pull/14236. Related to https://github.com/root-project/root/issues/13458. Link to the previous backport PR:. https://github.com/root-project/root/pull/14167,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14252
https://github.com/root-project/root/pull/14253:350,availability,error,error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy,350,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,deployability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,integrability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,interoperability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:104,modifiability,interm,intermediate,104,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,modifiability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:232,modifiability,paramet,parameter,232,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:350,performance,error,error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy,350,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,reliability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:191,safety,accid,accidentally,191,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:350,safety,error,error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy,350,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,security,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:117,testability,integr,integral,117,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/pull/14253:350,usability,error,error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy,350,"[RF] Fix ownership problem in `RooGenProdProj`; At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14253
https://github.com/root-project/root/issues/14254:91,availability,avail,available,91,"Flatpak; ### Feature description. Hello everyone, I would like to try to make the software available on flathub. I would like to know if I can do it and if there are any kind of considerations I should have.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:91,reliability,availab,available,91,"Flatpak; ### Feature description. Hello everyone, I would like to try to make the software available on flathub. I would like to know if I can do it and if there are any kind of considerations I should have.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:91,safety,avail,available,91,"Flatpak; ### Feature description. Hello everyone, I would like to try to make the software available on flathub. I would like to know if I can do it and if there are any kind of considerations I should have.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14254:91,security,availab,available,91,"Flatpak; ### Feature description. Hello everyone, I would like to try to make the software available on flathub. I would like to know if I can do it and if there are any kind of considerations I should have.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14254
https://github.com/root-project/root/issues/14255:1112,availability,Operat,Operating,1112," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1047,deployability,version,version,1047," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1069,deployability,Instal,Installation,1069," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1021,energy efficiency,Draw,Draw,1021,"th RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roof",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1047,integrability,version,version,1047," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:540,modifiability,Exten,ExtendPdf,540,"[RF] Asymmetry plots with RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/as",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:595,modifiability,Exten,ExtendPdf,595,"[RF] Asymmetry plots with RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/as",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1047,modifiability,version,version,1047," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1278,modifiability,variab,variables,1278," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1429,modifiability,variab,variables,1429," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1493,modifiability,variab,variable,1493," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:650,testability,SIMUL,SIMUL,650,"[RF] Asymmetry plots with RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/as",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1160,testability,context,context,1160," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14255:1246,testability,simul,simultaneous,1246," ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Unable to get he asymmetry projections using RooSimultaneous by using the argument . `Asymmetry(const [RooCategory](https://root.cern.ch/doc/master/classRooCategory.html)& c)`. ### Reproducer. This code is written by Jonas Rembser:. ```c++. void repro(). {. using namespace RooFit;. RooWorkspace ws;. ws.factory(""Gaussian::gauss_A(x_A[-10, 10], -1.0, 1.0)"");. ws.factory(""Gaussian::gauss_B(x_B[-10, 10], +1.0, 1.0)"");. ws.factory(""ExtendPdf::pdf_A(gauss_A, n_A[10000.])"");. ws.factory(""ExtendPdf::pdf_B(gauss_B, n_B[10000.])"");. ws.factory(""SIMUL::simPdf(sample[A=-1, B=+1], A=pdf_A, B=pdf_B)"");. RooRealVar &xA = *ws.var(""x_A"");. RooRealVar &xB = *ws.var(""x_B"");. RooCategory &sample = *ws.cat(""sample"");. std::unique_ptr<RooDataSet> data{ws.pdf(""simPdf"")->generate({xA, xB, sample})};. auto frame = ws.var(""x_A"")->frame();. ws.pdf(""simPdf"")->plotOn(frame, Asymmetry(sample), ProjWData(sample, *data));. frame->Draw();. }. ```. ### ROOT version. 6.28/04. ### Installation method. pre-built binary. ### Operating system. Ubuntu, 20.04. ### Additional context. **What made me open this issue?**. I have the working code for a weighted 2D simultaneous PDF. It has 2 mass variables which I fit and two separate datasets corresponding to the D0 and D0bar samples. How do I get the asymmetry of as a function of the two mass variables from the D0 and D0bar PDFs corresponding to each mass variable. I can do it for histograms using TH1::GetAsymmetry but I am not able to do it in the Roofit code. Here’s the code that I am using:. [asym_proj_forum.zip](https://github.com/root-project/root/files/13694702/asym_proj_forum.zip). The root file can be found at:. https://drive.google.com/file/d/1g9iV072zb0h3qGo4Ui5EcYxtDJkc8wNL/view?usp=sharing. I posted this issue on root forum and it was suggested that I create a github issue. One can follow the discussion [here](https://root-forum.cern.ch/t/asymmetry-plots-with-roofit/57570).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14255
https://github.com/root-project/root/issues/14256:1165,availability,Operat,Operating,1165,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:173,deployability,version,version,173,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:788,deployability,API,API,788,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:959,deployability,version,version,959,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:1121,deployability,Instal,Installation,1121,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:173,integrability,version,version,173,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:788,integrability,API,API,788,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:959,integrability,version,version,959,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:788,interoperability,API,API,788,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:173,modifiability,version,version,173,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:959,modifiability,version,version,959,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:360,reliability,doe,does,360,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:392,safety,except,exception,392,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:886,safety,Test,TestBits,886,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:920,safety,Test,TestBits,920,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:54,security,Sign,Significantly,54,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:164,security,modif,modified,164,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:252,testability,emul,emulate,252,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:886,testability,Test,TestBits,886,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:920,testability,Test,TestBits,920,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/issues/14256:1205,testability,context,context,1205,"TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title. I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```. TAxis idol, target;. target.SetTicks( idol.GetTicks() ). cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;. ```. ### ROOT version. ```. 6.26/06. Built for linuxx8664gcc on Jul 28 2022, 18:08:51. From tags/v6-26-06@v6-26-06 . With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 . ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14256
https://github.com/root-project/root/pull/14257:125,availability,operat,operator,125,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:186,deployability,updat,updated,186,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:156,safety,test,tested,156,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:186,safety,updat,updated,186,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:186,security,updat,updated,186,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:119,testability,unit,unity,119,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/pull/14257:156,testability,test,tested,156,GetTicks should be the analogous of SetTicks; # This Pull request:. ## Changes or fixes:. SetTicks(GetTicks) was not a unity operator. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14256.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14257
https://github.com/root-project/root/issues/14258:240,performance,time,times,240,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14258:632,testability,context,context,632,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14258:326,usability,help,help,326,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14258:382,usability,help,help,382,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14258:572,usability,tool,tools,572,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14258:596,usability,Progress,ProgressMeter,596,[math] Moving average/median/mode; ### Feature description. It would be great to have in ROOT's TMath or TStatistics a function to calculate the moving average and the moving median and mode of an array. Functions that were greatly used in times of COVID cases tracking. ### Alternatives considered. https://www.mathworks.com/help/matlab/ref/movmean.html. https://www.mathworks.com/help/matlab/ref/movmedian.html. https://www.boost.org/doc/libs/1_84_0/doc/html/accumulators/user_s_guide.html. https://github.com/root-project/root/blob/master/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ProgressMeter.h#L26. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14258
https://github.com/root-project/root/issues/14259:419,availability,down,down,419,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:744,availability,Operat,Operating,744,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:424,deployability,version,version,424,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:562,deployability,version,version,562,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:701,deployability,Instal,Installation,701,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:424,integrability,version,version,424,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:562,integrability,version,version,562,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:30,modifiability,variab,variable,30,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:219,modifiability,variab,variable,219,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:424,modifiability,version,version,424,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:562,modifiability,version,version,562,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:687,modifiability,pac,packages,687,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:730,modifiability,pac,packages,730,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/issues/14259:788,testability,context,context,788,"[Cling] At the prompt, change variable type and value with an innocent cast; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. if at the prompt, it is possible to change the type and value of a variable by using an innocent cast. ### Reproducer. At the root prompt:. ```. root [0] double x = 3. (double) 3.0000000. root [1] int(x). (int) 0. root [2] x. (int) 0. ```. This example is a stripped down version of [this post on the forum](https://root-forum.cern.ch/t/a-strangeness-for-init-value-for-root-prompt/57576) by `cxwx1`. ### ROOT version. MacOs 14, ROOT 6.30.02 and master (llvm 13 and 16) from sources. EL9, ROOT 6.30.02 and master (llvm 13 and 16) from packages. ### Installation method. sources/packages. ### Operating system. macos/el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14259
https://github.com/root-project/root/pull/14261:417,availability,echo,echo,417,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1014,availability,down,down,1014,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1203,availability,sli,slightly,1203,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:374,deployability,version,versions,374,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:408,deployability,log,log,408,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:534,deployability,log,log,534,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:586,deployability,log,log,586,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:618,deployability,log,log,618,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:642,deployability,log,log,642,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:681,deployability,log,log,681,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:724,deployability,log,log,724,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:747,deployability,log,log,747,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:814,deployability,log,log,814,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:865,deployability,log,log,865,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:923,deployability,build,build,923,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:943,deployability,patch,patch,943,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1368,deployability,log,log,1368,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1419,deployability,log,log,1419,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1454,deployability,patch,patch,1454,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1,energy efficiency,core,core,1,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:374,integrability,version,versions,374,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:63,interoperability,standard,standard,63,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:768,interoperability,specif,specifically,768,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1325,interoperability,specif,specifically,1325,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:374,modifiability,version,versions,374,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1298,modifiability,variab,variable,1298,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1203,reliability,sli,slightly,1203,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:408,safety,log,log,408,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:534,safety,log,log,534,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:586,safety,log,log,586,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:618,safety,log,log,618,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:642,safety,log,log,642,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:681,safety,log,log,681,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:724,safety,log,log,724,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:747,safety,log,log,747,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:814,safety,log,log,814,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:865,safety,log,log,865,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:943,safety,patch,patch,943,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1039,safety,compl,completennes,1039,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1368,safety,log,log,1368,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1419,safety,log,log,1419,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1454,safety,patch,patch,1454,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:408,security,log,log,408,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:534,security,log,log,534,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:586,security,log,log,586,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:618,security,log,log,618,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:642,security,log,log,642,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:681,security,log,log,681,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:724,security,log,log,724,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:747,security,log,log,747,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:814,security,log,log,814,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:865,security,log,log,865,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:943,security,patch,patch,943,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1039,security,compl,completennes,1039,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1368,security,log,log,1368,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1419,security,log,log,1419,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1454,security,patch,patch,1454,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:408,testability,log,log,408,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:534,testability,log,log,534,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:586,testability,log,log,586,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:618,testability,log,log,618,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:642,testability,log,log,642,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:681,testability,log,log,681,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:724,testability,log,log,724,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:747,testability,log,log,747,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:814,testability,log,log,814,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:865,testability,log,log,865,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1368,testability,log,log,1368,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14261:1419,testability,log,log,1419,"[core] Properly define TString::kNPOS data member according to standard C++; By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```. $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done. master-2023-12-18-knpos-constexpr-run.log. 2579. master-2023-12-18-knpos-out-of-class-run.log. 307. master-2023-12-18-run.log. 2577. v6-26-14-run.log. 293. v6-28-00-knpos-constexpr-run.log. 2578. v6-28-00-knpos-out-of-class-run.log. 304. v6-28-00-run.log. 2798. ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:. ```. $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. 52. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14261
https://github.com/root-project/root/pull/14262:77,deployability,updat,updates,77,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:113,deployability,updat,updates,113,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:172,deployability,updat,updates,172,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:189,deployability,updat,updates,189,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:432,deployability,contain,containing,432,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:478,deployability,updat,update,478,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:515,deployability,updat,updates,515,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:426,energy efficiency,model,model,426,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:453,integrability,transform,transform,453,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:453,interoperability,transform,transform,453,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:45,modifiability,layer,layers,45,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:77,safety,updat,updates,77,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:113,safety,updat,updates,113,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:172,safety,updat,updates,172,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:189,safety,updat,updates,189,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:261,safety,input,input,261,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:478,safety,updat,update,478,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:515,safety,updat,updates,515,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:77,security,updat,updates,77,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:113,security,updat,updates,113,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:172,security,updat,updates,172,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:189,security,updat,updates,189,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:426,security,model,model,426,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:478,security,updat,update,478,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:515,security,updat,updates,515,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:18,usability,support,support,18,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:88,usability,Support,Support,88,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:154,usability,support,support,154,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:261,usability,input,input,261,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/pull/14262:297,usability,support,support,297,"[tmva][sofie] Add support for parsing Linear layers from graph_nets and null updates; . Support now using Linear updates for edges, nodes and globals and support also null updates. When no updates are provided, the output nodes/edges/globals should be equal to input ones This PR provides now the support for this in the parsing and in the generated code. The tutorial TMVA_SOFIE_GNN_Parser.py creates as example a graph_nets model containing an output transform where the edge update is Linear and the Node/global updates is Null. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14262
https://github.com/root-project/root/issues/14263:847,availability,Operat,Operating,847,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:509,deployability,depend,dependency,509,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:624,deployability,version,version,624,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:814,deployability,Instal,Installation,814,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:405,energy efficiency,Cpu,Cpu,405,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:56,integrability,pub,publicly,56,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:312,integrability,pub,publicly,312,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:471,integrability,pub,publicly,471,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:509,integrability,depend,dependency,509,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:624,integrability,version,version,624,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:391,interoperability,Architectur,Architectures,391,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:509,modifiability,depend,dependency,509,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:624,modifiability,version,version,624,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:405,performance,Cpu,Cpu,405,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:509,safety,depend,dependency,509,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:509,testability,depend,dependency,509,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/issues/14263:894,testability,context,context,894,"[tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:. ```. grep -r gsl/ /opt/root/*. `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`. ```. So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```. ROOT v6.30/02. Built for linuxx8664gcc on Nov 27 2023, 19:50:38. From tags/v6-30-02@. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14263
https://github.com/root-project/root/pull/14264:370,availability,error,error,370,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:613,availability,error,error,613,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:727,availability,error,error,727,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:379,deployability,observ,observed,379,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:370,performance,error,error,370,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:613,performance,error,error,613,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:727,performance,error,error,727,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:370,safety,error,error,370,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:613,safety,error,error,613,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:727,safety,error,error,727,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:90,testability,regress,regression,90,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:379,testability,observ,observed,379,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:306,usability,tool,tools,306,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:370,usability,error,error,370,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:613,usability,error,error,613,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14264:727,usability,error,error,727,"[cling] interpreter/CMakeLists.txt: correct CLANG_INCLUDE_DIRS [v6.30]; This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:. In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:. interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found. #include ""clang/AST/DeclNodes.inc"". ^~~~~~~~~~~~~~~~~~~~~~~~~. 1 error generated. (cherry picked from commit 1477d3adebf27a19f3a8b85f21c27a0a5649c7ff)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14264
https://github.com/root-project/root/pull/14266:39,deployability,depend,dependency,39,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:95,deployability,depend,dependency,95,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:198,deployability,depend,dependency,198,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:241,deployability,depend,dependency,241,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:334,deployability,depend,dependency,334,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:354,energy efficiency,Heat,HeatmapAnalyzer,354,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:32,integrability,pub,public,32,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:39,integrability,depend,dependency,39,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:88,integrability,pub,public,88,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:95,integrability,depend,dependency,95,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:198,integrability,depend,dependency,198,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:241,integrability,depend,dependency,241,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:269,integrability,interfac,interface,269,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:334,integrability,depend,dependency,334,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:691,integrability,interfac,interface,691,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:720,integrability,interfac,interface,720,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:269,interoperability,interfac,interface,269,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:691,interoperability,interfac,interface,691,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:720,interoperability,interfac,interface,720,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:39,modifiability,depend,dependency,39,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:95,modifiability,depend,dependency,95,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:198,modifiability,depend,dependency,198,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:241,modifiability,depend,dependency,241,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:269,modifiability,interfac,interface,269,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:334,modifiability,depend,dependency,334,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:691,modifiability,interfac,interface,691,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:720,modifiability,interfac,interface,720,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:748,modifiability,refact,refactoring,748,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:748,performance,refactor,refactoring,748,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:5,safety,Avoid,Avoid,5,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:39,safety,depend,dependency,39,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:95,safety,depend,dependency,95,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:187,safety,avoid,avoid,187,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:198,safety,depend,dependency,198,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:241,safety,depend,dependency,241,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:334,safety,depend,dependency,334,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:575,safety,compl,completely,575,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:777,safety,avoid,avoid,777,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:575,security,compl,completely,575,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:39,testability,depend,dependency,39,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:95,testability,depend,dependency,95,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:198,testability,depend,dependency,198,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:241,testability,depend,dependency,241,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:334,testability,depend,dependency,334,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14266:228,usability,minim,minimize,228,"[RF] Avoid `nlohmann_json` as a public dependency of RooFit; Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14266
https://github.com/root-project/root/pull/14267:37,deployability,manag,manager,37,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:102,deployability,manag,manager,102,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:131,deployability,manag,manager,131,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:202,deployability,updat,update,202,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:310,deployability,manag,manager,310,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:370,deployability,updat,updated,370,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:37,energy efficiency,manag,manager,37,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:102,energy efficiency,manag,manager,102,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:131,energy efficiency,manag,manager,131,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:267,energy efficiency,Adapt,Adapt,267,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:310,energy efficiency,manag,manager,310,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:267,integrability,Adapt,Adapt,267,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:267,interoperability,Adapt,Adapt,267,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:267,modifiability,Adapt,Adapt,267,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:37,safety,manag,manager,37,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:102,safety,manag,manager,102,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:131,safety,manag,manager,131,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:202,safety,updat,update,202,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:234,safety,test,testing,234,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:310,safety,manag,manager,310,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:340,safety,test,tested,340,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:370,safety,updat,updated,370,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:202,security,updat,update,202,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:370,security,updat,updated,370,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:234,testability,test,testing,234,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:340,testability,test,tested,340,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14267:172,usability,behavi,behavior,172,[cling] Move from legacy to new pass manager; # This Pull request:. - Moves away from the legacy pass manager to the new llvm pass manager. Care is take to ensure the same behavior before and after the update. Could benefit from more testing. ## Changes or fixes:. - Adapt the existing passes for the new pass manager. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14267
https://github.com/root-project/root/pull/14271:154,availability,state,stated,154,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:208,availability,error,errors,208,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:328,deployability,updat,updated,328,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:200,energy efficiency,draw,drawing,200,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:154,integrability,state,stated,154,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:250,modifiability,exten,extend,250,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:32,performance,content,content,32,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:130,performance,content,content,130,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:208,performance,error,errors,208,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:174,safety,prevent,prevent,174,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:208,safety,error,errors,208,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:298,safety,test,tested,298,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:328,safety,updat,updated,328,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:174,security,preven,prevent,174,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:328,security,updat,updated,328,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:298,testability,test,tested,298,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:15,usability,document,document,15,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/pull/14271:208,usability,error,errors,208,"[hist,skip-ci] document max bin content for th1f,th2f,th3f; # This Pull request:. ## Changes or fixes:. Adds a reasonable max bin content (and explicitly stated) for TH1F to prevent nasty silent data drawing errors. If the solution is welcome, I can extend it for TH2 and TH3. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/6671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14271
https://github.com/root-project/root/issues/14272:1260,availability,error,error,1260," RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:2271,availability,Operat,Operating,2271,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:168,deployability,stack,stack,168,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:190,deployability,build,build,190,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:254,deployability,build,builds,254,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:288,deployability,version,version,288,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:383,deployability,instal,installation,383,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:495,deployability,version,version,495,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1476,deployability,build,build,1476,"01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1753,deployability,version,version,1753,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:2236,deployability,Instal,Installation,2236,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:277,integrability,sub,subsequent,277,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:288,integrability,version,version,288,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:495,integrability,version,version,495,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1753,integrability,version,version,1753,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:439,interoperability,platform,platform,439,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1584,interoperability,platform,platforms,1584,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:288,modifiability,version,version,288,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:495,modifiability,version,version,495,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1753,modifiability,version,version,1753,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:213,performance,perform,performed,213,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1260,performance,error,error,1260," RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1284,performance,time,timespec,1284,"version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1302,performance,time,timespec,1302," ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1328,performance,time,time,1328,"lowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1384,performance,time,timespec,1384,"llation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:311,reliability,stabil,stability,311,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1260,safety,error,error,1260," RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:771,security,Team,Team,771,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1908,security,Team,Team,1908,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:2325,testability,context,context,2325,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:213,usability,perform,performed,213,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:961,usability,help,help,961,"Including <sys/stat.h> breaks ROOT 6.30.01 compiled on Centos7 when running on RHEL8; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In our stack we have our own build of ROOT which is performed on CC7. We regularly use those builds on RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:1260,usability,error,error,1260," RHEL8 or any subsequent version, since the ABI stability always allowed us to do so (provided we override the compiler installation with one which was compiled on the runtime platform). This worked fine until v6.30.01. With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/issues/14272:2098,usability,help,help,2098,". With such a version whenever we do:. ```. #include <sys/stat.h>. ```. it breaks on lxplus8 with:. ```. [O2Physics/daily-20231219-0100-1] ~ > root. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #include <sys/stat.h>. In file included from ROOT_prompt_0:1:. In file included from /usr/include/sys/stat.h:30:. /usr/include/bits/types/struct_timespec.h:9:8: error: redefinition of 'timespec'. struct timespec. ^. /usr/include/time.h:120:8: note: previous definition is here. struct timespec. ^. ```. notice that running the same with v6.28.8 works just fine. Running a slc7 build on slc7 also works fine. Compiling the same thing with GCC also works fine, including when mixing the platforms. ### Reproducer. On lxplus8:. ```. /cvmfs/alice.cern.ch/bin/alienv enter VO_ALICE@O2Physics::daily-20231219-0100-1. root. #include <sys/stat.h>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 19 2023, 01:09:04 |. | From tags/v6-30-01-alice2@v6-25-02-6400-g526782cfe8 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. aliBuild. ### Operating system. C7 running on RHEL8. ### Additional context. This is a showstopper for ALICE to adopt ROOT 6.30.X and we will have to revert back to ROOT 6.28.8 immediately if a solution is not found by noon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14272
https://github.com/root-project/root/pull/14275:51,deployability,version,version,51,"Mention root.cern instead of root.cern.ch; Rebased version of this PR, which already got approved:. * https://github.com/root-project/root/pull/6114",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14275
https://github.com/root-project/root/pull/14275:51,integrability,version,version,51,"Mention root.cern instead of root.cern.ch; Rebased version of this PR, which already got approved:. * https://github.com/root-project/root/pull/6114",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14275
https://github.com/root-project/root/pull/14275:51,modifiability,version,version,51,"Mention root.cern instead of root.cern.ch; Rebased version of this PR, which already got approved:. * https://github.com/root-project/root/pull/6114",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14275
https://github.com/root-project/root/pull/14276:856,deployability,patch,patch,856,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:897,deployability,log,log,897,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:982,deployability,log,log,982,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1046,deployability,log,log,1046,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1131,deployability,log,log,1131,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1,energy efficiency,core,core,1,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:38,modifiability,variab,variables,38,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:53,modifiability,variab,variables,53,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:144,modifiability,variab,variables,144,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:310,modifiability,variab,variables,310,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:488,modifiability,variab,variables,488,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:187,safety,test,test,187,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:625,safety,avoid,avoided,625,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:856,safety,patch,patch,856,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:897,safety,log,log,897,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:982,safety,log,log,982,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1046,safety,log,log,1046,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1131,safety,log,log,1131,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:856,security,patch,patch,856,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:897,security,log,log,897,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:982,security,log,log,982,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1046,security,log,log,1046,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1131,security,log,log,1131,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:180,testability,simpl,simple,180,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:187,testability,test,test,187,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:897,testability,log,log,897,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:908,testability,trace,trace,908,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:982,testability,log,log,982,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1046,testability,log,log,1046,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1057,testability,trace,trace,1057,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:1131,testability,log,log,1131,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/pull/14276:180,usability,simpl,simple,180,"[core] Materialize symbols for TError variables; The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 16279. ```. After:. ```. $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'. $: grep openat log.txt | wc -l. $: 417 . ```. FYI @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14276
https://github.com/root-project/root/issues/14277:1516,availability,Operat,Operating,1516,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:242,deployability,continu,continue,242,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1449,deployability,version,version,1449,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1472,deployability,Instal,Installation,1472,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1493,deployability,build,build,1493,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:52,energy efficiency,load,loading,52,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1449,integrability,version,version,1449,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:869,modifiability,variab,variables,869,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1449,modifiability,version,version,1449,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:52,performance,load,loading,52,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:477,performance,time,time,477,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1143,safety,avoid,avoid,1143,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1295,testability,simpl,simple,1295,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1554,testability,context,context,1554,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/issues/14277:1295,usability,simpl,simple,1295,"Cling triggers a huge number of `openat` calls when loading libraries; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14277
https://github.com/root-project/root/pull/14280:86,deployability,modul,modules,86,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:40,modifiability,extens,extensions,40,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:86,modifiability,modul,modules,86,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:174,modifiability,extens,extensions,174,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:86,safety,modul,modules,86,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:135,security,Polic,Policy,135,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:222,security,polic,policy,222,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:242,security,polic,policy,242,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:299,security,polic,policy,299,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:217,usability,help,help-policy,217,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14280:280,usability,command,command,280,"[cmake] Fix warning about implicit file extensions; ```. CMake Warning (dev) at cmake/modules/RootMacros.cmake:1409 (add_executable):. Policy CMP0115 is not set: Source file extensions must be explicit. Run. ""cmake --help-policy CMP0115"" for policy details. Use the cmake_policy. command to set the policy and suppress this warning. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14280
https://github.com/root-project/root/pull/14281:42,deployability,Fail,Fails,42,"[core] Disable TClingLoadUnloadFileTests; Fails sporadically, https://github.com/root-project/root/issues/14121",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14281
https://github.com/root-project/root/pull/14281:1,energy efficiency,core,core,1,"[core] Disable TClingLoadUnloadFileTests; Fails sporadically, https://github.com/root-project/root/issues/14121",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14281
https://github.com/root-project/root/pull/14281:42,reliability,Fail,Fails,42,"[core] Disable TClingLoadUnloadFileTests; Fails sporadically, https://github.com/root-project/root/issues/14121",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14281
https://github.com/root-project/root/pull/14282:22,availability,Operat,Operators,22,"[tmva][sofie] Add new Operators for parsing GNN ONNX models; Add new operators Constant, COnstantOfShape and Split",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14282
https://github.com/root-project/root/pull/14282:69,availability,operat,operators,69,"[tmva][sofie] Add new Operators for parsing GNN ONNX models; Add new operators Constant, COnstantOfShape and Split",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14282
