id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/5450:244,deployability,instal,install,244,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:352,deployability,INSTAL,INSTALL,352,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:385,deployability,build,build,385,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:424,deployability,build,build,424,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:305,performance,Error,Error,305,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:305,safety,Error,Error,305,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5450:305,usability,Error,Error,305,"Fix directory name for correct installation of ROOT; ```-- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/roots. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/proofserv. -- Installing: /workspace/install/ROOT/HEAD/x86_64-centos7-gcc7-opt/bin/xproofd. CMake Error at cmake_install.cmake:111 (file):. file INSTALL cannot find. ""/workspace/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/include/RConfigOptions.h"":. No such file or directory. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5450
https://github.com/root-project/root/pull/5452:28,deployability,depend,dependency,28,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:265,deployability,depend,dependency,265,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:28,integrability,depend,dependency,28,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:265,integrability,depend,dependency,265,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:73,interoperability,registr,registration,73,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:182,interoperability,registr,registration,182,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:28,modifiability,depend,dependency,28,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:265,modifiability,depend,dependency,265,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:28,safety,depend,dependency,28,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:265,safety,depend,dependency,265,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:28,testability,depend,dependency,28,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5452:265,testability,depend,dependency,265,Remove a remaining MathMore dependency from roofit/roofit; - use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore). - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5452
https://github.com/root-project/root/pull/5453:98,integrability,event,eventexe,98,"Fix test for `.exe` suffix on Windows; Without this change (using the correct regex syntax), the `eventexe` executable is missing the `.exe` (mandatory) suffix on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5453
https://github.com/root-project/root/pull/5453:4,safety,test,test,4,"Fix test for `.exe` suffix on Windows; Without this change (using the correct regex syntax), the `eventexe` executable is missing the `.exe` (mandatory) suffix on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5453
https://github.com/root-project/root/pull/5453:4,testability,test,test,4,"Fix test for `.exe` suffix on Windows; Without this change (using the correct regex syntax), the `eventexe` executable is missing the `.exe` (mandatory) suffix on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5453
https://github.com/root-project/root/pull/5454:21,usability,Efficien,Efficient,21,"[NFC][Doc][RDF] Add ""Efficient analysis in Python"" section;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5454
https://github.com/root-project/root/pull/5455:46,availability,error,errors,46,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:100,availability,error,errors,100,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:438,energy efficiency,Draw,Draw,438,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:46,performance,error,errors,46,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:100,performance,error,errors,100,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:46,safety,error,errors,46,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:100,safety,error,errors,100,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:46,usability,error,errors,46,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5455:100,usability,error,errors,100,"Zmin and Zmax did not take into account the Z errors; Zmin and Zmax did not take into account the Z errors for TGrap2DErrors (X and Y axis were fine). reproducer:. ```. {. const Int_t n = 10;. Double_t x[n], y[n], z[10];. Double_t ex[n], ey[n], ez[10];. for (Int_t i=0;i<n;i++) {. x[i] = i*0.1;. y[i] = 10*sin(x[i]+0.2)-5;. z[i] = i;. ex[i] = i+1;. ey[i] = i+1;. ez[i] = i+1;. }. auto *gr2d = new TGraph2DErrors(n,x,y,z,ex,ey,ez);. gr2d->Draw(""P0 ERR"");. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5455
https://github.com/root-project/root/pull/5456:28,availability,error,error,28,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:168,availability,error,error,168,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:28,performance,error,error,28,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:168,performance,error,error,168,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:28,safety,error,error,28,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:168,safety,error,error,168,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:28,usability,error,error,28,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:168,usability,error,error,168,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5456:205,usability,behavi,behavior,205,Fix handling of data points error option for a TMultiGraph; By default the TMultiGraph was handling differently than a TGraphErrors or TGraphAsymmErrors the point data error options when fitting. Now same behavior as fitting a single TGraph is applied . This fixes ROOT-10706,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5456
https://github.com/root-project/root/pull/5459:41,deployability,build,building,41,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:133,deployability,build,build,133,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:269,deployability,build,building,269,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:247,safety,test,tests,247,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:516,safety,test,tests,516,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:247,testability,test,tests,247,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5459:516,testability,test,tests,516,"[cmake] do not use $ROOTSYS/include when building ROOT executables ; As all libraries, executabls have to use source directories for build. . In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:. * `hist2workspaceCommandLineOptionsHelp.h`. * `haddCommandLineOptionsHelp.h`. * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5459
https://github.com/root-project/root/pull/5461:73,availability,error,errors,73,Implement RemovePoint for TGraph2DErrors; RemovePoint did not remove the errors in TGraph2DErrors. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10695,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5461
https://github.com/root-project/root/pull/5461:73,performance,error,errors,73,Implement RemovePoint for TGraph2DErrors; RemovePoint did not remove the errors in TGraph2DErrors. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10695,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5461
https://github.com/root-project/root/pull/5461:73,safety,error,errors,73,Implement RemovePoint for TGraph2DErrors; RemovePoint did not remove the errors in TGraph2DErrors. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10695,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5461
https://github.com/root-project/root/pull/5461:73,usability,error,errors,73,Implement RemovePoint for TGraph2DErrors; RemovePoint did not remove the errors in TGraph2DErrors. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10695,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5461
https://github.com/root-project/root/pull/5462:41,availability,down,down,41,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:279,availability,down,down,279,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:624,availability,state,state,624,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1466,deployability,fail,failed,1466," the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4287,deployability,build,build,4287,"T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5882,deployability,continu,continue,5882,"ateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7173,deployability,build,build,7173,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1056,energy efficiency,green,greenc,1056,"ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1927,energy efficiency,green,greenc,1927,"ssInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2249,energy efficiency,green,greenc,2249,"::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::Require",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2594,energy efficiency,green,greenc,2594,"n abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2858,energy efficiency,green,greenc,2858,"b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclIns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3091,energy efficiency,green,greenc,3091,"assTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3322,energy efficiency,green,greenc,3322,"tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3696,energy efficiency,green,greenc,3696,"lateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3935,energy efficiency,green,greenc,3935,"s/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4252,energy efficiency,green,greenc,4252,"pleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-product",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4625,energy efficiency,green,greenc,4625,", TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::Req",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4971,energy efficiency,green,greenc,4971,"ce/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5236,energy efficiency,green,greenc,5236," at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5470,energy efficiency,green,greenc,5470,"intOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:70",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5723,energy efficiency,green,greenc,5723,"TemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6043,energy efficiency,green,greenc,6043,"/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/sour",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6365,energy efficiency,green,greenc,6365,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6641,energy efficiency,green,greenc,6641,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6696,energy efficiency,core,core,6696,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6841,energy efficiency,green,greenc,6841,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6896,energy efficiency,core,core,6896,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7007,energy efficiency,green,greenc,7007,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7062,energy efficiency,core,core,7062,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7166,energy efficiency,green,greenc,7166,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:135,integrability,Wrap,Wrapper,135,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:328,integrability,Wrap,Wrapper,328,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:624,integrability,state,state,624,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6589,integrability,Wrap,Wrapper,6589,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:135,interoperability,Wrapper,Wrapper,135,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:328,interoperability,Wrapper,Wrapper,328,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6589,interoperability,Wrapper,Wrapper,6589,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1466,reliability,fail,failed,1466," the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2819,reliability,Diagno,Diagnoser,2819,"nDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3064,reliability,Diagno,Diagnoser,3064,"d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5197,reliability,Diagno,Diagnoser,5197,"t (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::Loo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5443,reliability,Diagno,Diagnoser,5443,"eClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:0,safety,Avoid,Avoid,0,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:740,safety,prevent,prevent,740,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1063,safety,test,test-products,1063," Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1934,safety,test,test-products,1934,",kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2221,safety,Compl,Complain,2221,"l::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2256,safety,test,test-products,2256,"latePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteTyp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2566,safety,Compl,Complain,2566,". . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., M",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2601,safety,test,test-products,2601,"from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2865,safety,test,test-products,2865,"alSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3098,safety,test,test-products,3098,"Specialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::dec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3329,safety,test,test-products,3329,"/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3703,safety,test,test-products,3703,"iate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3942,safety,test,test-products,3942,"/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Compla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4259,safety,test,test-products,4259,"this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4597,safety,Compl,Complain,4597,"tStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4632,safety,test,test-products,4632," AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireComplet",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4943,safety,Compl,Complain,4943,"products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4978,safety,test,test-products,4978,"0.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5243,safety,test,test-products,5243,"h/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5477,safety,test,test-products,5477,"tiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5730,safety,test,test-products,5730,"tantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6050,safety,test,test-products,6050,"g/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6372,safety,test,test-products,6372,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6648,safety,test,test-products,6648,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6848,safety,test,test-products,6848,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7014,safety,test,test-products,7014,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:740,security,preven,prevent,740,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1493,security,sign,signal,1493,"ClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2221,security,Compl,Complain,2221,"l::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2566,security,Compl,Complain,2566,". . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., M",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4597,security,Compl,Complain,4597,"tStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4943,security,Compl,Complain,4943,"products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1063,testability,test,test-products,1063," Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1332,testability,Assert,Assertion,1332,"rt::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1934,testability,test,test-products,1934,",kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2256,testability,test,test-products,2256,"latePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteTyp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2601,testability,test,test-products,2601,"from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2819,testability,Diagno,Diagnoser,2819,"nDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2865,testability,test,test-products,2865,"alSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3064,testability,Diagno,Diagnoser,3064,"d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3098,testability,test,test-products,3098,"Specialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::dec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3329,testability,test,test-products,3329,"/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3703,testability,test,test-products,3703,"iate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3942,testability,test,test-products,3942,"/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Compla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4259,testability,test,test-products,4259,"this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4632,testability,test,test-products,4632," AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireComplet",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4978,testability,test,test-products,4978,"0.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5197,testability,Diagno,Diagnoser,5197,"t (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::Loo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5243,testability,test,test-products,5243,"h/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5443,testability,Diagno,Diagnoser,5443,"eClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5477,testability,test,test-products,5477,"tiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5730,testability,test,test-products,5730,"tantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6050,testability,test,test-products,6050,"g/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6372,testability,test,test-products,6372,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6648,testability,test,test-products,6648,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6848,testability,test,test-products,6848,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:7014,testability,test,test-products,7014,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:412,usability,indicat,indicates,412,"Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:1132,usability,tool,tools,1132,"Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2003,usability,tool,tools,2003,"SetClassInfo in this use case. ```. art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2325,usability,tool,tools,2325,"*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2670,usability,tool,tools,2670,"e () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:2934,usability,tool,tools,2934,"t-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/gr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3167,usability,tool,tools,3167,"c=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3398,usability,tool,tools,3398," in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:3772,usability,tool,tools,3772,"eteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4011,usability,tool,tools,4011,"quireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4350,usability,tool,tools,4350,"_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:4701,usability,tool,tools,4701,"est-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5047,usability,tool,tools,5047,"tiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5312,usability,tool,tools,5312,"20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5546,usability,tool,tools,5546,"Args=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b9",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:5799,usability,tool,tools,5799,"iateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5462:6119,usability,tool,tools,6119,"18 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in mai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5462
https://github.com/root-project/root/pull/5463:47,availability,down,down,47,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:285,availability,down,down,285,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:630,availability,state,state,630,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:141,integrability,Wrap,Wrapper,141,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:334,integrability,Wrap,Wrapper,334,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:630,integrability,state,state,630,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:141,interoperability,Wrapper,Wrapper,141,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:334,interoperability,Wrapper,Wrapper,334,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:6,safety,Avoid,Avoid,6,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:746,safety,prevent,prevent,746,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:746,security,preven,prevent,746,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5463:418,usability,indicat,indicates,418,"v620: Avoid template instantiation during tear down.; This fixes ROOT-10712. Note, that the problem appears if. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();. ```. is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling. ```. TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();. ```. works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```. InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state. fState = kForwardDeclared;. delete fIsA; fIsA = 0;. // Disable the autoloader while calling SetClassInfo, to prevent. // the library from being reloaded! {. TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);. TInterpreter::SuspendAutoParsing autoParseRaii(gCling);. gInterpreter->SetClassInfo(this,kTRUE);. }. ```. Likely disabling template instantiation inside SetClassInfo in this use case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5463
https://github.com/root-project/root/pull/5464:45,availability,slo,slots,45,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:111,availability,avail,available,111,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:121,availability,slo,slots,121,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:405,availability,slo,slots,405,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:520,availability,slo,slot,520,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:478,deployability,patch,patch,478,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:79,energy efficiency,current,currently,79,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:176,performance,time,time,176,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:458,performance,content,contents,458,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:45,reliability,slo,slots,45,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:111,reliability,availab,available,111,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:121,reliability,slo,slots,121,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:405,reliability,slo,slots,405,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:520,reliability,slo,slot,520,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:111,safety,avail,available,111,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:248,safety,safe,safely,248,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:478,safety,patch,patch,478,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:111,security,availab,available,111,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:442,security,access,accesses,442,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5464:478,security,patch,patch,478,"[IMT] Let TThreadedObject grow the number of slots as needed ; TThreadedObject currently has a fixed amount of available slots,. the number of which can be set at construction time. This makes. it impossible to use TThreadedObject inside TBB tasks safely, because. TBB can potentially swap out worker threads for different threads at. runtime, resulting in TThreadedObject counting more thread ID's than. slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,. so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5464
https://github.com/root-project/root/pull/5465:110,deployability,infrastructur,infrastructure,110,"[shutdown] TCling_UnloadMarker is called too late when there is no gROOT.; We do not need TCling_UnloadMarker infrastructure anymore. It was originally fixing a problem of Belle II, however, now it breaks their code. The reason it was necessary was that `--as-needed` linker option was used which affected the new teardown order of ROOT. This patch removes the TCling_UnloadMarker and resolves ROOT-10659.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5465
https://github.com/root-project/root/pull/5465:343,deployability,patch,patch,343,"[shutdown] TCling_UnloadMarker is called too late when there is no gROOT.; We do not need TCling_UnloadMarker infrastructure anymore. It was originally fixing a problem of Belle II, however, now it breaks their code. The reason it was necessary was that `--as-needed` linker option was used which affected the new teardown order of ROOT. This patch removes the TCling_UnloadMarker and resolves ROOT-10659.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5465
https://github.com/root-project/root/pull/5465:343,safety,patch,patch,343,"[shutdown] TCling_UnloadMarker is called too late when there is no gROOT.; We do not need TCling_UnloadMarker infrastructure anymore. It was originally fixing a problem of Belle II, however, now it breaks their code. The reason it was necessary was that `--as-needed` linker option was used which affected the new teardown order of ROOT. This patch removes the TCling_UnloadMarker and resolves ROOT-10659.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5465
https://github.com/root-project/root/pull/5465:343,security,patch,patch,343,"[shutdown] TCling_UnloadMarker is called too late when there is no gROOT.; We do not need TCling_UnloadMarker infrastructure anymore. It was originally fixing a problem of Belle II, however, now it breaks their code. The reason it was necessary was that `--as-needed` linker option was used which affected the new teardown order of ROOT. This patch removes the TCling_UnloadMarker and resolves ROOT-10659.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5465
https://github.com/root-project/root/pull/5466:553,availability,down,down,553,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:378,deployability,build,builds,378,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:412,deployability,updat,updated,412,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:448,deployability,contain,container,448,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:17,performance,memor,memory,17,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:209,safety,test,tested,209,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:259,safety,test,test,259,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:336,safety,test,tests,336,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:368,safety,sanit,sanitizer,368,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:412,safety,updat,updated,412,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:467,safety,detect,detected,467,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:487,safety,sanit,sanitizer,487,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:368,security,sanit,sanitizer,368,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:412,security,updat,updated,412,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:467,security,detect,detected,467,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:487,security,sanit,sanitizer,487,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:558,security,sign,significantly,558,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:209,testability,test,tested,209,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:259,testability,test,test,259,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:336,testability,test,tests,336,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5466:17,usability,memor,memory,17,"[RF] Fix several memory leaks in RooFit/RooStats; [ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested. Here. - Four leaks are fixed. - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.). - A container overflow detected by address sanitizer is fixed. - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5466
https://github.com/root-project/root/pull/5468:176,availability,failur,failure,176,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:94,deployability,fail,fail,94,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:176,deployability,fail,failure,176,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:184,deployability,observ,observed,184,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:176,performance,failur,failure,176,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:94,reliability,fail,fail,94,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:176,reliability,fail,failure,176,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:10,testability,assert,assert,10,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:55,testability,assert,assert,55,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5468:184,testability,observ,observed,184,"Remove an assert in TMVA/DNN that is not needed. ; The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5468
https://github.com/root-project/root/pull/5469:9,deployability,automat,automatic,9,"[RF] Fix automatic plotting range for RooAbsPdf.; When first doing a chi2 fit and later nll or vice-versa, RooFit didn't. remember the range of the last fit correctly, since it wasn't cleared. before a new fit starts. Now, it's cleared before all fits. Looking for the bug, I found two places where cleanups/improvements were in order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5469
https://github.com/root-project/root/pull/5469:122,safety,reme,remember,122,"[RF] Fix automatic plotting range for RooAbsPdf.; When first doing a chi2 fit and later nll or vice-versa, RooFit didn't. remember the range of the last fit correctly, since it wasn't cleared. before a new fit starts. Now, it's cleared before all fits. Looking for the bug, I found two places where cleanups/improvements were in order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5469
https://github.com/root-project/root/pull/5469:9,testability,automat,automatic,9,"[RF] Fix automatic plotting range for RooAbsPdf.; When first doing a chi2 fit and later nll or vice-versa, RooFit didn't. remember the range of the last fit correctly, since it wasn't cleared. before a new fit starts. Now, it's cleared before all fits. Looking for the bug, I found two places where cleanups/improvements were in order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5469
https://github.com/root-project/root/pull/5469:184,usability,clear,cleared,184,"[RF] Fix automatic plotting range for RooAbsPdf.; When first doing a chi2 fit and later nll or vice-versa, RooFit didn't. remember the range of the last fit correctly, since it wasn't cleared. before a new fit starts. Now, it's cleared before all fits. Looking for the bug, I found two places where cleanups/improvements were in order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5469
https://github.com/root-project/root/pull/5469:228,usability,clear,cleared,228,"[RF] Fix automatic plotting range for RooAbsPdf.; When first doing a chi2 fit and later nll or vice-versa, RooFit didn't. remember the range of the last fit correctly, since it wasn't cleared. before a new fit starts. Now, it's cleared before all fits. Looking for the bug, I found two places where cleanups/improvements were in order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5469
https://github.com/root-project/root/pull/5470:68,deployability,version,version,68,"[PyROOT] Remove ROOT.Numba feature for python <= 2.7.5; This python version does not allow to use exec in an inner function,. potentially classified as interpreter bug (https://bugs.python.org/issue21591).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5470
https://github.com/root-project/root/pull/5470:68,integrability,version,version,68,"[PyROOT] Remove ROOT.Numba feature for python <= 2.7.5; This python version does not allow to use exec in an inner function,. potentially classified as interpreter bug (https://bugs.python.org/issue21591).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5470
https://github.com/root-project/root/pull/5470:68,modifiability,version,version,68,"[PyROOT] Remove ROOT.Numba feature for python <= 2.7.5; This python version does not allow to use exec in an inner function,. potentially classified as interpreter bug (https://bugs.python.org/issue21591).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5470
https://github.com/root-project/root/pull/5470:76,reliability,doe,does,76,"[PyROOT] Remove ROOT.Numba feature for python <= 2.7.5; This python version does not allow to use exec in an inner function,. potentially classified as interpreter bug (https://bugs.python.org/issue21591).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5470
https://github.com/root-project/root/pull/5471:74,deployability,contain,contains,74,"[CMake][Exp PyROOT] Change name of 'd' to 'install_dir_lib'; The variable contains the path to installation_directory/lib, where the. python packages are installed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5471
https://github.com/root-project/root/pull/5471:154,deployability,instal,installed,154,"[CMake][Exp PyROOT] Change name of 'd' to 'install_dir_lib'; The variable contains the path to installation_directory/lib, where the. python packages are installed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5471
https://github.com/root-project/root/pull/5471:65,modifiability,variab,variable,65,"[CMake][Exp PyROOT] Change name of 'd' to 'install_dir_lib'; The variable contains the path to installation_directory/lib, where the. python packages are installed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5471
https://github.com/root-project/root/pull/5471:141,modifiability,pac,packages,141,"[CMake][Exp PyROOT] Change name of 'd' to 'install_dir_lib'; The variable contains the path to installation_directory/lib, where the. python packages are installed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5471
https://github.com/root-project/root/pull/5472:64,performance,memor,memory,64,"[gui] TGObject::IsEqual: argument might not be TGObject:; Fixes memory issue reported by ASAN. Thanks, Stephasan!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5472
https://github.com/root-project/root/pull/5472:64,usability,memor,memory,64,"[gui] TGObject::IsEqual: argument might not be TGObject:; Fixes memory issue reported by ASAN. Thanks, Stephasan!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5472
https://github.com/root-project/root/pull/5474:272,availability,operat,operations,272,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:122,safety,input,input,122,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:220,security,control,control,220,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:220,testability,control,control,220,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:122,usability,input,input,122,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:228,usability,cursor,cursor,228,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5474:500,usability,command,command,500,"Fix redirection (`.> blah.txt`) on Windows; Fix output redirection (`.> blah.txt`) which is curently freezing the console input on Windows. One could Enable Console Virtual Terminal Sequences (ANSI escape code) that can control cursor movement, color/font mode, and other operations when written to the output stream by adding the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag, but then it breaks the WRAP_AT_EOL_OUTPUT. With this feature, the escape sequences like `\033[39m` would work in the Windows 10 command prompt as well. This is a known issue, see https://github.com/microsoft/terminal/issues/349",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5474
https://github.com/root-project/root/pull/5476:169,availability,failur,failures,169,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:41,deployability,build,build,41,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:125,deployability,build,build,125,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:169,deployability,fail,failures,169,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:32,interoperability,specif,specific,32,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:62,modifiability,variab,variable,62,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:169,performance,failur,failures,169,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:169,reliability,fail,failures,169,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:22,safety,test,tests,22,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:185,safety,test,tests,185,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:22,testability,test,tests,22,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5476:185,testability,test,tests,185,[PyROOT] Ignore numba tests for specific build nodes; The env variable ROOTTEST_IGNORE_NUMBA is set in. rootspi/jenkins/root-build.cmake and select nodes. with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5476
https://github.com/root-project/root/pull/5477:11,reliability,Poisson,Poisson,11,"Fix TMath::Poisson in case n=0 and mu is negative; Math::Poisson It was returning by mistake exp(-mu), a very large value for n=0 and mu negative. . This is wrong, it should return a NaN. Now TMath uses ROOT::Math::poisson_pdf(n,mu) that returns a NaN . Fix to return a quiet NaN and not a signalling NaN as before . This fixes ROOT-10718",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5477
https://github.com/root-project/root/pull/5477:57,reliability,Poisson,Poisson,57,"Fix TMath::Poisson in case n=0 and mu is negative; Math::Poisson It was returning by mistake exp(-mu), a very large value for n=0 and mu negative. . This is wrong, it should return a NaN. Now TMath uses ROOT::Math::poisson_pdf(n,mu) that returns a NaN . Fix to return a quiet NaN and not a signalling NaN as before . This fixes ROOT-10718",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5477
https://github.com/root-project/root/pull/5477:290,security,sign,signalling,290,"Fix TMath::Poisson in case n=0 and mu is negative; Math::Poisson It was returning by mistake exp(-mu), a very large value for n=0 and mu negative. . This is wrong, it should return a NaN. Now TMath uses ROOT::Math::poisson_pdf(n,mu) that returns a NaN . Fix to return a quiet NaN and not a signalling NaN as before . This fixes ROOT-10718",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5477
https://github.com/root-project/root/pull/5478:187,interoperability,share,shared,187,"[CMake][Exp PyROOT] Re-introduce ROOT_LINKER_LIBRARY in JupyROOT's CM…; …akeLists.txt. This commit reverts some of the changes introduced in c9cedcc. ROOT_LINKER_LIBRARY insures that the shared library is generated with. the suffix '.so', avoiding troubles in MacOS where it would be generated. with '.dylib' otherwise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5478
https://github.com/root-project/root/pull/5478:239,safety,avoid,avoiding,239,"[CMake][Exp PyROOT] Re-introduce ROOT_LINKER_LIBRARY in JupyROOT's CM…; …akeLists.txt. This commit reverts some of the changes introduced in c9cedcc. ROOT_LINKER_LIBRARY insures that the shared library is generated with. the suffix '.so', avoiding troubles in MacOS where it would be generated. with '.dylib' otherwise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5478
https://github.com/root-project/root/pull/5479:45,usability,help,helpers,45,"[DF] Clean-up: remove unused functions, move helpers to anon namespace;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5479
https://github.com/root-project/root/pull/5480:18,deployability,releas,release,18,[NFC][PyROOT] Add release notes for the ROOT.Numba.Declare feature;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5480
https://github.com/root-project/root/pull/5484:0,deployability,updat,update,0,update Bernstein pdf;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5484
https://github.com/root-project/root/pull/5484:0,safety,updat,update,0,update Bernstein pdf;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5484
https://github.com/root-project/root/pull/5484:0,security,updat,update,0,update Bernstein pdf;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5484
https://github.com/root-project/root/pull/5485:320,deployability,depend,dependencies,320,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:1,energy efficiency,core,core,1,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:31,energy efficiency,load,loaded,31,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:58,energy efficiency,Load,Load,58,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:198,energy efficiency,load,loaded,198,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:320,integrability,depend,dependencies,320,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:105,modifiability,paramet,parameter,105,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:320,modifiability,depend,dependencies,320,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:31,performance,load,loaded,31,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:58,performance,Load,Load,58,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:198,performance,load,loaded,198,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:320,safety,depend,dependencies,320,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:320,testability,depend,dependencies,320,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5485:338,testability,regress,regression,338,"[core] In ACLiC, do not reload loaded libraries.; TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5485
https://github.com/root-project/root/pull/5486:5,deployability,depend,dependent,5,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:158,deployability,depend,dependent,158,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:0,energy efficiency,Load,Load,0,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:145,energy efficiency,load,load,145,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:246,energy efficiency,load,loaded,246,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:5,integrability,depend,dependent,5,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:130,integrability,compon,component,130,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:158,integrability,depend,dependent,158,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:130,interoperability,compon,component,130,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:5,modifiability,depend,dependent,5,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:130,modifiability,compon,component,130,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:158,modifiability,depend,dependent,158,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:0,performance,Load,Load,0,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:145,performance,load,load,145,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:246,performance,load,loaded,246,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:5,safety,depend,dependent,5,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:158,safety,depend,dependent,158,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:5,testability,depend,dependent,5,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5486:158,testability,depend,dependent,158,"Load dependent libraries as part of AutoLoading.; Since the proper creation of the TClass will require the dictionary for all its component let. load all the dependent library too. Note that even with explicit linking, the dictionary may. not be loaded as part of the 'main' library when the dictionary is a library separate from the. classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5486
https://github.com/root-project/root/pull/5487:591,availability,redund,redundant,591,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:49,deployability,patch,patch,49,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:110,deployability,contain,contained,110,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:386,deployability,patch,patch,386,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:591,deployability,redundan,redundant,591,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:601,deployability,log,logic,601,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:364,integrability,event,event,364,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:565,integrability,event,event,565,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:228,modifiability,variab,variable,228,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:479,performance,time,time,479,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:591,reliability,redundan,redundant,591,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:49,safety,patch,patch,49,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:386,safety,patch,patch,386,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:591,safety,redund,redundant,591,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:601,safety,log,logic,601,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:49,security,patch,patch,49,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:386,security,patch,patch,386,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:601,security,log,logic,601,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:157,testability,verif,verify,157,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:181,testability,understand,understand,181,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:601,testability,log,logic,601,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5487:124,usability,user,user-defined,124,"[DF] Eagerly declare jitted lambdas; Before this patch RDF would first, eagerly, declare a dummy lambda. that contained the user-defined expression to check verify the cling. could understand it; then, lazily, the actual lambda variable used. by the nodes of the computation graph was jitted, together with all. other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks. that the expression is just-in-time compilable _and_ jits precisely the. definition that will be required during the event loop. This removes. redundant logic and results in strictly less work required of the. interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5487
https://github.com/root-project/root/pull/5488:78,deployability,patch,patch,78,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:924,deployability,pipelin,pipeline,924,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:679,energy efficiency,alloc,allocated,679,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1039,energy efficiency,alloc,allocated,1039,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1242,energy efficiency,alloc,allocated,1242,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1272,energy efficiency,alloc,allocated,1272,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:141,integrability,event,event,141,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:285,integrability,compon,components,285,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:466,integrability,event,event,466,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:852,integrability,event,event,852,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:924,integrability,pipelin,pipeline,924,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:285,interoperability,compon,components,285,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:285,modifiability,compon,components,285,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:649,performance,perform,performs,649,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1197,performance,perform,perform,1197,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:78,safety,patch,patch,78,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1091,safety,detect,detect,1091,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:78,security,patch,patch,78,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:220,security,session,sessions,220,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1091,security,detect,detect,1091,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:208,usability,interact,interactive,208,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:649,usability,perform,performs,649,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5488:1197,usability,perform,perform,1197,"[DF] Fix memleaks of dataframe nodes kept alive for jitted code ; Before this patch, if a RLoopManager went out of scope before running. its event loop (a rare occurrence, but indeed possible, especially in. interactive sessions), we were leaking certain weak_ptrs and shared_ptrs. to components of the computation graph, that were meant to be used by. lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we. trigger execution of _all_ jitted code that was registered, even if. it was registered by an RLoopManager that is now out of scope. In the. latter case, the code only performs clean-up of the heap-allocated. weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case. in which RDF jitted code is registered but the application never actually. triggers any RDF event loops, in which case the code to be lazily jitted. remains in the pipeline until the end of the application, and parts of. the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5488
https://github.com/root-project/root/pull/5489:297,energy efficiency,Load,LoadTree,297,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5489:199,integrability,Event,Event,199,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5489:36,performance,cach,cache,36,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5489:297,performance,Load,LoadTree,297,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5489:517,performance,cach,cache,517,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5489:476,safety,valid,valid,476,"[TChain] Do not try to retrieve the cache of a nullptr fTree; The following sequence of calls results in c1 having a null fTree. but a non-null fFile. ```cpp. TChain* c1 = new TChain(""T"");. c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");. c2->Add(""Event2.root/T"");. c1->AddFriend(c2);. c1->LoadTree(0);. c1->RemoveFriend(c2);. delete c1;. ```. In this situation, ~TChain ended up calling TTree::GetReadCache on. a null fTree. We now check that both fFile and fTree are valid before. trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5489
https://github.com/root-project/root/pull/5490:252,deployability,version,versions,252,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5490:252,integrability,version,versions,252,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5490:108,interoperability,prox,proxies,108,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5490:131,interoperability,prox,proxy,131,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5490:290,interoperability,prox,proxy,290,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5490:252,modifiability,version,versions,252,"[RF] Revert renaming RooProxy to RooTemplateProxy.; Although RooProxy looked like a cleaner name for RooFit proxies,. renaming the proxy class creates problems with reading root 6.20 files. Reverting to the old name is easier than increasing all class versions. of classes that are using a proxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5490
https://github.com/root-project/root/pull/5491:0,safety,Avoid,Avoid,0,"Avoid precision issues; Double can be much bigger than Int32, resulting in precision issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5491
https://github.com/root-project/root/pull/5493:40,security,IsO,IsOnBoundary,40,Fix precision issues with TGeoPatternX::IsOnBoundary;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5493
https://github.com/root-project/root/pull/5495:518,deployability,modul,module,518,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:476,integrability,batch,batch,476,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:535,integrability,batch,batch,535,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:518,modifiability,modul,module,518,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:476,performance,batch,batch,476,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:535,performance,batch,batch,535,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:518,safety,modul,module,518,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:37,usability,command,command,37,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5495:150,usability,user,users,150,"[Exp PyROOT][ROOT-9447] Do not parse command line args by default; As requested by:. https://sft.its.cern.ch/jira/browse/ROOT-9447. and several other users, this PR changes the default of the argument parsing feature of PyROOT. After these changes, only when asked explicitly PyROOT will parse our arguments and pass them to its PyROOTApplication. Here we also change the way tutorials are launched, since PyROOT will no longer parse by default the ""-b"" flag that enables the batch mode. Instead, we create a launcher module to ensure batch mode when running the tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5495
https://github.com/root-project/root/pull/5496:0,deployability,Build,Build,0,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5496:164,deployability,fail,fail-on-missing,164,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5496:68,interoperability,specif,specified,68,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5496:151,modifiability,concern,concerns,151,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5496:164,reliability,fail,fail-on-missing,164,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5496:151,testability,concern,concerns,151,Build only one PyROOT if PYTHON_EXECUTABLE or Python_EXECUTABLE are specified; Other changes might be needed in SearchInstalledSoftware.cmake for what concerns the fail-on-missing part,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5496
https://github.com/root-project/root/pull/5499:96,availability,error,error-using-tcolor,96,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5499:96,performance,error,error-using-tcolor,96,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5499:0,safety,Compl,Complete,0,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5499:96,safety,error,error-using-tcolor,96,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5499:0,security,Compl,Complete,0,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5499:96,usability,error,error-using-tcolor,96,Complete TColor doc with reference to SetColorThreshold; following https://root-forum.cern.ch/t/error-using-tcolor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5499
https://github.com/root-project/root/pull/5500:84,deployability,fail,fail,84,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5500:89,deployability,configurat,configuration,89,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5500:89,integrability,configur,configuration,89,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5500:89,modifiability,configur,configuration,89,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5500:84,reliability,fail,fail,84,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5500:89,security,configur,configuration,89,[cmake] Introduce hidden pyroot[23] options:; Allows -Dfail-on-missing -Dpyroot3 to fail configuration if only pyroot2 can be built.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5500
https://github.com/root-project/root/pull/5501:169,integrability,pub,public,169,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5501:176,integrability,interfac,interface,176,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5501:33,interoperability,prox,proxy,33,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5501:99,interoperability,prox,proxy,99,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5501:176,interoperability,interfac,interface,176,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5501:176,modifiability,interfac,interface,176,"[RF] Modernise RooExtendPdf; Old proxy classes constantly require casting when the pointee of the. proxy is used. Now, the correct type is stored, and constness of the. public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5501
https://github.com/root-project/root/pull/5502:393,availability,state,states,393,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:503,availability,state,state,503,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:671,availability,state,state,671,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:848,availability,state,state,848,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1367,availability,state,state,1367," to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1552,availability,state,states,1552,"ncreased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|L",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1959,availability,operat,operator,1959,"veral. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2023,availability,state,states,2023,"ntegers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionali",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2057,availability,state,stateName,2057,"ing since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2446,availability,state,states,2446,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2599,availability,state,state,2599,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2963,availability,state,state,2963,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:3073,availability,state,states,3073,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:412,deployability,contain,contained,412,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1843,deployability,Updat,Updates,1843," state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCatego",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2307,deployability,continu,continue,2307,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:603,energy efficiency,load,loading,603,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1460,energy efficiency,load,loading,1460,"gory index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with dire",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1711,energy efficiency,reduc,reduce,1711,"instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:332,integrability,pub,public,332,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:393,integrability,state,states,393,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:503,integrability,state,state,503,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:535,integrability,batch,batch,535,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:671,integrability,state,state,671,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:848,integrability,state,state,848,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1087,integrability,interfac,interface,1087,"he first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1367,integrability,state,state,1367," to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1443,integrability,event,event,1443,"6] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1485,integrability,event,event,1485,"bly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of cate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1552,integrability,state,states,1552,"ncreased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|L",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1864,integrability,interfac,interfaces,1864,"in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1891,integrability,interfac,interfaces,1891,"ince all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2023,integrability,state,states,2023,"ntegers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionali",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2057,integrability,state,stateName,2057,"ing since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2088,integrability,interfac,interfaces,2088,"ace for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2217,integrability,interfac,interfaces,2217,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2335,integrability,interfac,interface,2335,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2446,integrability,state,states,2446,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2599,integrability,state,state,2599,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2963,integrability,state,state,2963,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:3073,integrability,state,states,3073,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:3087,integrability,sub,subcategories,3087,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:106,interoperability,specif,specifically,106,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1087,interoperability,interfac,interface,1087,"he first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1864,interoperability,interfac,interfaces,1864,"in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1891,interoperability,interfac,interfaces,1891,"ince all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2088,interoperability,interfac,interfaces,2088,"ace for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2217,interoperability,interfac,interfaces,2217,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2335,interoperability,interfac,interface,2335,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2878,interoperability,share,share,2878,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:740,modifiability,pac,packed,740,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1087,modifiability,interfac,interface,1087,"he first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1864,modifiability,interfac,interfaces,1864,"in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1891,modifiability,interfac,interfaces,1891,"ince all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2088,modifiability,interfac,interfaces,2088,"ace for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2217,modifiability,interfac,interfaces,2217,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2335,modifiability,interfac,interface,2335,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:535,performance,batch,batch,535,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:568,performance,overhead,overhead,568,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:603,performance,load,loading,603,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1460,performance,load,loading,1460,"gory index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with dire",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:48,safety,review,reviewers,48,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:520,safety,prevent,prevented,520,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1843,safety,Updat,Updates,1843," state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCatego",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2401,safety,valid,validity,2401,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2608,safety,Prevent,Prevent,2608,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2756,safety,input,input,2756,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:520,security,preven,prevented,520,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:541,security,access,access,541,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:1843,security,Updat,Updates,1843," state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCatego",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2099,security,expos,exposing,2099,"tegory classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2467,security,access,access,2467,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2585,security,access,access,2585,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2608,security,Preven,Prevent,2608,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:48,testability,review,reviewers,48,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:228,usability,user,user-facing,228,"[RF] Modernise RooFit's Category Classes; **For reviewers**:. The most important commit is the first, and specifically the files. `RooAbsCategory.h, RooCategory.h`. The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:. RooFit categories were using the class RooCatType (: public TObject). instead of an integer to represent category states. This class contained an integer and a char[256] to store a category index. and a (possibly truncated) state name. This prevented fast batch access,. and increased the overhead for data storage and data loading. From now on, categories are represented as integers. Every state can be denoted by index or name, but instead of storing. *both packed into an object* in each row of the dataset, only the index is stored, and the. mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several. parts had to be touched to convert everything to using integers. This feature. has been cooking since March, and the interface for category classes was. discussed in the PPP, but nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to def",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2147,usability,Stop,Stop,2147,"nevertheless, have a double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2301,usability,user,users,2301,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2569,usability,clear,clear,2569,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2616,usability,clear,clearing,2616,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5502:2756,usability,input,input,2756,"double look at the above-mentioned. headers. In more detail:. - Replace RooCatType by an integer. - Replace names saved in each row of dataset with RooCatType by a map in. RooAbsCategory that maps state names to numbers. This saves 64 bytes. + the size of TObject for each event, and makes loading strings in each. event unnecessary. - Provide legacy iterator for iterating through states instances of. RooCatType, which will be created on the fly. - Make RooVectorDataStore store integers instead of RooCatType instances. - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:. - Provide new interfaces for categories to work without RooCatType. - Add bracket operator and constructor arguments to define multiple. category states at once or using category[""stateName""] = 1. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen. - Stop including RooCatType when R__LESS_INCLUDES is set. - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE. - Don't create RooCatType instances, unless users continue to use. the legacy interface. - Provide functions hasIndex() and hasLabel() to check validity of. index/label. - Provide function states() with direct access to map of category names. to category numbers. - Add functions getCurrent{Index|Label} to make clear that they access. class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since. derived category classes might need to recompute their shapes if one. of their input categories change. Changes in special category classes:. - Consolidate RooMultiCategory and RooSuperCategory. These share almost. all the code, so RooSuperCategory will now use a RooMultiCategory for. state definition and retrieval. The only additional functionality for. RooSuperCategory is that it can assign states to its subcategories. - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5502
https://github.com/root-project/root/pull/5503:12,safety,detect,detection,12,"Revert ""Fix detection of Python3 on Windows""; This reverts commit bb0d9ae4b97e16473d980c093dd00abf7da72972. We have a problem in https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5503
https://github.com/root-project/root/pull/5503:12,security,detect,detection,12,"Revert ""Fix detection of Python3 on Windows""; This reverts commit bb0d9ae4b97e16473d980c093dd00abf7da72972. We have a problem in https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5503
https://github.com/root-project/root/pull/5504:10,usability,help,helper,10,[DF] Move helper functions to anonymous namespace;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5504
https://github.com/root-project/root/pull/5505:259,availability,failur,failures,259,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:5,deployability,Updat,Update,5,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:36,deployability,version,version,36,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:105,deployability,version,versions,105,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:231,deployability,build,buildid,231,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:259,deployability,fail,failures,259,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:36,integrability,version,version,36,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:105,integrability,version,versions,105,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:36,modifiability,version,version,36,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:105,modifiability,version,versions,105,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:259,performance,failur,failures,259,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:259,reliability,fail,failures,259,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:5,safety,Updat,Update,5,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:5,security,Updat,Update,5,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5505:84,usability,support,support,84,"[DF] Update Arrow datasource to the version in v6.20; The RArrowDS in v6.16 did not support recent arrow versions. This commits syncs it with v6.18, v6.20 and master. This should fix [these](http://cdash.cern.ch/viewBuildError.php?buildid=865186) compilation failures in 6.16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5505
https://github.com/root-project/root/pull/5506:5,deployability,updat,update,5,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:244,deployability,observ,observables,244,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:5,safety,updat,update,5,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:5,security,updat,update,5,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:244,testability,observ,observables,244,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:82,usability,close,closed,82,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5506:209,usability,behavi,behaviour,209,"[RF] update bernstein using std::tie for xmin and xmax; Hello developers, . I had closed the previous MR as there was some issues in rebasing. I have added the changes for the bernstein to exhibit the correct behaviour when dealing with ranged observables. Cheers,. Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5506
https://github.com/root-project/root/pull/5507:40,integrability,buffer,buffer,40,"[PyROOT][ROOT-10731] Fix getting a bool buffer from a numpy array; The converter for bool in CPyCppyy expects the type code 'b' for bool. though we get from numpy the identifier '?'. I'll also make a PR upstream, let's see whether he sees any issues with it or knows a better solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5507
https://github.com/root-project/root/pull/5507:167,security,ident,identifier,167,"[PyROOT][ROOT-10731] Fix getting a bool buffer from a numpy array; The converter for bool in CPyCppyy expects the type code 'b' for bool. though we get from numpy the identifier '?'. I'll also make a PR upstream, let's see whether he sees any issues with it or knows a better solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5507
https://github.com/root-project/root/pull/5508:13,safety,test,test,13,[TChain] Add test for ROOT-10672;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5508
https://github.com/root-project/root/pull/5508:13,testability,test,test,13,[TChain] Add test for ROOT-10672;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5508
https://github.com/root-project/root/pull/5509:18,availability,operat,operator,18,Use CMake logical operator AND;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5509
https://github.com/root-project/root/pull/5509:10,deployability,log,logical,10,Use CMake logical operator AND;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5509
https://github.com/root-project/root/pull/5509:10,safety,log,logical,10,Use CMake logical operator AND;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5509
https://github.com/root-project/root/pull/5509:10,security,log,logical,10,Use CMake logical operator AND;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5509
https://github.com/root-project/root/pull/5509:10,testability,log,logical,10,Use CMake logical operator AND;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5509
https://github.com/root-project/root/pull/5510:591,deployability,patch,patch,591,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:0,safety,Avoid,Avoid,0,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:84,safety,avoid,avoid,84,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:356,safety,compl,complete,356,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:369,safety,test,tests,369,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:454,safety,avoid,avoided,454,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:591,safety,patch,patch,591,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:356,security,compl,complete,356,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:591,security,patch,patch,591,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:369,testability,test,tests,369,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5510:380,usability,behavi,behaviour,380,"Avoid {using namespace std} in global scope of dictionary [ROOT-10661]; In order to avoid {namespace std} interfering with following include files,. when generating a dictionary file add the {using namespace std;} only after. GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}. to complete the tests, old behaviour is kept by default and the global. {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5510
https://github.com/root-project/root/pull/5511:116,deployability,build,builds,116,"Backport ""Make sure declchain is deserialized""; Backport because we have reports about affected users in 6.20 conda builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5511
https://github.com/root-project/root/pull/5511:96,usability,user,users,96,"Backport ""Make sure declchain is deserialized""; Backport because we have reports about affected users in 6.20 conda builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5511
https://github.com/root-project/root/pull/5512:54,deployability,releas,release,54,"[NFC][RDF][Doc] Mention new analysis tutorials in the release notes; I would like to mention the new analysis tutorials in the release notes (they have a great PR value). You could argue that this is not the correct place to do so, I'm not sure about this. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5512
https://github.com/root-project/root/pull/5512:127,deployability,releas,release,127,"[NFC][RDF][Doc] Mention new analysis tutorials in the release notes; I would like to mention the new analysis tutorials in the release notes (they have a great PR value). You could argue that this is not the correct place to do so, I'm not sure about this. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5512
https://github.com/root-project/root/pull/5513:77,deployability,version,version,77,"[CMake] Fix bb0d9ae; The missing changes did not allow to choose the Python3 version. (PYTHON_EXECUTABLE was ignored) and automatically switched off pyroot,. pyroot_experimental and py-tmva. Fixes what reported here: https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5513
https://github.com/root-project/root/pull/5513:122,deployability,automat,automatically,122,"[CMake] Fix bb0d9ae; The missing changes did not allow to choose the Python3 version. (PYTHON_EXECUTABLE was ignored) and automatically switched off pyroot,. pyroot_experimental and py-tmva. Fixes what reported here: https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5513
https://github.com/root-project/root/pull/5513:77,integrability,version,version,77,"[CMake] Fix bb0d9ae; The missing changes did not allow to choose the Python3 version. (PYTHON_EXECUTABLE was ignored) and automatically switched off pyroot,. pyroot_experimental and py-tmva. Fixes what reported here: https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5513
https://github.com/root-project/root/pull/5513:77,modifiability,version,version,77,"[CMake] Fix bb0d9ae; The missing changes did not allow to choose the Python3 version. (PYTHON_EXECUTABLE was ignored) and automatically switched off pyroot,. pyroot_experimental and py-tmva. Fixes what reported here: https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5513
https://github.com/root-project/root/pull/5513:122,testability,automat,automatically,122,"[CMake] Fix bb0d9ae; The missing changes did not allow to choose the Python3 version. (PYTHON_EXECUTABLE was ignored) and automatically switched off pyroot,. pyroot_experimental and py-tmva. Fixes what reported here: https://sft.its.cern.ch/jira/browse/ROOT-10725",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5513
https://github.com/root-project/root/pull/5514:100,integrability,interfac,interface,100,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:200,integrability,interfac,interface,200,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:380,integrability,interfac,interface,380,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:416,integrability,interfac,interface,416,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:100,interoperability,interfac,interface,100,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:200,interoperability,interfac,interface,200,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:380,interoperability,interfac,interface,380,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:416,interoperability,interfac,interface,416,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:100,modifiability,interfac,interface,100,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:200,modifiability,interfac,interface,200,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:380,modifiability,interfac,interface,380,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:416,modifiability,interfac,interface,416,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:252,safety,test,testing,252,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:252,testability,test,testing,252,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5514:171,usability,support,support,171,"[RF] Clean up RooFit after modernising RooFit's categories.; After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface. The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller. Here, the big cleanup happens:. - Most uses of the legacy interface are replaced with the new interface. - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5514
https://github.com/root-project/root/pull/5515:42,availability,error,error,42,[histv7] Make fFillFunc transient:; Fixes error about missing dictionary for function type.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5515
https://github.com/root-project/root/pull/5515:42,performance,error,error,42,[histv7] Make fFillFunc transient:; Fixes error about missing dictionary for function type.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5515
https://github.com/root-project/root/pull/5515:42,safety,error,error,42,[histv7] Make fFillFunc transient:; Fixes error about missing dictionary for function type.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5515
https://github.com/root-project/root/pull/5515:42,usability,error,error,42,[histv7] Make fFillFunc transient:; Fixes error about missing dictionary for function type.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5515
https://github.com/root-project/root/pull/5516:123,deployability,API,API,123,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,deployability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1019,deployability,version,version,1019,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1150,energy efficiency,measur,measure,1150,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:123,integrability,API,API,123,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,integrability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1019,integrability,version,version,1019,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1194,integrability,pub,public,1194,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:123,interoperability,API,API,123,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,interoperability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:343,interoperability,standard,standard,343,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:422,interoperability,standard,standard,422,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1053,interoperability,standard,standard,1053,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,modifiability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:1019,modifiability,version,version,1019,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,reliability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:376,reliability,doe,does,376,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:536,reliability,doe,does-not-work-in-some-cases,536,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:148,safety,compl,complex,148,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:148,security,compl,complex,148,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,security,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:236,testability,integr,integrated,236,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:385,usability,support,support,385,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5516:897,usability,user,users,897,"[DF] Deprecate RRootDS; The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: . RRootDS does not support the same set of features as ""standard"" RDF,. and this can be very surprising, see e.g. https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213. With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with. all expected features. This resolves ROOT-10596. 2. Remove MakeROOTDatFrame tutorials:. `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality. 3. Deprecate RRootDS's constructor:. users should not be constructing RRootDS directly anyway. They should. do so via `MakeRootDataFrame`, which from the next version will instead. construct a standard dataframe with no datasource. We deprecate RRootDS's constructor as an extra cautionary measure,. so we can move RRootDS out of the public namespace and into the. internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5516
https://github.com/root-project/root/pull/5517:85,safety,input,input,85,[Exp PyROOT] Make tutorials/pyroot/demo.py run also for Python3; raw_input is simply input in Python 3. suggested in https://sft.its.cern.ch/jira/browse/ROOT-10721,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5517
https://github.com/root-project/root/pull/5517:78,testability,simpl,simply,78,[Exp PyROOT] Make tutorials/pyroot/demo.py run also for Python3; raw_input is simply input in Python 3. suggested in https://sft.its.cern.ch/jira/browse/ROOT-10721,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5517
https://github.com/root-project/root/pull/5517:78,usability,simpl,simply,78,[Exp PyROOT] Make tutorials/pyroot/demo.py run also for Python3; raw_input is simply input in Python 3. suggested in https://sft.its.cern.ch/jira/browse/ROOT-10721,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5517
https://github.com/root-project/root/pull/5517:85,usability,input,input,85,[Exp PyROOT] Make tutorials/pyroot/demo.py run also for Python3; raw_input is simply input in Python 3. suggested in https://sft.its.cern.ch/jira/browse/ROOT-10721,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5517
https://github.com/root-project/root/pull/5519:129,availability,avail,available,129,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:27,deployability,build,builds,27,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:175,interoperability,architectur,architecture,175,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:267,interoperability,architectur,architectures,267,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:260,modifiability,layer,layers,260,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:129,reliability,availab,available,129,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:129,safety,avail,available,129,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:129,security,availab,available,129,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:14,usability,Learn,Learning,14,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5519:285,usability,support,supported,285,FIx TMVA Deep Learning for builds without IMT and/or BLAS + tutorials fixes; - Fix the computation in case of imt or blas is not available. . Use still TCpuMatrix class (TCpu architecture) but use TMatrix for matrix multiplication instead of BLAS\. Only dense layers architectures are supported in this case. - Fix tutorials for the no-imt case. - Use Higgs data file from root.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5519
https://github.com/root-project/root/pull/5520:24,usability,help,help,24,"Fix: option name in the help differs from actual option; @vgvassilev this is a trivial fix-up, affecting only the rootcling help printout:. just noticed that when changing the option name I forgot to change also the help line, sorry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5520
https://github.com/root-project/root/pull/5520:124,usability,help,help,124,"Fix: option name in the help differs from actual option; @vgvassilev this is a trivial fix-up, affecting only the rootcling help printout:. just noticed that when changing the option name I forgot to change also the help line, sorry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5520
https://github.com/root-project/root/pull/5520:216,usability,help,help,216,"Fix: option name in the help differs from actual option; @vgvassilev this is a trivial fix-up, affecting only the rootcling help printout:. just noticed that when changing the option name I forgot to change also the help line, sorry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5520
https://github.com/root-project/root/pull/5521:28,deployability,build,build,28,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:34,deployability,modul,modules,34,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:43,deployability,Build,Build,43,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:49,deployability,depend,dependent,49,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:59,deployability,modul,modules,59,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:106,deployability,build,build,106,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:128,deployability,modul,modules,128,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:246,deployability,modul,module,246,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:362,deployability,modul,module,362,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:369,deployability,modul,modulemap,369,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:450,deployability,depend,dependencies,450,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:499,deployability,build,build,499,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:49,integrability,depend,dependent,49,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:450,integrability,depend,dependencies,450,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:34,modifiability,modul,modules,34,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:49,modifiability,depend,dependent,49,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:59,modifiability,modul,modules,59,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:128,modifiability,modul,modules,128,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:246,modifiability,modul,module,246,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:362,modifiability,modul,module,362,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:369,modifiability,modul,modulemap,369,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:450,modifiability,depend,dependencies,450,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:287,performance,cach,cache-path,287,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:431,reliability,doe,does,431,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:512,reliability,doe,does,512,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:34,safety,modul,modules,34,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:49,safety,depend,dependent,49,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:59,safety,modul,modules,59,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:128,safety,modul,modules,128,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:246,safety,modul,module,246,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:362,safety,modul,module,362,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:369,safety,modul,modulemap,369,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:450,safety,depend,dependencies,450,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:49,testability,depend,dependent,49,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5521:450,testability,depend,dependencies,450,"[cxxmodules] Teach cling to build modules; Build dependent modules explicitly.; This would allow CMSSW to build its third party modules by calling:. ```. rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}. -fmodules -Xclang -emit-module -fmodule-name=tinyxml2. -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}. ${headers_location}/module.modulemap. ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5521
https://github.com/root-project/root/pull/5523:100,availability,Error,Error,100,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:184,deployability,build,build,184,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:106,integrability,messag,message,106,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:106,interoperability,messag,message,106,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:100,performance,Error,Error,100,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:27,safety,TEST,TEST,27,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:100,safety,Error,Error,100,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:305,safety,test,testing,305,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:27,testability,TEST,TEST,27,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:305,testability,test,testing,305,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5523:100,usability,Error,Error,100,"Gtest requires to have one TEST() invocation declared while to be reg…; …istered with gtest_main.a. Error message is not obvious: usr/bin/ld: ../../../googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function main:gtest_main.cc:(.text.startup+0x26): undefined reference to testing::InitGoogleTest(int*, char**)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5523
https://github.com/root-project/root/pull/5524:200,deployability,depend,depends,200,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:243,deployability,depend,depends,243,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:280,deployability,build,buildSummary,280,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:297,deployability,build,buildid,297,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:313,deployability,build,build,313,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:200,integrability,depend,depends,200,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:243,integrability,depend,depends,243,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:200,modifiability,depend,depends,200,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:243,modifiability,depend,depends,243,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:200,safety,depend,depends,200,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:243,safety,depend,depends,243,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:200,testability,depend,depends,200,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5524:243,testability,depend,depends,243,"[ROOT-10640] OpenGL/Glew should be working only with X11; It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5524
https://github.com/root-project/root/pull/5525:94,availability,error,error,94,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:243,availability,Error,Error,243,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:258,deployability,modul,modules,258,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:351,deployability,build,build,351,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:391,deployability,build,build,391,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:438,deployability,build,build,438,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:28,integrability,sub,subdirectory,28,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:116,integrability,configur,configuring,116,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:486,interoperability,Specif,Specify,486,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:116,modifiability,configur,configuring,116,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:258,modifiability,modul,modules,258,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:94,performance,error,error,94,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:243,performance,Error,Error,243,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:94,safety,error,error,94,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:243,safety,Error,Error,243,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:258,safety,modul,modules,258,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:116,security,configur,configuring,116,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:94,usability,error,error,94,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5525:243,usability,Error,Error,243,Remove duplicate include of subdirectory builtins/glew; This commit fixes a duplicate include error which occurs on configuring Cmake options. This happens because the directory is included again in a few lines later. @vgvassilev . ```. CMake Error at cmake/modules/SearchInstalledSoftware.cmake:538 (add_subdirectory):. The binary directory. E:/root-build/builtins/glew. is already used to build a source directory. It cannot be used to build. source directory. E:/root/builtins/glew. Specify a unique binary directory name. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5525
https://github.com/root-project/root/pull/5526:4,deployability,log,logic,4,Fix logic of enabling builtin Glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5526
https://github.com/root-project/root/pull/5526:4,safety,log,logic,4,Fix logic of enabling builtin Glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5526
https://github.com/root-project/root/pull/5526:4,security,log,logic,4,Fix logic of enabling builtin Glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5526
https://github.com/root-project/root/pull/5526:4,testability,log,logic,4,Fix logic of enabling builtin Glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5526
https://github.com/root-project/root/pull/5527:72,deployability,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.20 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5527
https://github.com/root-project/root/pull/5527:72,safety,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.20 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5527
https://github.com/root-project/root/pull/5527:72,security,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.20 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5527
https://github.com/root-project/root/pull/5528:72,deployability,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.18 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5528
https://github.com/root-project/root/pull/5528:72,safety,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.18 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5528
https://github.com/root-project/root/pull/5528:72,security,patch,patch,72,"Provide correct include dirs for dictionary (ROOT-10658), v 6.18 ; Same patch applied in master within bigger PR #5181",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5528
https://github.com/root-project/root/pull/5529:148,availability,avail,available,148,[CMake][PyROOT] Disable roofit tutorials in old PyROOT; The following tutorials need to be disabled in old PyROOT because they. use a pythonization available only in experimental:. ~~tutorials/roofit/rf501_simultaneouspdf.py~~. tutorials/roofit/rf502_wspacewrite.py. tutorials/roofit/rf504_simwstool.py. tutorials/roofit/rf509_wsinteractive.py. tutorials/roofit/rf511_wsfactory_basic.py. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10736,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5529
https://github.com/root-project/root/pull/5529:148,reliability,availab,available,148,[CMake][PyROOT] Disable roofit tutorials in old PyROOT; The following tutorials need to be disabled in old PyROOT because they. use a pythonization available only in experimental:. ~~tutorials/roofit/rf501_simultaneouspdf.py~~. tutorials/roofit/rf502_wspacewrite.py. tutorials/roofit/rf504_simwstool.py. tutorials/roofit/rf509_wsinteractive.py. tutorials/roofit/rf511_wsfactory_basic.py. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10736,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5529
https://github.com/root-project/root/pull/5529:148,safety,avail,available,148,[CMake][PyROOT] Disable roofit tutorials in old PyROOT; The following tutorials need to be disabled in old PyROOT because they. use a pythonization available only in experimental:. ~~tutorials/roofit/rf501_simultaneouspdf.py~~. tutorials/roofit/rf502_wspacewrite.py. tutorials/roofit/rf504_simwstool.py. tutorials/roofit/rf509_wsinteractive.py. tutorials/roofit/rf511_wsfactory_basic.py. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10736,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5529
https://github.com/root-project/root/pull/5529:148,security,availab,available,148,[CMake][PyROOT] Disable roofit tutorials in old PyROOT; The following tutorials need to be disabled in old PyROOT because they. use a pythonization available only in experimental:. ~~tutorials/roofit/rf501_simultaneouspdf.py~~. tutorials/roofit/rf502_wspacewrite.py. tutorials/roofit/rf504_simwstool.py. tutorials/roofit/rf509_wsinteractive.py. tutorials/roofit/rf511_wsfactory_basic.py. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10736,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5529
https://github.com/root-project/root/pull/5530:169,integrability,buffer,buffers,169,"[RF] Add capability to read ULong64_t + more into RooDataSets.; [ROOT-6882] RooFit wasn't able to attach to tree branches of various. types, but this was requested. The buffers for various types were removed from the member list of. RooAbsReal, and were instead moved into a union. Further, a. std::function has been added for running the conversion between various. members. This makes the member list cleaner, and converting things that. have been read from the tree doesn't require comparing strings anymore. Instead, a lambda is called. Further, extending to other types is now trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5530
https://github.com/root-project/root/pull/5530:339,interoperability,convers,conversion,339,"[RF] Add capability to read ULong64_t + more into RooDataSets.; [ROOT-6882] RooFit wasn't able to attach to tree branches of various. types, but this was requested. The buffers for various types were removed from the member list of. RooAbsReal, and were instead moved into a union. Further, a. std::function has been added for running the conversion between various. members. This makes the member list cleaner, and converting things that. have been read from the tree doesn't require comparing strings anymore. Instead, a lambda is called. Further, extending to other types is now trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5530
https://github.com/root-project/root/pull/5530:550,modifiability,exten,extending,550,"[RF] Add capability to read ULong64_t + more into RooDataSets.; [ROOT-6882] RooFit wasn't able to attach to tree branches of various. types, but this was requested. The buffers for various types were removed from the member list of. RooAbsReal, and were instead moved into a union. Further, a. std::function has been added for running the conversion between various. members. This makes the member list cleaner, and converting things that. have been read from the tree doesn't require comparing strings anymore. Instead, a lambda is called. Further, extending to other types is now trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5530
https://github.com/root-project/root/pull/5530:469,reliability,doe,doesn,469,"[RF] Add capability to read ULong64_t + more into RooDataSets.; [ROOT-6882] RooFit wasn't able to attach to tree branches of various. types, but this was requested. The buffers for various types were removed from the member list of. RooAbsReal, and were instead moved into a union. Further, a. std::function has been added for running the conversion between various. members. This makes the member list cleaner, and converting things that. have been read from the tree doesn't require comparing strings anymore. Instead, a lambda is called. Further, extending to other types is now trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5530
https://github.com/root-project/root/pull/5531:22,safety,test,test,22,[TreeProcMT] Only run test w/ remote file reads if xrootd is ON; This fixes ROOT-10733.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5531
https://github.com/root-project/root/pull/5531:22,testability,test,test,22,[TreeProcMT] Only run test w/ remote file reads if xrootd is ON; This fixes ROOT-10733.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5531
https://github.com/root-project/root/pull/5532:1,deployability,Build,Build,1,[Build system] Add script to load envvars to CTestCustom.cmake; This is connected to the `rootspi` PR here https://github.com/root-project/rootspi/pull/76,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5532
https://github.com/root-project/root/pull/5532:29,energy efficiency,load,load,29,[Build system] Add script to load envvars to CTestCustom.cmake; This is connected to the `rootspi` PR here https://github.com/root-project/rootspi/pull/76,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5532
https://github.com/root-project/root/pull/5532:29,performance,load,load,29,[Build system] Add script to load envvars to CTestCustom.cmake; This is connected to the `rootspi` PR here https://github.com/root-project/rootspi/pull/76,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5532
https://github.com/root-project/root/pull/5534:174,deployability,updat,update,174,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:307,energy efficiency,load,loaded,307,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:307,performance,load,loaded,307,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:174,safety,updat,update,174,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:174,security,updat,update,174,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:30,testability,assert,assert,30,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:265,testability,assert,assert,265,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5534:351,testability,assert,assertSparseSelection,351,"[cling] Fix clang::CodeGen EH assert on MacOS:; Force deserialization also for unevaluated ESTs. Deserializing the decl chain (as part of the linkage spec calculation). will update the EST between Start and End EH emission, causing an. asymmetry and triggering the assert. This forces the decl chain to be. loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5534
https://github.com/root-project/root/pull/5535:0,energy efficiency,Reduc,Reduce,0,Reduce/improve includes usage in ROOT header files; Replace includes by forward declarations were class definitions not required. In places where includes may be required by user code keep it under `R__LESS_INCLUDES` definition. RooFit changes extracted into #5542 - there was need for rebase after recent changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5535
https://github.com/root-project/root/pull/5535:174,usability,user,user,174,Reduce/improve includes usage in ROOT header files; Replace includes by forward declarations were class definitions not required. In places where includes may be required by user code keep it under `R__LESS_INCLUDES` definition. RooFit changes extracted into #5542 - there was need for rebase after recent changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5535
https://github.com/root-project/root/pull/5536:79,interoperability,prox,proxies,79,"[RF] Fix warning when opening files with <v6.20 RooFit objects.; When RooFit's proxies were made more type safe, a typedef was introduced. to make the most type-general proxy equivalent to RooFit's previous. ""RooRealProxy"". This ensures backward compatibility. However, the typedef and not the actual template instantiation has to be. mentioned in LinkDef.h. Otherwise, users will get a warning when reading. files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536
https://github.com/root-project/root/pull/5536:169,interoperability,prox,proxy,169,"[RF] Fix warning when opening files with <v6.20 RooFit objects.; When RooFit's proxies were made more type safe, a typedef was introduced. to make the most type-general proxy equivalent to RooFit's previous. ""RooRealProxy"". This ensures backward compatibility. However, the typedef and not the actual template instantiation has to be. mentioned in LinkDef.h. Otherwise, users will get a warning when reading. files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536
https://github.com/root-project/root/pull/5536:246,interoperability,compatib,compatibility,246,"[RF] Fix warning when opening files with <v6.20 RooFit objects.; When RooFit's proxies were made more type safe, a typedef was introduced. to make the most type-general proxy equivalent to RooFit's previous. ""RooRealProxy"". This ensures backward compatibility. However, the typedef and not the actual template instantiation has to be. mentioned in LinkDef.h. Otherwise, users will get a warning when reading. files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536
https://github.com/root-project/root/pull/5536:107,safety,safe,safe,107,"[RF] Fix warning when opening files with <v6.20 RooFit objects.; When RooFit's proxies were made more type safe, a typedef was introduced. to make the most type-general proxy equivalent to RooFit's previous. ""RooRealProxy"". This ensures backward compatibility. However, the typedef and not the actual template instantiation has to be. mentioned in LinkDef.h. Otherwise, users will get a warning when reading. files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536
https://github.com/root-project/root/pull/5536:370,usability,user,users,370,"[RF] Fix warning when opening files with <v6.20 RooFit objects.; When RooFit's proxies were made more type safe, a typedef was introduced. to make the most type-general proxy equivalent to RooFit's previous. ""RooRealProxy"". This ensures backward compatibility. However, the typedef and not the actual template instantiation has to be. mentioned in LinkDef.h. Otherwise, users will get a warning when reading. files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5536
https://github.com/root-project/root/pull/5539:0,deployability,Updat,Update,0,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:128,deployability,modul,module,128,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:128,modifiability,modul,module,128,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:0,safety,Updat,Update,0,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:128,safety,modul,module,128,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:0,security,Updat,Update,0,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:29,usability,document,documentation,29,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:135,usability,document,documentation,135,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5539:279,usability,document,documentation,279,"Update the TMatrix reference documentation. Fix ROOT-10726; Add a new page (doc/Matrix.md) describing TMatrix combining the Web module documentation with the pre-existing ones. Reference the new matrix page from the TMatrix,TMatrixTBase, TMatrixTSym and TVectorT reference class documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5539
https://github.com/root-project/root/pull/5540:0,energy efficiency,Optim,Optimize,0,Optimize includes in roofit; Extraction from #5535 to resolve conflicts in roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5540
https://github.com/root-project/root/pull/5540:62,interoperability,conflict,conflicts,62,Optimize includes in roofit; Extraction from #5535 to resolve conflicts in roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5540
https://github.com/root-project/root/pull/5540:0,performance,Optimiz,Optimize,0,Optimize includes in roofit; Extraction from #5535 to resolve conflicts in roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5540
https://github.com/root-project/root/pull/5541:12,deployability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:28,deployability,patch,patch,28,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:75,deployability,patch,patch,75,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:128,deployability,patch,patch,128,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:193,deployability,patch,patches,193,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:529,deployability,updat,updated,529,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:627,deployability,patch,patches,627,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,integrability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,interoperability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,modifiability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,reliability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:28,safety,patch,patch,28,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:75,safety,patch,patch,75,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:128,safety,patch,patch,128,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:193,safety,patch,patches,193,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:529,safety,updat,updated,529,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:627,safety,patch,patches,627,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,security,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:28,security,patch,patch,28,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:75,security,patch,patch,75,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:95,security,access,accessing,95,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:128,security,patch,patch,128,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:193,security,patch,patches,193,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:451,security,ident,identify,451,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:529,security,updat,updated,529,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:627,security,patch,patches,627,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5541:12,testability,Integr,Integrate,12,"[Metacling] Integrate cppyy patch for lambdas; This is a port of the cppyy patch which enables accessing lambdas in PyROOT. The patch: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/lambda.diff. Reproducer:. ```python. import cppyy. cppyy.cppdef(""auto l = []{cout << 100 << endl;};""). cppyy.gbl.l(). ```. Related Jira issue: https://sft.its.cern.ch/jira/browse/ROOT-7704. The PR is for now mainly meant as a proof of concept and to identify the missing feature in ROOT meta to get this working. Edit:. Here an updated link to the diff:. https://bitbucket.org/wlav/cppyy-backend/src/clingwrapper-1.12.0/cling/patches/lambda.diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5541
https://github.com/root-project/root/pull/5542:0,energy efficiency,Optim,Optimize,0,Optimize roofit includes.; Amended to not revert the changes to be added in PR #5514. This should replace #5540,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5542
https://github.com/root-project/root/pull/5542:0,performance,Optimiz,Optimize,0,Optimize roofit includes.; Amended to not revert the changes to be added in PR #5514. This should replace #5540,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5542
https://github.com/root-project/root/pull/5543:19,deployability,upgrad,upgrades,19,"[RF] Documentation upgrades in RooFit.; Given that functions were moved to a different location in the headers to group them for doxygen, this needs a CI run.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5543
https://github.com/root-project/root/pull/5543:19,modifiability,upgrad,upgrades,19,"[RF] Documentation upgrades in RooFit.; Given that functions were moved to a different location in the headers to group them for doxygen, this needs a CI run.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5543
https://github.com/root-project/root/pull/5543:5,usability,Document,Documentation,5,"[RF] Documentation upgrades in RooFit.; Given that functions were moved to a different location in the headers to group them for doxygen, this needs a CI run.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5543
https://github.com/root-project/root/pull/5544:76,deployability,patch,patch,76,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:550,deployability,log,logic,550,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:442,energy efficiency,alloc,allocation,442,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:840,integrability,Filter,Filter,840,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:679,reliability,doe,does,679,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:76,safety,patch,patch,76,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:550,safety,log,logic,550,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:76,security,patch,patch,76,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:120,security,access,access,120,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:550,security,log,logic,550,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:696,security,access,access,696,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:1201,security,access,access,1201,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:550,testability,log,logic,550,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:757,usability,minim,minimal,757,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5544:1091,usability,custom,custom,1091,"[DF] Fix use after delete of RLoopManager in RCustomColumnBase; Before this patch, RCustomColumnBase's destructor could access. RLoopManager after deletion in some cases, e.g. when jitting code after. the computation graph was already out of scope or when the RLoopManager. was kept alive only by another node's shared_ptr to it. I think we never. saw a crash due to this bug because the use is _right after_ deletion,. and there is never an allocation between deletion and use. Valgrind. still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager. and RCustomColumns can actually be removed, and in particular. RCustomColumnBase's destructor does not need to access RLoopManager. anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp. auto f = ROOT::RDataFrame(1).Filter([] { return true; });. ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to. the previous node), which triggers destruction of RLoopManager. Later,. RFilterBase is destructed, which triggers destruction of its registered. custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_"". columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5544
https://github.com/root-project/root/pull/5545:12,deployability,Updat,Update,12,[DOCS][NFC] Update v6.22 release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5545
https://github.com/root-project/root/pull/5545:25,deployability,releas,release,25,[DOCS][NFC] Update v6.22 release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5545
https://github.com/root-project/root/pull/5545:12,safety,Updat,Update,12,[DOCS][NFC] Update v6.22 release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5545
https://github.com/root-project/root/pull/5545:12,security,Updat,Update,12,[DOCS][NFC] Update v6.22 release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5545
https://github.com/root-project/root/pull/5547:209,reliability,doe,doesn,209,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5547:499,safety,compl,completely,499,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5547:511,safety,safe,safe,511,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5547:499,security,compl,completely,499,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5547:90,testability,simpl,simplified,90,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5547:90,usability,simpl,simplified,90,"Re-enable switch to C-locale when searching for C++ includes (ROOT-10751); Commit df0b689 simplified the search for the C++ include directories and. tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German. the string in the output is not. ```. #include <...> search starts here:. ```. but the word order is switched and we have. ```. Suche für »#include <...>« beginnt hier:. ```. As such I propose to go back to C-locale for this query to be completely. safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5547
https://github.com/root-project/root/pull/5548:183,deployability,depend,depends,183,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:226,deployability,depend,depending,226,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:292,deployability,unload,unloaded,292,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:569,deployability,stack,stack,569,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:160,energy efficiency,load,loading,160,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:200,energy efficiency,load,load,200,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:213,energy efficiency,load,load,213,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:183,integrability,depend,depends,183,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:226,integrability,depend,depending,226,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:183,modifiability,depend,depends,183,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:226,modifiability,depend,depending,226,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:160,performance,load,loading,160,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:200,performance,load,load,200,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:213,performance,load,load,213,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:395,reliability,doe,doesn,395,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:183,safety,depend,depends,183,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:226,safety,depend,depending,226,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:547,safety,test,tests,547,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:183,testability,depend,depends,183,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:226,testability,depend,depending,226,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5548:547,testability,test,tests,547,"Remove TCling_UnloadMarker (ROOT-10659); In the Belle2 Software the libraries are linked with `--as-needed`. linker arguments and in conjunction with the weird loading order (binary. depends on ROOT, load python, load library depending on ROOT) we seem to. run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal. doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove. this again and it so far all tests on our software stack didn't show any. problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5548
https://github.com/root-project/root/pull/5549:802,energy efficiency,current,current,802,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:224,performance,time,time,224,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:298,performance,content,content,298,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:680,reliability,doe,doesn,680,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:193,safety,valid,valid,193,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:267,security,checksum,checksum,267,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:282,security,checksum,checksum,282,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:397,security,checksum,checksum,397,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:481,security,checksum,checksum,481,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:586,security,checksum,checksum,586,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5549:780,usability,minim,minimal,780,"Allow to set the name in reproducible TFile; Rationale. ---------. We create a number of small root files to serve as conditions data. The. algorithm tells the framework to save the data to be valid for a given interval of. time. To de-duplicate files we use the md5 checksum: same checksum, same. content, so no new file needed. Technically we create the file as a. temporary file, calculate the checksum and use a directory structure. similar to git objects: if no file with the checksum as name exists,. rename, otherwise just use the existing name. For this to work we need the md5 checksum independent of the name of the. TFile. And since we rename the file anyway it really doesn't matter what. TFile thinks its name is. Implementation. --------------. This tries to be the minimal change to the current feature of. reproducible files (thanks again): We piggyback on the same flag but if. the flag also has a value instead of jut being present we use it as the. name to put in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5549
https://github.com/root-project/root/pull/5550:172,deployability,patch,patching,172,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5550:172,safety,patch,patching,172,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5550:62,security,polic,policy,62,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5550:172,security,patch,patching,172,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5550:287,testability,simpl,simple,287,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5550:287,usability,simpl,simple,287,Add Belle2 style to the list of styles; I'm not sure what the policy here is with inclusion of these styles and I didn't see another way to include a style in ROOT without patching at least one file. So feel free to decline this PR. If there's a different way to do this (in rootrc or a simple config file in some style directory) I would be happy to hear that,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5550
https://github.com/root-project/root/pull/5551:297,deployability,manag,managed,297,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:448,deployability,version,versioned,448,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:469,deployability,depend,dependent,469,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:297,energy efficiency,manag,managed,297,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:0,integrability,Sub,Substitute,0,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:448,integrability,version,versioned,448,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:469,integrability,depend,dependent,469,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:530,integrability,Interfac,Interface,530,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:530,interoperability,Interfac,Interface,530,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:448,modifiability,version,versioned,448,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:469,modifiability,depend,dependent,469,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:530,modifiability,Interfac,Interface,530,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:297,safety,manag,managed,297,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:469,safety,depend,dependent,469,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5551:469,testability,depend,dependent,469,"Substitute deprecated tbb::task_scheduler_init with tbb::task_arena; replace all uses of the deprecated tbb_task_scheduler_init and its. implicit task_arena by explicit manipulation of our own central. instance of task_arena, as suggested by intel:. https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. work out some gymnastics to keep tbb out of the headers. We can't. forward-declare tbb::task_arena as it is an alias of a versioned. namespace dependent class (right now tbb::interface7::tbb_task_arena). Interface details to discuss: Should we add an ExecuteIsolated and an Execute call to TPoolManager?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5551
https://github.com/root-project/root/pull/5552:785,availability,operat,operation,785,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1318,availability,operat,operation,1318,"the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more infor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1427,availability,operat,operations,1427," such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are pass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1479,availability,operat,operations,1479,"The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RActio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2656,availability,avail,available,2656," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2728,availability,operat,operations,2728," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:508,deployability,API,API,508,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1956,deployability,contain,contained,1956," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:86,energy efficiency,current,currently,86,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1694,energy efficiency,current,currently,1694," how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2631,energy efficiency,Current,Currently,2631," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:508,integrability,API,API,508,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:270,interoperability,distribut,distributed,270,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:488,interoperability,standard,standard,488,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:508,interoperability,API,API,508,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1128,interoperability,standard,standard,1128," partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2283,interoperability,specif,specific,2283," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:639,modifiability,portab,portable,639,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1596,modifiability,paramet,parameters,1596,"inted to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their corr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1773,modifiability,paramet,parameters,1773," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1826,performance,perform,perform,1826," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2656,reliability,availab,available,2656," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:897,safety,input,input,897,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2646,safety,test,tests,2646," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2656,safety,avail,available,2656," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2656,security,availab,available,2656," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2646,testability,test,tests,2646," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:897,usability,input,input,897,"[ROOT-9869] RMergeableValue: store RDF results and know how to merge them; RDataFrame currently has internal mechanisms to merge the partial results coming from different thread executions when running with IMT. There is no possibility though to merge such results in a distributed environment, where the various chunks of the dataset are processed separately on different machines. In this PR I propose a possible implementation of such feature, given the following requirements:. * The standard RDataFrame API should not be altered, i.e. first and foremost there should be no changes in the types pointed to by RResultPtr. * To be truly portable, the result of the RDataFrame execution should know how to merge itself with another result of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1812,usability,user,user,1812," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1826,usability,perform,perform,1826," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:1988,usability,help,helpers,1988," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5552:2196,usability,help,helpers,2196," of the same type and the result of the merge operation should still know how to merge again. To this end, a new function called `GetMergeableValue` takes as input an RResultPtr<T> , e.g. the last action node of the graph, and returns an `RMergeableValue<T>*`, a new class that satisfies the previous requirements. The choice of creating a new class instead of, for example, returning the standard return value plus a function to merge two values of that type, has to do with the second requirement above. In fact, while this could be feasible with the return value of a `Count` operation (the merge function would just be the sum of the two count values), it would not be enough for all operations. Notably, to merge results of two `Mean` operations we would need also the counts of each mean to merge them as a weighted mean, so the function would take 4 parameters of which at most 2 are known beforehand (the mean and the counts of the action that is currently being examined by the GetMergeableValue function), while the other 2 parameters wouldn't be known until the user tries to perform the Merge on the two values. RMergeableValue is created after the execution of the computation graph from the information contained in the various action helpers in ""tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx"". RMergeableValue itself is a base class, with RMergeableGenericAction as the derived class that is mostly used to get the right information from the helpers, e.g. the value of the action and a function to merge two of those values. For specific actions that require more information, e.g. `Mean`, more derived classes can be created, e.g. `RMergeableMean`. The class instances are passed as void* up the call chain: ActionHelper-->RAction-->RActionBase-->ROOT::Detail::RDF::GetMergeableValue(). In the function they are `static_cast`ed back to their correct RMergeableValue<T>* type. Currently, two tests are available to show the usage of this feature with the `Count` and `Mean` operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5552
https://github.com/root-project/root/pull/5553:215,deployability,Updat,Update,215,Fix Multiclass classification for TMVA Deep Learning ; Before the fix it was alsways used an output width by default equal to 1. Now the default output width of the last dense layer is set to the number of classes. Update multiclass tutorial to use MethodDL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5553
https://github.com/root-project/root/pull/5553:176,modifiability,layer,layer,176,Fix Multiclass classification for TMVA Deep Learning ; Before the fix it was alsways used an output width by default equal to 1. Now the default output width of the last dense layer is set to the number of classes. Update multiclass tutorial to use MethodDL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5553
https://github.com/root-project/root/pull/5553:215,safety,Updat,Update,215,Fix Multiclass classification for TMVA Deep Learning ; Before the fix it was alsways used an output width by default equal to 1. Now the default output width of the last dense layer is set to the number of classes. Update multiclass tutorial to use MethodDL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5553
https://github.com/root-project/root/pull/5553:215,security,Updat,Update,215,Fix Multiclass classification for TMVA Deep Learning ; Before the fix it was alsways used an output width by default equal to 1. Now the default output width of the last dense layer is set to the number of classes. Update multiclass tutorial to use MethodDL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5553
https://github.com/root-project/root/pull/5553:44,usability,Learn,Learning,44,Fix Multiclass classification for TMVA Deep Learning ; Before the fix it was alsways used an output width by default equal to 1. Now the default output width of the last dense layer is set to the number of classes. Update multiclass tutorial to use MethodDL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5553
https://github.com/root-project/root/pull/5554:61,availability,error,errors,61,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:232,availability,error,error,232,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:131,deployability,build,build,131,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:184,deployability,build,build,184,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:249,interoperability,convers,conversion,249,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:61,performance,error,errors,61,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:232,performance,error,error,232,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:61,safety,error,errors,61,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:232,safety,error,error,232,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:61,usability,error,errors,61,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:232,usability,error,error,232,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5554:567,usability,Custom,CustomColExtraArgs,567,"[DF] More working around cling+shared_ptr issues; Should fix errors such as those at https://bit.ly/2W6cZoc :. ```. /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/default/V/master/build/include/ROOT/RDF/RInterface.hxx:2363:25:. error: no viable conversion from. 'shared_ptr<ROOT::Detail::RDF::RCustomColumn<ROOT::VecOps::RVec<ROOT::VecOps::RVec<unsigned. long> > (*)(const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<float> &, const. ROOT::VecOps::RVec<float> &, const ROOT::VecOps::RVec<int> &),. ROOT::Detail::RDF::CustomColExtraArgs::None>>' to 'const. shared_ptr<RDFDetail::RCustomColumnBase>'. newCols.AddColumn(newColumn, name);. ^~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5554
https://github.com/root-project/root/pull/5555:29,deployability,releas,release,29,[RF] Improve doxygen and add release notes.; - Add R__SUGGEST_ALTERNATIVE to macros ignored by doxygen. - Improve doxygen of RooFit. - Add section about categories to RooFit release notes. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5555
https://github.com/root-project/root/pull/5555:174,deployability,releas,release,174,[RF] Improve doxygen and add release notes.; - Add R__SUGGEST_ALTERNATIVE to macros ignored by doxygen. - Improve doxygen of RooFit. - Add section about categories to RooFit release notes. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5555
https://github.com/root-project/root/pull/5558:89,security,sign,signatures,89,[DF] Remove code that's now unused and other now useless calls; ...and simplify function signatures accordingly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5558
https://github.com/root-project/root/pull/5558:71,testability,simpl,simplify,71,[DF] Remove code that's now unused and other now useless calls; ...and simplify function signatures accordingly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5558
https://github.com/root-project/root/pull/5558:71,usability,simpl,simplify,71,[DF] Remove code that's now unused and other now useless calls; ...and simplify function signatures accordingly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5558
https://github.com/root-project/root/pull/5563:33,integrability,filter,filter,33,[cling] Check if we have a bloom filter.; This fixes an assert in isBloomFilterEmpty which assumes the bloom filter is already built. This is a fix for PR #4717.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5563
https://github.com/root-project/root/pull/5563:109,integrability,filter,filter,109,[cling] Check if we have a bloom filter.; This fixes an assert in isBloomFilterEmpty which assumes the bloom filter is already built. This is a fix for PR #4717.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5563
https://github.com/root-project/root/pull/5563:56,testability,assert,assert,56,[cling] Check if we have a bloom filter.; This fixes an assert in isBloomFilterEmpty which assumes the bloom filter is already built. This is a fix for PR #4717.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5563
https://github.com/root-project/root/pull/5564:54,performance,memor,memory,54,"[RF] Backport #5466 to 6.20; Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5564
https://github.com/root-project/root/pull/5564:106,safety,test,test,106,"[RF] Backport #5466 to 6.20; Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5564
https://github.com/root-project/root/pull/5564:106,testability,test,test,106,"[RF] Backport #5466 to 6.20; Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5564
https://github.com/root-project/root/pull/5564:54,usability,memor,memory,54,"[RF] Backport #5466 to 6.20; Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5564
https://github.com/root-project/root/pull/5565:144,deployability,contain,contain,144,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:179,energy efficiency,current,current,179,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:760,integrability,batch,batch,760,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:760,performance,batch,batch,760,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:152,safety,compl,complete,152,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:152,security,compl,complete,152,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5565:677,usability,user,user,677,"Zoom range handling in RFrame; Many improvements to let process individual zooming range on each client. 1. Provide `RDisplayContext` class. It contain complete information about current canvas, pad, index, connection id. This information provided to `RDrawable::Display()` method and let create individual output for each client. 2. Same `RDisplayContext` used in `RDrawableRequest` when processing requests from client. Such request used to provide zooming range and RFrame can store individual range settings for each client. For main client such settings stored also in RFrame attributes and will be persistent. 3. In `RStatBox::Display()` request such individual selected user range and provide statistic relative to that range. Allows to use RStatBox in batch mode. 4. Latest JSROOT with many bugfixes and improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5565
https://github.com/root-project/root/pull/5566:121,deployability,automat,automatically,121,"[RF] Enable overriding the default plotting range after a fit.; [ROOT-10737] When plotting a PDF after a fit, the PDF is automatically. plotted only in the fit range. Although this is ususally desired,. overriding the plot and normalisation range should be possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5566
https://github.com/root-project/root/pull/5566:121,testability,automat,automatically,121,"[RF] Enable overriding the default plotting range after a fit.; [ROOT-10737] When plotting a PDF after a fit, the PDF is automatically. plotted only in the fit range. Although this is ususally desired,. overriding the plot and normalisation range should be possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5566
https://github.com/root-project/root/pull/5567:153,availability,operat,operations,153,"[ipython] disable key handling in JSROOT; While iPython notebook web page typically has scrolling and edit area,. keyboard events are used for different operations. Therefore JSROOT should. not process there events for zooming or camera moving in 3D. Will have an effect after merging of #5565, where latest JSROOT with correspondent feature is provided. Solves problem, reported [on the forum](https://root-forum.cern.ch/t/39201)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5567
https://github.com/root-project/root/pull/5567:123,integrability,event,events,123,"[ipython] disable key handling in JSROOT; While iPython notebook web page typically has scrolling and edit area,. keyboard events are used for different operations. Therefore JSROOT should. not process there events for zooming or camera moving in 3D. Will have an effect after merging of #5565, where latest JSROOT with correspondent feature is provided. Solves problem, reported [on the forum](https://root-forum.cern.ch/t/39201)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5567
https://github.com/root-project/root/pull/5567:208,integrability,event,events,208,"[ipython] disable key handling in JSROOT; While iPython notebook web page typically has scrolling and edit area,. keyboard events are used for different operations. Therefore JSROOT should. not process there events for zooming or camera moving in 3D. Will have an effect after merging of #5565, where latest JSROOT with correspondent feature is provided. Solves problem, reported [on the forum](https://root-forum.cern.ch/t/39201)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5567
https://github.com/root-project/root/pull/5569:7,testability,assert,asserts,7,Adjust asserts.; This is part of root-project/root#4717,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5569
https://github.com/root-project/root/pull/5570:494,deployability,build,build,494,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:154,modifiability,variab,variable,154,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:269,modifiability,variab,variable,269,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:407,modifiability,variab,variable,407,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:392,performance,content,content,392,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:20,security,Hardcod,Hardcode,20,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5570:78,usability,command,command,78,"[CMake][Exp PyROOT] Hardcode PYTHON_EXECUTABLE in python scripts shebang; The command. get_filename_component(python ${PYTHON_EXECUTABLE} NAME). sets the variable ""python"" to e.g. ""python3.6"" if the value of. PYTHON_EXECUTABLE is ""/usr/bin/python3.6"". The value of the variable ""python"" ends up in all the shebangs of the. python scripts (rootls, rootmkdir, ecc.). With this approach, if the content of the variable ""python"" is a. symlink to a python interpreter different from the one used to build. ROOT, we see a crash everytime a python script with a shebang is called. Reported here: https://sft.its.cern.ch/jira/browse/ROOT-10720",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5570
https://github.com/root-project/root/pull/5572:11,testability,assert,asserts,11,"[cmake] If asserts are on, enable them also for llvm.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5572
https://github.com/root-project/root/pull/5573:8,testability,simpl,simplify,8,"[cmake] simplify include dirs handling in ROOT_GENERATE_DICTIONARY; Keep list with plain directories names, . only for rootcling executable provide list with prefixed -I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5573
https://github.com/root-project/root/pull/5573:8,usability,simpl,simplify,8,"[cmake] simplify include dirs handling in ROOT_GENERATE_DICTIONARY; Keep list with plain directories names, . only for rootcling executable provide list with prefixed -I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5573
https://github.com/root-project/root/pull/5574:65,integrability,filter,filter,65,[cling] Even when library has no symbols to offer initialize the filter.; This is part of root-project/root#4717,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5574
https://github.com/root-project/root/pull/5575:28,energy efficiency,current,current,28,[doc] The issues in section current limitations are resolved.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5575
https://github.com/root-project/root/pull/5576:8,deployability,modul,modules,8,Improve modules docs. Add readme entry.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5576
https://github.com/root-project/root/pull/5576:8,modifiability,modul,modules,8,Improve modules docs. Add readme entry.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5576
https://github.com/root-project/root/pull/5576:8,safety,modul,modules,8,Improve modules docs. Add readme entry.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5576
https://github.com/root-project/root/pull/5577:144,deployability,depend,dependencies,144,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:169,deployability,instal,installed,169,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:237,energy efficiency,Reduc,Reduce,237,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:144,integrability,depend,dependencies,144,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:144,modifiability,depend,dependencies,144,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:310,modifiability,variab,variables,310,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:530,modifiability,variab,variables,530,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:60,safety,test,tests,60,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:144,safety,depend,dependencies,144,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:465,safety,test,test,465,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:291,security,misus,misused,291,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:60,testability,test,tests,60,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:144,testability,depend,dependencies,144,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5577:465,testability,test,test,465,"[cmake] remove unnecessary include_directories in most ROOT tests; When using source bilds, all necessary source includes. will be provided via dependencies. When using installed root,. anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. . If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`. Now only kept at the place where it can be really used outside ROOT. Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5577
https://github.com/root-project/root/pull/5579:58,deployability,build,build,58,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:80,deployability,version,version,80,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:499,deployability,version,versions,499,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:568,deployability,build,build,568,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:584,deployability,version,version,584,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:80,integrability,version,version,80,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:499,integrability,version,versions,499,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:584,integrability,version,version,584,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:185,interoperability,specif,specified,185,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:424,interoperability,mismatch,mismatch,424,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:80,modifiability,version,version,80,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:302,modifiability,pac,package,302,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:446,modifiability,variab,variables,446,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:499,modifiability,version,versions,499,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:584,modifiability,version,version,584,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:514,safety,avoid,avoid,514,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5579:150,usability,behavi,behavior,150,"[CMake][Exp PyROOT] Use find_package(PythonX) also in the build with one Python version; find_package(Python) seems to have the following unsexpected behavior:. if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and. DEVELOPMENT is required but not found, then CMake looks for the. development package of python2. If it succeeds, Python_INCLUDE_DIRS and. Python_LIBRARIES are set as a consequently. This brings to a mismatch. between the variables set, since they refer to different python. versions. . To avoid this, we use find_package(PythonX) also for the build with one. version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5579
https://github.com/root-project/root/pull/5580:89,deployability,contain,contained,89,"[TTreeReader] Make ESetupStatus values non-ambiguous; TTreeReaderValueBase::ESetupStatus contained two enumerators with value -7. and two with value 0. In both cases, one of the ambiguous enumerators was. actually unused, and it was changed to have an unambiguous value. Also add docs for `IsValid` and `GetSetupStatus`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5580
https://github.com/root-project/root/pull/5581:0,safety,Compl,Complete,0,Complete BELLE II Style; Complete BELLE II Style,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5581
https://github.com/root-project/root/pull/5581:25,safety,Compl,Complete,25,Complete BELLE II Style; Complete BELLE II Style,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5581
https://github.com/root-project/root/pull/5581:0,security,Compl,Complete,0,Complete BELLE II Style; Complete BELLE II Style,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5581
https://github.com/root-project/root/pull/5581:25,security,Compl,Complete,25,Complete BELLE II Style; Complete BELLE II Style,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5581
https://github.com/root-project/root/pull/5582:514,deployability,manag,managed,514,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:765,deployability,version,versioned,765,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:785,deployability,depend,dependent,785,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:139,energy efficiency,current,current,139,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:514,energy efficiency,manag,managed,514,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:192,integrability,messag,message,192,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:609,integrability,encapsulat,encapsulating,609,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:765,integrability,version,versioned,765,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:785,integrability,depend,dependent,785,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:192,interoperability,messag,message,192,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:609,modifiability,encapsul,encapsulating,609,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:765,modifiability,version,versioned,765,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:785,modifiability,depend,dependent,785,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:123,reliability,doe,does,123,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:514,safety,manag,managed,514,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:785,safety,depend,dependent,785,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:785,testability,depend,dependent,785,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5582:155,usability,behavi,behaviour,155,"Replace deprecated tbb::task_cheduler_init for tbb::task_arena; Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper. > . > Replace all uses of TPoolManager, based on the deprecated. > tbb_task_scheduler_init and its implicit task_arena, by explicit. > manipulation of our own central instance of task_arena, as. > suggested by intel:. > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf. > . > Work out some gymnastics to keep tbb out of the headers,. > encapsulating it within the new RTaskArenaWrapper class. Couldn't. > find a solution for the forward-declaration tbb::task_arena, which. > is an alias of a versioned namespace dependent class that we are. > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5582
https://github.com/root-project/root/pull/5583:0,deployability,Instal,Installation,0,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5583:103,integrability,pub,public,103,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5583:110,integrability,interfac,interfaces,110,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5583:38,interoperability,compatib,compatibility,38,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5583:110,interoperability,interfac,interfaces,110,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5583:110,modifiability,interfac,interfaces,110,"Installation of GLEW target (backward compatibility); Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5583
https://github.com/root-project/root/pull/5584:14,deployability,infrastructur,infrastructure,14,Testing cmake infrastructure;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5584
https://github.com/root-project/root/pull/5584:0,safety,Test,Testing,0,Testing cmake infrastructure;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5584
https://github.com/root-project/root/pull/5584:0,testability,Test,Testing,0,Testing cmake infrastructure;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5584
https://github.com/root-project/root/pull/5585:187,availability,failur,failure,187,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:356,availability,servic,services,356,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:728,availability,error,error,728,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:877,availability,error,error,877,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1021,availability,Error,Error,1021,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1093,availability,Error,Error,1093,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:187,deployability,fail,failure,187,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:356,deployability,servic,services,356,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:408,deployability,build,build,408,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:594,deployability,Build,Building,594,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:779,deployability,build,build,779,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:813,deployability,build,build,813,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:819,deployability,build,build,819,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:356,integrability,servic,services,356,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:12,modifiability,variab,variable,12,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:74,modifiability,variab,variable,74,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:123,modifiability,variab,variable,123,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:279,modifiability,variab,variable,279,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:356,modifiability,servic,services,356,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:187,performance,failur,failure,187,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:728,performance,error,error,728,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:877,performance,error,error,877,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1021,performance,Error,Error,1021,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1093,performance,Error,Error,1093,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:187,reliability,fail,failure,187,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:259,safety,avoid,avoid,259,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:420,safety,test,testReport,420,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:728,safety,error,error,728,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:877,safety,error,error,877,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:887,safety,input,input,887,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1021,safety,Error,Error,1021,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1093,safety,Error,Error,1093,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:108,security,ident,identical,108,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:420,testability,test,testReport,420,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:62,usability,Command,Command,62,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:728,usability,error,error,728,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:764,usability,User,Users,764,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:877,usability,error,error,877,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:887,usability,input,input,887,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1021,usability,Error,Error,1021,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5585:1093,usability,Error,Error,1093,"[cmake] set variable in parent scope at very end of function; Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:. ```. Generating tclass_methods.cxx, tclass_methods.rootmap. Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o. clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'. clang: error: no input files. make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1. make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5585
https://github.com/root-project/root/pull/5586:216,availability,error,errors,216,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:32,deployability,modul,modulemap,32,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:70,deployability,continu,continues,70,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:122,deployability,modul,modulemap,122,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:173,deployability,modul,modulemaps,173,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:146,energy efficiency,load,loaded,146,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:32,modifiability,modul,modulemap,32,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:122,modifiability,modul,modulemap,122,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:173,modifiability,modul,modulemaps,173,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:146,performance,load,loaded,146,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:216,performance,error,errors,216,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:32,safety,modul,modulemap,32,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:122,safety,modul,modulemap,122,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:173,safety,modul,modulemaps,173,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:216,safety,error,errors,216,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5586:216,usability,error,errors,216,[winxxmodules] Create vcruntime.modulemap for use in Windows; This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5586
https://github.com/root-project/root/pull/5587:37,modifiability,inherit,inheritance,37,"[cppyy] Port upstream changes to fix inheritance in Python; * Fixing inheritance of C++ classes in Python and callbacks to C++ with. object created in Python. * See upstream issue https://bitbucket.org/wlav/cppyy/issues/229/issue-with-python-class-that-derives-from. * Ports following commits of cppyy-backend: 4670bcf0d82d2f1650f739115576a884f51340f6. * Ports following commits of CPyCppyy:. 9d0eca19281a0f38c9cd80628279f1c76f5fe71c,. 398347bd01b693d0f4e7d2c6cef5c9d30adba2b5, 96de8a868b214eeb4be0f4be4914224ba7de6805",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5587
https://github.com/root-project/root/pull/5587:69,modifiability,inherit,inheritance,69,"[cppyy] Port upstream changes to fix inheritance in Python; * Fixing inheritance of C++ classes in Python and callbacks to C++ with. object created in Python. * See upstream issue https://bitbucket.org/wlav/cppyy/issues/229/issue-with-python-class-that-derives-from. * Ports following commits of cppyy-backend: 4670bcf0d82d2f1650f739115576a884f51340f6. * Ports following commits of CPyCppyy:. 9d0eca19281a0f38c9cd80628279f1c76f5fe71c,. 398347bd01b693d0f4e7d2c6cef5c9d30adba2b5, 96de8a868b214eeb4be0f4be4914224ba7de6805",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5587
https://github.com/root-project/root/pull/5588:178,modifiability,variab,variable,178,"[RF] Fix crash in RooAbsAnaConvPdf.; RooAbsAnaConvPdf was carrying around a RooArgSet, which was. not used anywhere. This RooArgSet, however, was carrying around a. pointer to a variable, which becomes a dangling pointer when one creates. copies of the RooAbsAnaConvPdf and deletes the original. Removing this member fixes crashes when invoking copy constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5588
https://github.com/root-project/root/pull/5589:33,deployability,observ,observed,33,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:49,deployability,version,version,49,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:49,integrability,version,version,49,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:49,modifiability,version,version,49,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:166,modifiability,Scal,Scalar,166,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:290,reliability,pra,pragma,290,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5589:33,testability,observ,observed,33,"Suppress Vc compilation warnings observed in gcc version 10; The warnings are coming when including the Vc/Vc header :. warning: ‘V2 Vc_1::Vector<T, Vc_1::VectorAbi::Scalar>::reinterpretCast() const’ is deprecated: use reinterpret_components_cast instead [-Wdeprecated-declarations]. Add a pragma to suppress -Wdeprecated-declarations in Types.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5589
https://github.com/root-project/root/pull/5590:150,availability,error,error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names,150,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5590:183,energy efficiency,load,loaded-with-ttrees-with-different-names,183,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5590:150,performance,error,error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names,150,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5590:150,safety,error,error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names,150,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5590:46,usability,support,support,46,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5590:150,usability,error,error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names,150,"Backport fix for ROOT-10178 ""[TreeProcMT] Add support for chain of trees with different names""; [This recent forum post](https://root-forum.cern.ch/t/error-with-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/39322) brought to my attention that ROOT-10178 can result in _silent_ reads of wrong data, so I think it might be good to backport the fix to v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5590
https://github.com/root-project/root/pull/5591:61,availability,error,errors,61,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:278,availability,Error,Error,278,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:679,availability,error,errors,679,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:12,deployability,automat,automatic,12,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:22,deployability,FAIL,FAILREGEX,22,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:172,deployability,automat,automatically,172,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:319,deployability,FAIL,FAILREGEX,319,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:412,deployability,FAIL,FAILREGEX,412,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:81,integrability,messag,message,81,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:81,interoperability,messag,message,81,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:61,performance,error,errors,61,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:278,performance,Error,Error,278,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:679,performance,error,errors,679,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:22,reliability,FAIL,FAILREGEX,22,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:319,reliability,FAIL,FAILREGEX,319,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:412,reliability,FAIL,FAILREGEX,412,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:632,reliability,diagno,diagnostics,632,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:61,safety,error,errors,61,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:120,safety,compl,completely,120,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:278,safety,Error,Error,278,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:378,safety,test,tests,378,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:399,safety,unsaf,unsafe,399,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:495,safety,Safe,Safe,495,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:570,safety,test,test,570,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:679,safety,error,errors,679,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:120,security,compl,completely,120,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:12,testability,automat,automatic,12,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:172,testability,automat,automatically,172,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:378,testability,test,tests,378,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:570,testability,test,test,570,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:632,testability,diagno,diagnostics,632,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:61,usability,error,errors,61,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:278,usability,Error,Error,278,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5591:679,usability,error,errors,679,"[CMake] Add automatic FAILREGEX for gtests; gtests can print errors using ROOT's message system, but these get. ignored completely. Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for. ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to. ROOT_ADD_GTEST. ### How to fix the tests:. - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything. - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics . - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5591
https://github.com/root-project/root/pull/5592:121,deployability,updat,update,121,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:95,modifiability,paramet,parameters,95,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:121,safety,updat,update,121,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:166,safety,test,test,166,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:121,security,updat,update,121,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:166,testability,test,test,166,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5592:132,usability,document,documentation,132,"[RS] Fix ROOT-2558, SPlot cannot deal with ratios.; Add the possibility to use ratios as yield parameters in SPlot. Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5592
https://github.com/root-project/root/pull/5593:30,safety,Avoid,Avoid,30,"Backport fix for ROOT-10648, ""Avoid having to modify TStreamerSTL when streaming it."";",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5593
https://github.com/root-project/root/pull/5593:46,security,modif,modify,46,"Backport fix for ROOT-10648, ""Avoid having to modify TStreamerSTL when streaming it."";",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5593
https://github.com/root-project/root/pull/5594:87,interoperability,standard,standard,87,Set proper includes path for RLogger.cxx (ROOT-10765); It compiled when c++14 or hight standard is specified. and not only with root7=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5594
https://github.com/root-project/root/pull/5594:99,interoperability,specif,specified,99,Set proper includes path for RLogger.cxx (ROOT-10765); It compiled when c++14 or hight standard is specified. and not only with root7=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5594
https://github.com/root-project/root/pull/5595:503,availability,error,error,503,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:539,availability,error,error,539,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:269,deployability,patch,patch,269,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:87,integrability,Filter,Filter,87,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:509,integrability,messag,message,509,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:509,interoperability,messag,message,509,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:69,performance,Cach,Cache,69,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:300,performance,perform,performs,300,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:503,performance,error,error,503,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:539,performance,error,error,539,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:52,safety,valid,valid,52,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:173,safety,valid,valid,173,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:269,safety,patch,patch,269,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:313,safety,valid,validity,313,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:472,safety,except,exception,472,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:503,safety,error,error,503,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:539,safety,error,error,539,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:269,security,patch,patch,269,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:213,usability,custom,custom,213,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:300,usability,perform,performs,300,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:489,usability,user,user-friendly,489,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:503,usability,error,error,503,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5595:539,usability,error,error,539,"[DF] Always check that arg types in jitted code are valid; Snapshot, Cache, Define and Filter did not check that the types of. columns used as arguments in jitted code were valid (in particular,. that the type of custom columns was correctly understood by cling). This patch provides a function that performs the validity check,. GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes. (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of. error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5595
https://github.com/root-project/root/pull/5596:1273,availability,operat,operator,1273,"php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2159,availability,operat,operator,2159,"..) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:295,deployability,build,build,295,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:313,deployability,stack,stacktrace,313,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1338,deployability,build,build,1338,"en the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::Test",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3142,deployability,build,build,3142,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1398,energy efficiency,core,core,1398,"Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2535,energy efficiency,optim,optimized,2535," >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3202,energy efficiency,core,core,3202,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:41,modifiability,variab,variable,41,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:99,performance,lock,lock,99,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:234,performance,time,timeout,234,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2535,performance,optimiz,optimized,2535," >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:53,safety,test,test,53,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:135,safety,test,test,135,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:173,safety,test,test,173,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:234,safety,timeout,timeout,234,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:265,safety,test,testDetails,265,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:281,safety,test,test,281,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:348,safety,test,test,348,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1003,safety,Test,TestBody,1003,"dedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1410,safety,test,test,1410,"84b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/inclu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1415,safety,test,testTThreadedObject,1415,"90)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1518,safety,Test,TestBody,1518,"expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1726,safety,Test,TestBody,1726,"nd_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall ()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1932,safety,Test,TestBody,1932,"7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_ret",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2131,safety,Test,TestBody,2131,"xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2337,safety,Test,TestBody,2337,"ld/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, v",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3097,safety,Test,TestBody,3097,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3214,safety,test,test,3214,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3219,safety,test,testTThreadedObject,3219,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3270,safety,test,testing,3270,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3325,safety,test,testing,3325,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3334,safety,Test,Test,3334,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3346,safety,test,testing,3346,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3355,safety,Test,Test,3355,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3368,safety,test,testing,3368,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3377,safety,Test,Test,3377,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3423,safety,test,testing,3423,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3432,safety,Test,Test,3432,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3483,safety,test,testing,3483,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3492,safety,Test,TestInfo,3492,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3547,safety,test,testing,3547,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3556,safety,Test,TestSuite,3556,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3612,safety,test,testing,3612,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3681,safety,test,testing,3681,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:99,security,lock,lock,99,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:53,testability,test,test,53,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:135,testability,test,test,135,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:173,testability,test,test,173,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:265,testability,test,testDetails,265,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:281,testability,test,test,281,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:348,testability,test,test,348,"[TThreadedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1003,testability,Test,TestBody,1003,"dedObject] Fix usage of condition variable in test; Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```. Thread 2 (Thread 0xa2784b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1410,testability,test,test,1410,"84b40 (LWP 4590)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/inclu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1415,testability,test,testTThreadedObject,1415,"90)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1518,testability,Test,TestBody,1518,"expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88. #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502. #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1726,testability,Test,TestBody,1726,"nd_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655. #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6. #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall ()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:1932,testability,Test,TestBody,1932,"7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_ret",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2131,testability,Test,TestBody,2131,"xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99. #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:2337,testability,Test,TestBody,2337,"ld/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167. #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (. __f=...) at /usr/include/c++/8/bits/invoke.h:60. #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, v",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3097,testability,Test,TestBody,3097,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3214,testability,test,test,3214,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3219,testability,test,testTThreadedObject,3219,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3270,testability,test,testing,3270,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3325,testability,test,testing,3325,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3334,testability,Test,Test,3334,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3346,testability,test,testing,3346,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3355,testability,Test,Test,3355,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3368,testability,test,testing,3368,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3377,testability,Test,Test,3377,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3423,testability,test,testing,3423,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3432,testability,Test,Test,3432,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3483,testability,test,testing,3483,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3492,testability,Test,TestInfo,3492,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3547,testability,test,testing,3547,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3556,testability,Test,TestSuite,3556,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3612,testability,test,testing,3612,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3631,testability,Unit,UnitTestImpl,3631,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3681,testability,test,testing,3681,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5596:3690,testability,Unit,UnitTest,3690,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...). at /usr/include/c++/8/bits/invoke.h:95. #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674). at /usr/include/c++/8/thread:244. #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674). at /usr/include/c++/8/thread:253. #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670). at /usr/include/c++/8/thread:196. #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6. #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486. #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):. #0 0xb7fa1d61 in __kernel_vsyscall (). #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89. #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24. #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6. #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90). at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176. #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (). #6 0x004aec42 in testing::Test::Run() [clone .part.608] (). #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (). #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (). #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (). #10 0x004b0696 in testing::UnitTest::Run() (). #11 0x0047beb1 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5596
https://github.com/root-project/root/pull/5597:830,availability,operat,operation,830,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:530,deployability,contain,containing,530,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:612,deployability,contain,contains,612,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:749,deployability,contain,contains,749,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:470,integrability,sub,subsequent,470,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:272,performance,I/O,I/O,272,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:826,performance,I/O,I/O,826,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:0,safety,Avoid,Avoid,0,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5597:1209,security,access,accessed,1209,"Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; . This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5597
https://github.com/root-project/root/pull/5598:446,deployability,depend,dependency,446,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:23,energy efficiency,CPU,CPU,23,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:446,integrability,depend,dependency,446,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:545,interoperability,XML,XML,545,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:446,modifiability,depend,dependency,446,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:535,modifiability,layer,layers,535,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:23,performance,CPU,CPU,23,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:516,performance,I/O,I/O,516,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:446,safety,depend,dependency,446,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:322,security,modif,modifying,322,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:446,testability,depend,dependency,446,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:4,usability,support,support,4,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5598:202,usability,Support,Support,202,Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209 ; Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda. Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5598
https://github.com/root-project/root/pull/5599:9,safety,test,tests,9,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5599:70,safety,test,tests,70,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5599:205,safety,test,tests,205,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5599:9,testability,test,tests,9,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5599:70,testability,test,tests,70,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5599:205,testability,test,tests,205,"[RF] Add tests ROOT-4580 and ROOT-9528.; In checking old bug reports, tests for two bugs were written. Although. the bugs had been fixed as side effects of modernisations or other bug. fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5599
https://github.com/root-project/root/pull/5600:393,deployability,version,version,393,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:393,integrability,version,version,393,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:478,integrability,messag,messages,478,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:478,interoperability,messag,messages,478,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:176,modifiability,variab,variables,176,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:327,modifiability,concern,concern,327,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:340,modifiability,variab,variables,340,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:393,modifiability,version,version,393,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:623,safety,avoid,avoid,623,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5600:327,testability,concern,concern,327,"[CMake][Exp PyROOT] Split if(PythonX_Development_FOUND) condition; The reason for this split is that Development is not required, hence we. can't rely on it being found to set variables which are usually set even. if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the. variables set and used only for the secondary Python version used to. biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now. requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,. in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5600
https://github.com/root-project/root/pull/5601:149,safety,input,input,149,"Add the boundary condition to the documentation; Two things should be added regarding the boundary condition: First, it should be mentioned that the input dimension is retained. Secondly, the method name should be added. (I think Kernel Crop in this case?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5601
https://github.com/root-project/root/pull/5601:34,usability,document,documentation,34,"Add the boundary condition to the documentation; Two things should be added regarding the boundary condition: First, it should be mentioned that the input dimension is retained. Secondly, the method name should be added. (I think Kernel Crop in this case?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5601
https://github.com/root-project/root/pull/5601:149,usability,input,input,149,"Add the boundary condition to the documentation; Two things should be added regarding the boundary condition: First, it should be mentioned that the input dimension is retained. Secondly, the method name should be added. (I think Kernel Crop in this case?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5601
https://github.com/root-project/root/pull/5603:468,availability,failur,failures,468,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:486,availability,failur,failures,486,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:649,availability,failur,failures,649,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1041,availability,failur,failures,1041,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:96,deployability,fail,failed,96,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:371,deployability,fail,fail,371,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:468,deployability,fail,failures,468,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:486,deployability,fail,failures,486,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:649,deployability,fail,failures,649,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1041,deployability,fail,failures,1041,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:798,energy efficiency,power,powerful,798,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:198,integrability,rout,routines,198,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:255,performance,perform,performance,255,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:468,performance,failur,failures,468,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:486,performance,failur,failures,486,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:649,performance,failur,failures,649,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1041,performance,failur,failures,1041,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:96,reliability,fail,failed,96,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:371,reliability,fail,fail,371,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:468,reliability,fail,failures,468,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:486,reliability,fail,failures,486,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:649,reliability,fail,failures,649,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1041,reliability,fail,failures,1041,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1132,reliability,doe,does,1132,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:48,safety,test,tests,48,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:345,safety,test,tests,345,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:463,safety,test,test,463,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:521,safety,test,testTTreeRegressions,521,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:48,testability,test,tests,48,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:345,testability,test,tests,345,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:463,testability,test,test,463,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:521,testability,test,testTTreeRegressions,521,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:624,testability,understand,understand,624,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:1026,testability,understand,understand,1026,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5603:255,usability,perform,performance,255,"Fix RDF and TTreeReader part of ROOT-10702, add tests; For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected. * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr). * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5603
https://github.com/root-project/root/pull/5604:376,deployability,depend,dependency,376,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:40,energy efficiency,CPU,CPU,40,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:376,integrability,depend,dependency,376,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:470,interoperability,XML,XML,470,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:376,modifiability,depend,dependency,376,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:460,modifiability,layer,layers,460,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:40,performance,CPU,CPU,40,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:441,performance,I/O,I/O,441,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:376,safety,depend,dependency,376,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:252,security,modif,modifying,252,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:376,testability,depend,dependency,376,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5604:21,usability,support,support,21,6.20 Backport of Add support for C++ 17 CPU compilation and Cuda compilation with C++14. This fixes ROOT-10209; Backport in 6.20 of #5598 . Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda. A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5604
https://github.com/root-project/root/pull/5605:59,deployability,instal,installer,59,[cling-cpt]Fix broken requirements check for cpt - Cling's installer; @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5605
https://github.com/root-project/root/pull/5606:37,deployability,log,logic,37,"[skip-ci][cling-cpt]Fix tar_required logic; If all requirements were satisfied, tar_required would always be false. This commit fixes it. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5606
https://github.com/root-project/root/pull/5606:37,safety,log,logic,37,"[skip-ci][cling-cpt]Fix tar_required logic; If all requirements were satisfied, tar_required would always be false. This commit fixes it. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5606
https://github.com/root-project/root/pull/5606:37,security,log,logic,37,"[skip-ci][cling-cpt]Fix tar_required logic; If all requirements were satisfied, tar_required would always be false. This commit fixes it. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5606
https://github.com/root-project/root/pull/5606:37,testability,log,logic,37,"[skip-ci][cling-cpt]Fix tar_required logic; If all requirements were satisfied, tar_required would always be false. This commit fixes it. @vgvassilev",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5606
https://github.com/root-project/root/pull/5607:180,deployability,updat,updated,180,"[CMake][Exp PyROOT] Differentiate between ROOT's Python and PyROOT/PyMVA's Python; Discussed with @etejedor, still needs to be discussed with @oshadura. Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5607
https://github.com/root-project/root/pull/5607:160,integrability,messag,message,160,"[CMake][Exp PyROOT] Differentiate between ROOT's Python and PyROOT/PyMVA's Python; Discussed with @etejedor, still needs to be discussed with @oshadura. Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5607
https://github.com/root-project/root/pull/5607:160,interoperability,messag,message,160,"[CMake][Exp PyROOT] Differentiate between ROOT's Python and PyROOT/PyMVA's Python; Discussed with @etejedor, still needs to be discussed with @oshadura. Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5607
https://github.com/root-project/root/pull/5607:180,safety,updat,updated,180,"[CMake][Exp PyROOT] Differentiate between ROOT's Python and PyROOT/PyMVA's Python; Discussed with @etejedor, still needs to be discussed with @oshadura. Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5607
https://github.com/root-project/root/pull/5607:180,security,updat,updated,180,"[CMake][Exp PyROOT] Differentiate between ROOT's Python and PyROOT/PyMVA's Python; Discussed with @etejedor, still needs to be discussed with @oshadura. Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5607
https://github.com/root-project/root/pull/5608:162,integrability,interfac,interface-problems-with-,162,[ROOT-10755] fixed X11 thread initialization; Fixed Issue reported on . https://sft.its.cern.ch/jira/browse/ROOT-10755. https://root-forum.cern.ch/t/rootr-root-r-interface-problems-with-x11-graphics/39299.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5608
https://github.com/root-project/root/pull/5608:162,interoperability,interfac,interface-problems-with-,162,[ROOT-10755] fixed X11 thread initialization; Fixed Issue reported on . https://sft.its.cern.ch/jira/browse/ROOT-10755. https://root-forum.cern.ch/t/rootr-root-r-interface-problems-with-x11-graphics/39299.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5608
https://github.com/root-project/root/pull/5608:162,modifiability,interfac,interface-problems-with-,162,[ROOT-10755] fixed X11 thread initialization; Fixed Issue reported on . https://sft.its.cern.ch/jira/browse/ROOT-10755. https://root-forum.cern.ch/t/rootr-root-r-interface-problems-with-x11-graphics/39299.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5608
https://github.com/root-project/root/pull/5609:28,availability,error,error,28,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:224,availability,error,errors,224,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:636,availability,error,error,636,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:745,availability,error,errors,745,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:105,deployability,fail,fail,105,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:615,deployability,fail,failed,615,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:28,performance,error,error,28,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:224,performance,error,errors,224,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:636,performance,error,error,636,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:745,performance,error,errors,745,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:105,reliability,fail,fail,105,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:615,reliability,fail,failed,615,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:28,safety,error,error,28,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:224,safety,error,errors,224,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:636,safety,error,error,636,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:745,safety,error,errors,745,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:28,usability,error,error,28,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:224,usability,error,errors,224,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:636,usability,error,error,636,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5609:745,usability,error,errors,745,"[cling] Also capture SFINAE error counts (ROOT-10754); When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves. This fixes ROOT-10754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5609
https://github.com/root-project/root/pull/5610:33,deployability,modul,modules,33,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:93,deployability,modul,modulemap,93,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:112,deployability,modul,modulemap,112,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:175,deployability,Modul,Modules,175,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:144,energy efficiency,core,core,144,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:33,modifiability,modul,modules,33,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:93,modifiability,modul,modulemap,93,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:112,modifiability,modul,modulemap,112,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:175,modifiability,Modul,Modules,175,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:33,safety,modul,modules,33,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:93,safety,modul,modulemap,93,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:112,safety,modul,modulemap,112,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:175,safety,Modul,Modules,175,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5610:183,usability,support,support,183,[wincxxmodules] Fix std and libc modules on Windows; This PR fixes compilation issues of std.modulemap and libc.modulemap on Windows. This is a core step towards Enabling the Modules support in Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5610
https://github.com/root-project/root/pull/5611:0,deployability,Releas,Release,0,Release notes about includes optimization in ROOT headers [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5611
https://github.com/root-project/root/pull/5611:29,energy efficiency,optim,optimization,29,Release notes about includes optimization in ROOT headers [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5611
https://github.com/root-project/root/pull/5611:29,performance,optimiz,optimization,29,Release notes about includes optimization in ROOT headers [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5611
https://github.com/root-project/root/pull/5612:24,safety,test,test,24,Fix dataframe_interface test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612
https://github.com/root-project/root/pull/5612:24,testability,test,test,24,Fix dataframe_interface test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5612
https://github.com/root-project/root/pull/5613:45,deployability,modul,modules,45,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:60,deployability,build,building,60,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:119,deployability,modul,modules,119,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:147,deployability,modul,modules,147,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:195,deployability,modul,modules,195,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:300,deployability,modul,module,300,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:307,deployability,build,build,307,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:319,deployability,patch,patch,319,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:362,deployability,modul,module,362,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:369,deployability,build,builds,369,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:456,deployability,modul,module,456,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:463,deployability,build,builds,463,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:27,interoperability,specif,specify,27,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:45,modifiability,modul,modules,45,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:119,modifiability,modul,modules,119,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:147,modifiability,modul,modules,147,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:195,modifiability,modul,modules,195,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:300,modifiability,modul,module,300,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:362,modifiability,modul,module,362,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:456,modifiability,modul,module,456,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:218,performance,I/O,I/O,218,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:424,reliability,diagno,diagnostic,424,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:45,safety,modul,modules,45,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:119,safety,modul,modules,119,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:147,safety,modul,modules,147,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:195,safety,modul,modules,195,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:244,safety,permiss,permissible,244,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:300,safety,modul,module,300,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:319,safety,patch,patch,319,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:362,safety,modul,module,362,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:456,safety,modul,module,456,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:319,security,patch,patch,319,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:424,testability,diagno,diagnostic,424,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5613:18,usability,user,users,18,"[rootcling] Allow users to specify byproduct modules.; When building the foundation of frameworks often the dictionary modules require third party modules such as clhep, boost and tinyxml. Those modules do not require I/O information and it is permissible to be built as a part of another dictionary module build. This patch relaxes the eager check for implicit module builds by adding a flag -mByproduct which turns of the diagnostic disallowing implicit module builds. cc @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5613
https://github.com/root-project/root/pull/5614:106,usability,user,users,106,"[RF] RooFit and gDirectory.; **Edit**:. - Implement `TH1::AddDirectory()`-style functions for RooPlot, so users can customise whether these attach themselves to files. - Remove all uses of TDirectory::kCloseDirectory, because it was never set anywhere in ROOT, so it is always false. I didn't find the ""Archaeology"" label in github, sorry. ;-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5614
https://github.com/root-project/root/pull/5614:116,usability,custom,customise,116,"[RF] RooFit and gDirectory.; **Edit**:. - Implement `TH1::AddDirectory()`-style functions for RooPlot, so users can customise whether these attach themselves to files. - Remove all uses of TDirectory::kCloseDirectory, because it was never set anywhere in ROOT, so it is always false. I didn't find the ""Archaeology"" label in github, sorry. ;-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5614
https://github.com/root-project/root/pull/5615:26,availability,error,error,26,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:223,availability,error,errors,223,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:635,availability,error,error,635,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:744,availability,error,errors,744,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:104,deployability,fail,fail,104,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:614,deployability,fail,failed,614,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:26,performance,error,error,26,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:223,performance,error,errors,223,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:635,performance,error,error,635,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:744,performance,error,errors,744,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:104,reliability,fail,fail,104,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:614,reliability,fail,failed,614,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:26,safety,error,error,26,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:223,safety,error,errors,223,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:635,safety,error,error,635,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:744,safety,error,errors,744,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:26,usability,error,error,26,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:223,usability,error,errors,223,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:635,usability,error,error,635,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5615:744,usability,error,errors,744,"v618: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5615
https://github.com/root-project/root/pull/5616:26,availability,error,error,26,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:223,availability,error,errors,223,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:635,availability,error,error,635,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:744,availability,error,errors,744,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:104,deployability,fail,fail,104,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:614,deployability,fail,failed,614,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:26,performance,error,error,26,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:223,performance,error,errors,223,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:635,performance,error,error,635,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:744,performance,error,errors,744,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:104,reliability,fail,fail,104,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:614,reliability,fail,failed,614,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:26,safety,error,error,26,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:223,safety,error,errors,223,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:635,safety,error,error,635,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:744,safety,error,errors,744,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:26,usability,error,error,26,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:223,usability,error,errors,223,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:635,usability,error,error,635,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5616:744,usability,error,errors,744,"v620: Also capture SFINAE error counts (ROOT-10754):; When doing lookup on templates, instantiation can fail. This can be triggered during templarte instantiation somewhere. in clang, autoloading, cling-lookup - and SFINAE errors that. occurr in cling-lookup must not bubble up to clang, or else. clang will think that there was a problem (where there was. none - just e.g. ROOT trying to autoload a bogus template). In this concrete case, a template specialized with a lambda. was not found by clang, was tried to be autoloaded, TMetaUtils. produced a broken normalized type name, lookup on the broken. type name failed with a SFINAE error - and that ended up being. swallowed by a clang SFINAETrap by the topmost lookup. Instead, keep SFINAE errors to ourselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5616
https://github.com/root-project/root/pull/5617:27,deployability,fail,failing,27,Fix (disable) roofit tests failing on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5617
https://github.com/root-project/root/pull/5617:27,reliability,fail,failing,27,Fix (disable) roofit tests failing on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5617
https://github.com/root-project/root/pull/5617:21,safety,test,tests,21,Fix (disable) roofit tests failing on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5617
https://github.com/root-project/root/pull/5617:21,testability,test,tests,21,Fix (disable) roofit tests failing on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5617
https://github.com/root-project/root/pull/5618:52,deployability,version,version,52,Cxx info; Some changes to allow the printing of the version of the compiler used to built ROOT. By default the compiler will be printed in the Welcome box.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5618
https://github.com/root-project/root/pull/5618:52,integrability,version,version,52,Cxx info; Some changes to allow the printing of the version of the compiler used to built ROOT. By default the compiler will be printed in the Welcome box.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5618
https://github.com/root-project/root/pull/5618:52,modifiability,version,version,52,Cxx info; Some changes to allow the printing of the version of the compiler used to built ROOT. By default the compiler will be printed in the Welcome box.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5618
https://github.com/root-project/root/pull/5619:25,safety,test,test,25,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:180,safety,test,tests,180,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:404,safety,test,test,404,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:437,safety,test,tests,437,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:25,testability,test,test,25,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:180,testability,test,tests,180,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:404,testability,test,test,404,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:437,testability,test,tests,437,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5619:303,usability,experien,experienced,303,"[ntuple] Split up ntuple test files (ROOT-10773); @jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5619
https://github.com/root-project/root/pull/5620:187,availability,error,error,187,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:84,deployability,version,version,84,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:140,deployability,build,build,140,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:205,deployability,fail,failed,205,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:273,deployability,build,build,273,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:282,deployability,BUILD,BUILDTYPE,282,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:400,deployability,patch,patch,400,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:84,integrability,version,version,84,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:84,modifiability,version,version,84,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:187,performance,error,error,187,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:205,reliability,fail,failed,205,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:187,safety,error,error,187,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:400,safety,patch,patch,400,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:400,security,patch,patch,400,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:195,testability,Assert,Assertion,195,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:95,usability,Visual,Visual,95,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:187,usability,error,error,187,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5620:347,usability,tool,tools,347,"Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5620
https://github.com/root-project/root/pull/5621:194,availability,error,error,194,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:91,deployability,version,version,91,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:147,deployability,build,build,147,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:212,deployability,fail,failed,212,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:280,deployability,build,build,280,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:289,deployability,BUILD,BUILDTYPE,289,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:407,deployability,patch,patch,407,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:91,integrability,version,version,91,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:91,modifiability,version,version,91,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:194,performance,error,error,194,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:212,reliability,fail,failed,212,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:194,safety,error,error,194,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:407,safety,patch,patch,407,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:407,security,patch,patch,407,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:202,testability,Assert,Assertion,202,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:102,usability,Visual,Visual,102,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:194,usability,error,error,194,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5621:354,usability,tool,tools,354,"v6.20: Fix potential crash at startup on Windows; When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:. Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630. This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5621
https://github.com/root-project/root/pull/5622:49,deployability,modul,modulemap,49,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5622:130,deployability,modul,modulemap,130,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5622:49,modifiability,modul,modulemap,49,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5622:130,modifiability,modul,modulemap,130,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5622:49,safety,modul,modulemap,49,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5622:130,safety,modul,modulemap,130,Make xtimec.h and xthreads.h textual in std_msvc.modulemap; This PR makes the xtimec.h and xthreads.h headers textual in std_msvc.modulemap. This is required as including xtimec.h and xthreads.h cause problems on newer Windows SDKs. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5622
https://github.com/root-project/root/pull/5623:124,deployability,contain,contain,124,"[RNTuple] several fixes for type name parsing; The issues where discovered when converting ATLAS OpenData to RNTuple, which contain standard vectors in several variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5623
https://github.com/root-project/root/pull/5623:64,integrability,discover,discovered,64,"[RNTuple] several fixes for type name parsing; The issues where discovered when converting ATLAS OpenData to RNTuple, which contain standard vectors in several variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5623
https://github.com/root-project/root/pull/5623:64,interoperability,discover,discovered,64,"[RNTuple] several fixes for type name parsing; The issues where discovered when converting ATLAS OpenData to RNTuple, which contain standard vectors in several variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5623
https://github.com/root-project/root/pull/5623:132,interoperability,standard,standard,132,"[RNTuple] several fixes for type name parsing; The issues where discovered when converting ATLAS OpenData to RNTuple, which contain standard vectors in several variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5623
https://github.com/root-project/root/pull/5623:64,usability,discov,discovered,64,"[RNTuple] several fixes for type name parsing; The issues where discovered when converting ATLAS OpenData to RNTuple, which contain standard vectors in several variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5623
https://github.com/root-project/root/pull/5625:19,modifiability,variab,variables,19,Fix Python related variables for tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5625
https://github.com/root-project/root/pull/5625:33,safety,test,tests,33,Fix Python related variables for tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5625
https://github.com/root-project/root/pull/5625:33,testability,test,tests,33,Fix Python related variables for tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5625
https://github.com/root-project/root/pull/5626:240,availability,failur,failures,240,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,deployability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,deployability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:240,deployability,fail,failures,240,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,deployability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,integrability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,integrability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,integrability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,interoperability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,interoperability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:200,interoperability,BinD,BinData,200,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,interoperability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,modifiability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,modifiability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:200,modifiability,BinD,BinData,200,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,modifiability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:135,performance,multi-thread,multi-thread,135,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:240,performance,failur,failures,240,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,reliability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,reliability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:240,reliability,fail,failures,240,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,reliability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:186,safety,safe,safe,186,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,security,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,security,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,security,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:53,testability,integr,integral,53,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:83,testability,integr,integrals,83,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5626:256,testability,integr,integral,256,"Fix multithread fitting in case of ThnSparse and bin integral fits; Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge. This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5626
https://github.com/root-project/root/pull/5627:22,availability,error,error,22,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:67,availability,error,error,67,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:561,availability,error,error,561,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1176,availability,error,error,1176,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2104,availability,error,error,2104,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3026,availability,error,error,3026,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:137,deployability,version,version,137,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:175,deployability,instal,installed,175,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:543,energy efficiency,core,corecrt,543,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:733,energy efficiency,core,corecrt,733,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1158,energy efficiency,core,corecrt,1158,"than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1456,energy efficiency,core,corecrt,1456,"crt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1679,energy efficiency,core,corecrt,1679,"s (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2086,energy efficiency,core,corecrt,2086,":. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2378,energy efficiency,core,corecrt,2378,": note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2601,energy efficiency,core,corecrt,2601,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3008,energy efficiency,core,corecrt,3008,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3276,energy efficiency,core,corecrt,3276,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3499,energy efficiency,core,corecrt,3499,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:28,integrability,messag,messages,28,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:73,integrability,messag,messages,73,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:137,integrability,version,version,137,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:28,interoperability,messag,messages,28,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:73,interoperability,messag,messages,73,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:137,modifiability,version,version,137,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:22,performance,error,error,22,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:67,performance,error,error,67,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:561,performance,error,error,561,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1176,performance,error,error,1176,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1485,performance,time,times,1485," Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1708,performance,time,times,1708,"ude\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2104,performance,error,error,2104,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2407,performance,time,times,2407,"86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2630,performance,time,times,2630,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3026,performance,error,error,3026,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3305,performance,time,times,3305,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3528,performance,time,times,3528,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:22,safety,error,error,22,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:67,safety,error,error,67,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:561,safety,error,error,561,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1176,safety,error,error,1176,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2104,safety,error,error,2104,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3026,safety,error,error,3026,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:464,testability,assert,assert,464,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1079,testability,assert,assert,1079,"displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1591,testability,assert,assert,1591,"eIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2007,testability,assert,assert,2007,"rom C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2513,testability,assert,assert,2513," here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' includ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2929,testability,assert,assert,2929,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3411,testability,assert,assert,3411,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:22,usability,error,error,22,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:67,usability,error,error,67,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:148,usability,Visual,Visual,148,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:301,usability,Visual,Visual,301,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:333,usability,Tool,Tools,333,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:561,usability,error,error,561,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:916,usability,Visual,Visual,916,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:948,usability,Tool,Tools,948,"Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1176,usability,error,error,1176,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1304,usability,Visual,Visual,1304," Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1336,usability,Tool,Tools,1336,"MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Win",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1844,usability,Visual,Visual,1844,"t_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:1876,usability,Tool,Tools,1876,"rom C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program File",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2104,usability,error,error,2104,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2226,usability,Visual,Visual,2226,"pedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2258,usability,Tool,Tools,2258,"ublic. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2766,usability,Visual,Visual,2766,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:2798,usability,Tool,Tools,2798,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3026,usability,error,error,3026,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3124,usability,Visual,Visual,3124,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5627:3156,usability,Tool,Tools,3156,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5627
https://github.com/root-project/root/pull/5628:29,availability,error,error,29,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:74,availability,error,error,74,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:568,availability,error,error,568,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1183,availability,error,error,1183,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2111,availability,error,error,2111,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3033,availability,error,error,3033,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:144,deployability,version,version,144,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:182,deployability,instal,installed,182,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:550,energy efficiency,core,corecrt,550,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:740,energy efficiency,core,corecrt,740,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1165,energy efficiency,core,corecrt,1165,"than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1463,energy efficiency,core,corecrt,1463,"crt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1686,energy efficiency,core,corecrt,1686,"s (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2093,energy efficiency,core,corecrt,2093,":. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2385,energy efficiency,core,corecrt,2385,": note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2608,energy efficiency,core,corecrt,2608,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3015,energy efficiency,core,corecrt,3015,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3283,energy efficiency,core,corecrt,3283,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3506,energy efficiency,core,corecrt,3506,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:35,integrability,messag,messages,35,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:80,integrability,messag,messages,80,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:144,integrability,version,version,144,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:35,interoperability,messag,messages,35,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:80,interoperability,messag,messages,80,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:144,modifiability,version,version,144,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:29,performance,error,error,29,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:74,performance,error,error,74,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:568,performance,error,error,568,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1183,performance,error,error,1183,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1492,performance,time,times,1492," Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1715,performance,time,times,1715,"ude\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2111,performance,error,error,2111,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2414,performance,time,times,2414,"86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2637,performance,time,times,2637,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3033,performance,error,error,3033,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3312,performance,time,times,3312,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3535,performance,time,times,3535,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:29,safety,error,error,29,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:74,safety,error,error,74,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:568,safety,error,error,568,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1183,safety,error,error,1183,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2111,safety,error,error,2111,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3033,safety,error,error,3033,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:471,testability,assert,assert,471,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1086,testability,assert,assert,1086,"displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1598,testability,assert,assert,1598,"eIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2014,testability,assert,assert,2014,"rom C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2520,testability,assert,assert,2520," here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' includ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2936,testability,assert,assert,2936,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3418,testability,assert,assert,3418,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:29,usability,error,error,29,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:74,usability,error,error,74,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:155,usability,Visual,Visual,155,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:308,usability,Visual,Visual,308,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:340,usability,Tool,Tools,340,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:568,usability,error,error,568,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:923,usability,Visual,Visual,923,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:955,usability,Tool,Tools,955,"v6.20: Fix potential startup error messages on Windows; Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1183,usability,error,error,1183,"alled on the system:. ```. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1311,usability,Visual,Visual,1311," Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1343,usability,Tool,Tools,1343,"MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'. struct _CrtEnableIf<true, _Ty>. ^~~~~~~~~~~~~~~~~~~~~~~. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here. struct _CrtEnableIf<true, _Ty>. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Win",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1851,usability,Visual,Visual,1851,"t_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:1883,usability,Tool,Tools,1883,"rom C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program File",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2111,usability,error,error,2111,"es (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'. typedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2233,usability,Visual,Visual,2233,"pedef struct __crt_locale_data_public. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2265,usability,Tool,Tools,2265,"ublic. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2773,usability,Visual,Visual,2773,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:2805,usability,Tool,Tools,2805,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3033,usability,error,error,3033,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3131,usability,Visual,Visual,3131,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5628:3163,usability,Tool,Tools,3163,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'. typedef struct __crt_locale_pointers. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. In file included from input_line_3:38:. In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:. In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'. typedef struct _Mbstatet. ^. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include. site here. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5628
https://github.com/root-project/root/pull/5629:419,deployability,updat,updated,419,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:11,energy efficiency,Draw,Draw,11,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:55,energy efficiency,Draw,Draw,55,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:91,energy efficiency,draw,drawing,91,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:281,energy efficiency,Draw,Draw,281,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:356,energy efficiency,Draw,Draw,356,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:376,energy efficiency,Draw,Draw,376,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:419,safety,updat,updated,419,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:419,security,updat,updated,419,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5629:391,usability,guid,guide,391,"Fix TTree::Draw with option A; - Fix ROOT-9561. TTree::Draw segfaults when passing ""A*"" as drawing option. The following macro reproduces the problem:. ```. {. TTree tree(""tree"", ""tree"");. int a, b;. tree.Branch(""a"", &a);. tree.Branch(""b"", &b);. a = 1;. b = 2;. tree.Fill();. tree.Draw(""a:b"", """", ""* A"");. }. ```. - The paragraph ""Retrieving the result of Draw"" in the TTree::Draw reference guide has been improved and updated. - Some typos have been fixed in TTree.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5629
https://github.com/root-project/root/pull/5631:241,deployability,modul,module,241,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:267,deployability,modul,module,267,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:241,modifiability,modul,module,241,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:267,modifiability,modul,module,267,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:125,reliability,doe,does,125,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:28,safety,input,input,28,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:241,safety,modul,module,241,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:267,safety,modul,module,267,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:34,testability,hook,hook,34,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:28,usability,input,input,28,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:174,usability,interact,interactive,174,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5631:292,usability,interact,interactive,292,"[PyROOT][ROOT-10774] Enable input hook for PyROOTApplication; The issue is that Python in script mode, e.g., for rootbrowse, does not. call the PyOS_InputHook such as in the interactive mode. This can be. triggered by importing the readline module, which is the same module. than used in the interactive mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5631
https://github.com/root-project/root/pull/5632:230,deployability,contain,containing,230,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:63,energy efficiency,load,loading,63,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:75,energy efficiency,model,model,75,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:139,energy efficiency,load,loading,139,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:164,energy efficiency,model,model,164,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:199,energy efficiency,model,model,199,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:305,energy efficiency,load,loading,305,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:317,energy efficiency,model,model,317,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:993,energy efficiency,model,model,993,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1008,energy efficiency,model,model,1008,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1050,energy efficiency,optim,optimizer,1050,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1126,energy efficiency,load,loading,1126,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1138,energy efficiency,model,model,1138,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1328,energy efficiency,model,model,1328,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1342,energy efficiency,model,models,1342,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1525,modifiability,variab,variable,1525,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:63,performance,load,loading,63,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:139,performance,load,loading,139,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:305,performance,load,loading,305,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1050,performance,optimiz,optimizer,1050,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1126,performance,load,loading,1126,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:75,security,model,model,75,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:164,security,model,model,164,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:199,security,model,model,199,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:317,security,model,model,317,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:993,security,model,model,993,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1008,security,model,model,1008,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1022,security,loss,loss,1022,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1138,security,model,model,1138,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1328,security,model,model,1328,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1342,security,model,models,1342,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:39,usability,user,user,39,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:117,usability,custom,custom,117,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:241,usability,user,users,241,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1170,usability,user,user,1170,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1455,usability,user,user,1455,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5632:1499,usability,user,users,1499,"Add a new option in PyKeras to execute user python code before loading the model; One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : . define precision and recall functions:. ```. def precision(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))). precision = true_positives / (predicted_positives + K.epsilon()). return precision. def recall(y_true, y_pred): #taken from old keras source code. true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))). possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))). recall = true_positives / (possible_positives + K.epsilon()). return recall. ```. compile the model : . ```. model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]). ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```. load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects). ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and . the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5632
https://github.com/root-project/root/pull/5633:0,integrability,Filter,Filter,0,Filter out non existing library name (there is only a dll); This fixes an issue with ACLiC trying to link against `msvcp140.lib` which doesn't exist (there is only `msvcp140.dll`),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5633
https://github.com/root-project/root/pull/5633:135,reliability,doe,doesn,135,Filter out non existing library name (there is only a dll); This fixes an issue with ACLiC trying to link against `msvcp140.lib` which doesn't exist (there is only `msvcp140.dll`),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5633
https://github.com/root-project/root/pull/5634:7,integrability,Filter,Filter,7,v6.20: Filter out non existing library name (there is only a dll); This fixes an issue with ACLiC trying to link against `msvcp140.lib` which doesn't exist (there is only `msvcp140.dll`),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5634
https://github.com/root-project/root/pull/5634:142,reliability,doe,doesn,142,v6.20: Filter out non existing library name (there is only a dll); This fixes an issue with ACLiC trying to link against `msvcp140.lib` which doesn't exist (there is only `msvcp140.dll`),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5634
https://github.com/root-project/root/pull/5635:834,availability,operat,operation,834,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:534,deployability,contain,containing,534,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:616,deployability,contain,contains,616,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:753,deployability,contain,contains,753,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:474,integrability,sub,subsequent,474,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:276,performance,I/O,I/O,276,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:830,performance,I/O,I/O,830,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:6,safety,Avoid,Avoid,6,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5635:1213,security,access,accessed,1213,"v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.; This solves ROOT-9535. During the cloning process the TPaveStats (as part of fFunctions) is cloned and its member fParent point to the TH1 being. cloned. Since that TH1 was not part of the I/O transaction this leads the cloned TPaveStats parent to point to yet another. copy of the TH1. In the case of ROOT-9535, that copy held stale pointer to object that were removed and deleted in a subsequent. call to Reset. The exact order. Create a TH1 h1 containing a TPaveStats s1 and a TPaletteAxis p1. Then Clone h1 into h2 which now contains TPaveStats s2 and a TPalettesAxis p2. Since s1.fParent was also cloned s2.fParent points to another histogram h3. h3.fFunctions contains a pointer to s2 and to p2 since they were streamed during. the same I/O operation (the Clone via TBuffer of fFunctions). When h2 is Reset, it deletes p2 and remove it from h2.fFunctions,. however (since it is not even supposed to exist) h3 is not informed and. keep a (stale) pointer to p2. The Reset, however, keeps the TPaveStats. as is. Then during the cloning of h2, p2 is traversed and thus h3 is traversed. and thus the (stale) pointer to p2 is accessed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5635
https://github.com/root-project/root/pull/5636:158,availability,error,error,158,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:55,deployability,build,building,55,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:72,deployability,modul,module,72,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:103,deployability,build,build,103,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:20,energy efficiency,Core,Core,20,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:67,energy efficiency,Core,Core,67,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:72,modifiability,modul,module,72,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:158,performance,error,error,158,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:72,safety,modul,module,72,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:158,safety,error,error,158,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5636:158,usability,error,error,158,"[wincxxmodules] Fix Core.pcm on Windows; This PR fixes building of Core module on Windows. . ```. /.../build/include\ROOT/RWrap_libcpp_string_view.h(428,34): error G1A4676F8: no member named '__find_end' in namespace 'std'; did you mean 'find_end'? const _CharT* __r = _VSTD::__find_end(. ~~~~~~~^~~~~~~~~~. find_end. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5636
https://github.com/root-project/root/pull/5637:116,deployability,Patch,Patch,116,[cling] Allow a Dyld per DynamicLibraryManager.; This addresses the rest of the comments of root-project/root#4717. Patch by Alexander Penev (@alexander-penev) and me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5637
https://github.com/root-project/root/pull/5637:116,safety,Patch,Patch,116,[cling] Allow a Dyld per DynamicLibraryManager.; This addresses the rest of the comments of root-project/root#4717. Patch by Alexander Penev (@alexander-penev) and me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5637
https://github.com/root-project/root/pull/5637:116,security,Patch,Patch,116,[cling] Allow a Dyld per DynamicLibraryManager.; This addresses the rest of the comments of root-project/root#4717. Patch by Alexander Penev (@alexander-penev) and me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5637
https://github.com/root-project/root/pull/5638:0,deployability,Instal,Install,0,Install liblzma.lib (required by roottest for example);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5638
https://github.com/root-project/root/pull/5642:375,availability,operat,operator,375,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:835,availability,operat,operator,835,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:128,deployability,build,builddir,128,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:137,deployability,build,build,137,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:143,deployability,BUILD,BUILD,143,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:721,deployability,fail,failed,721,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:976,deployability,build,build,976,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:1220,deployability,build,build,1220,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:1484,deployability,build,build,1484,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:1713,deployability,build,build,1713,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:519,energy efficiency,alloc,allocator,519,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:816,energy efficiency,alloc,allocator,816,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:1174,integrability,sub,subClasses,1174,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:1421,integrability,sub,subClasses,1421,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:721,reliability,fail,failed,721,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:27,security,access,access,27,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:68,testability,assert,assert,68,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5642:693,testability,Assert,Assertion,693,"[io] Protect out-of-bounds access in R__WriteDestructorBody:; Fixes assert in roottest/root/meta/MakeProject/runcms310.C. ```. /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed. #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6. #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531. #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,. subClasses=0x7fffffff8db0, top=true). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772. #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",. subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976. #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""). at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5642
https://github.com/root-project/root/pull/5643:20,deployability,Build,Build,20,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:118,deployability,contain,containing,118,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:419,deployability,modul,module,419,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:168,energy efficiency,load,loaded,168,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:312,energy efficiency,load,loaded,312,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:135,modifiability,extens,extensions,135,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:409,modifiability,extens,extension,409,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:419,modifiability,modul,module,419,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:168,performance,load,loaded,168,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:312,performance,load,loaded,312,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5643:419,safety,modul,module,419,"[CMake][Exp PyROOT] Build libcppyy and libROOTPythonizations with und…; …efined symbols. As a general rule, libraries containing C/C++ extensions that are meant. to be loaded from Python, should not be linked against libPython; the. reason for this is that when these libraries are imported, Python has. already loaded the libPython symbols, and if these are different from. the ones used to link against the extension module a crash can happen. libcppyy and libROOTPythonizations, being only imported from Python, do. not need to link against libPython. On the other hand, this is needed for libROOTTPython, which is used only. form C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5643
https://github.com/root-project/root/pull/5645:238,interoperability,platform,platforms,238,"Try to remove #include <cassert> to see if it's still needed; Since it has been successfully removed on Windows (git commit [#9709188476ed](https://github.com/root-project/root/commit/9709188476ed)), make sure it is still needed on other platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5645
https://github.com/root-project/root/pull/5646:33,safety,test,testing,33,v6.20 Spurrious change to enable testing jenkins;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5646
https://github.com/root-project/root/pull/5646:33,testability,test,testing,33,v6.20 Spurrious change to enable testing jenkins;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5646
https://github.com/root-project/root/pull/5648:84,availability,error,error,84,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:371,availability,error,error,371,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:84,performance,error,error,84,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:371,performance,error,error,371,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:26,safety,except,exception,26,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:84,safety,error,error,84,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:371,safety,error,error,371,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:84,usability,error,error,84,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:344,usability,behavi,behavior,344,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5648:371,usability,error,error,371,"[Exp PyROOT] TFile: throw exception when trying to open a non-existin…; …g file. An error is raised when ROOT.TFile(file_name) and. ROOT.TFile.Open(file_name) try to open a non-existing file, as suggested. in https://sft.its.cern.ch/jira/browse/ROOT-9915. It is open to discussion whether we should return the object anyways (i.e. keep the C++ behavior) or just raise an error (like it is done here).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5648
https://github.com/root-project/root/pull/5649:14,deployability,updat,updates,14,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:45,deployability,updat,updates,45,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:14,safety,updat,updates,14,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:45,safety,updat,updates,45,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:14,security,updat,updates,14,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:45,security,updat,updates,45,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:0,usability,Document,Documentation,0,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:31,usability,document,documentation,31,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:202,usability,user,user-images,202,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5649:331,usability,user,user-images,331,"Documentation updates; Several documentation updates. For TProfile, a ^2 was missing in the formulae, and weights weren't mentioned anywhere. The TProfile one now typesets as follows:. ![image](https://user-images.githubusercontent.com/16205615/82306058-da170880-99be-11ea-9f37-4e90259e7f12.png). And TProfile2D:. ![image](https://user-images.githubusercontent.com/16205615/82306124-edc26f00-99be-11ea-9ecc-4745c374abf8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5649
https://github.com/root-project/root/pull/5650:28,deployability,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:35,energy efficiency,model,model,35,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:91,energy efficiency,model,model,91,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:171,performance,time,time,171,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
