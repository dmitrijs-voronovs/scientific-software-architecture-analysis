id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/10690:95,modifiability,modul,module,95,"`PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found` is worrying. Could you check, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:95,safety,modul,module,95,"`PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found` is worrying. Could you check, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,availability,error,error,106,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:254,availability,error,error,254,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:142,deployability,build,build,142,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:176,deployability,build,build,176,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:182,deployability,build,build,182,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:276,deployability,build,build,276,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:310,deployability,build,build,310,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:316,deployability,build,build,316,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:355,deployability,modul,module,355,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:387,deployability,FAIL,FAILED,387,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:539,deployability,build,build,539,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:631,deployability,depend,depend,631,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:670,energy efficiency,current,currently,670,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:631,integrability,depend,depend,631,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:355,modifiability,modul,module,355,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:631,modifiability,depend,depend,631,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,performance,error,error,106,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:254,performance,error,error,254,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:387,reliability,FAIL,FAILED,387,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,safety,error,error,106,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:254,safety,error,error,254,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:355,safety,modul,module,355,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:406,safety,test,test,406,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:547,safety,test,test,547,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:619,safety,test,test,619,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:631,safety,depend,depend,631,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:774,safety,test,test,774,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:896,safety,test,test,896,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:4,testability,context,context,4,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:406,testability,test,test,406,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:547,testability,test,test,547,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:619,testability,test,test,619,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:631,testability,depend,depend,631,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:774,testability,test,test,774,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:896,testability,test,test,896,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:60,usability,command,command,60,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,usability,error,error,106,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:254,usability,error,error,254,"The context is. ```. 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX. 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util . ```. This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before? This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:236,availability,error,error,236,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:113,deployability,depend,depends,113,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:184,deployability,depend,dependency,184,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:373,deployability,version,version,373,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:113,integrability,depend,depends,113,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:184,integrability,depend,dependency,184,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:373,integrability,version,version,373,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:113,modifiability,depend,depends,113,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:184,modifiability,depend,dependency,184,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:373,modifiability,version,version,373,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:100,performance,I/O,I/O,100,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:206,performance,time,time,206,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:236,performance,error,error,236,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:48,safety,test,test,48,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,safety,test,test,59,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:113,safety,depend,depends,113,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:184,safety,depend,dependency,184,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:236,safety,error,error,236,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:48,testability,test,test,48,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,testability,test,test,59,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:113,testability,depend,depends,113,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:184,testability,depend,dependency,184,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:236,usability,error,error,236,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. . It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:47,availability,error,error,47,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:25,deployability,depend,dependency,25,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:82,deployability,depend,dependency,82,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:25,integrability,depend,dependency,25,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:82,integrability,depend,dependency,82,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:25,modifiability,depend,dependency,25,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:82,modifiability,depend,dependency,82,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:47,performance,error,error,47,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:25,safety,depend,dependency,25,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:47,safety,error,error,47,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:82,safety,depend,dependency,82,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:25,testability,depend,dependency,25,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:82,testability,depend,dependency,82,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:47,usability,error,error,47,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:142,availability,servic,services,142,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:324,availability,error,error,324,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:61,deployability,build,builds,61,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:142,deployability,servic,services,142,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:45,energy efficiency,current,current,45,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:142,integrability,servic,services,142,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:142,modifiability,servic,services,142,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:324,performance,error,error,324,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:324,safety,error,error,324,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:324,usability,error,error,324,"This is strange, because if you look at this current nightly builds in ubuntu18 for example the PCH is not yet even built (see https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/3413/console ) and the target is run and it crashes for the error in protobuf I mentioned before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:124,deployability,build,build,124,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:139,deployability,fail,failed,139,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:312,deployability,fail,fail,312,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:320,deployability,build,build,320,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:246,energy efficiency,alloc,alloc,246,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:139,reliability,fail,failed,139,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:312,reliability,fail,fail,312,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:252,safety,except,exception,252,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:57,usability,command,command,57,"I don't see the line. ```. [10689/11146] Running utility command for `SofieCompileModels_ONNX`. ```. in your output, so the build probably failed before reaching that point. The fact is that `emitFromONNX` is either having a SEGV or throws a bad alloc exception, which causes target `SofieCompileModels_ONNX` to fail to build in any case. As I said, I did not touch anywhere the PCH generation, libCore was built fine. Once this problem is fixed I can rebase my changes on top.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:138,availability,error,error,138,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:38,deployability,build,builds,38,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:177,deployability,depend,dependency,177,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:177,integrability,depend,dependency,177,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:177,modifiability,depend,dependency,177,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:138,performance,error,error,138,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:138,safety,error,error,138,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:177,safety,depend,dependency,177,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:177,testability,depend,dependency,177,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:138,usability,error,error,138,"Actually I don't see this line in any builds. . Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:687,availability,error,error,687,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:826,availability,error,error,826,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:963,availability,fault,fault,963,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:151,deployability,depend,dependency,151,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:214,deployability,build,build,214,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:248,deployability,build,build,248,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:254,deployability,build,build,254,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:342,deployability,build,build,342,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:376,deployability,build,build,376,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:382,deployability,build,build,382,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:607,deployability,build,build,607,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:641,deployability,build,build,641,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:647,deployability,build,build,647,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:723,deployability,build,build,723,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:757,deployability,build,build,757,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:763,deployability,build,build,763,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:848,deployability,build,build,848,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:882,deployability,build,build,882,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:888,deployability,build,build,888,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:927,deployability,modul,module,927,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:114,energy efficiency,current,current,114,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:520,energy efficiency,core,core,520,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:963,energy efficiency,fault,fault,963,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:970,energy efficiency,core,core,970,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:151,integrability,depend,dependency,151,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:151,modifiability,depend,dependency,151,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:927,modifiability,modul,module,927,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:687,performance,error,error,687,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:826,performance,error,error,826,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:963,performance,fault,fault,963,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:1139,performance,I/O,I/O,1139,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:963,reliability,fault,fault,963,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:17,safety,test,tested,17,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,safety,test,test,59,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:151,safety,depend,dependency,151,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:271,safety,test,test,271,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:399,safety,test,test,399,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:664,safety,test,test,664,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:687,safety,error,error,687,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:826,safety,error,error,826,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:927,safety,modul,module,927,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:963,safety,fault,fault,963,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:17,testability,test,tested,17,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,testability,test,test,59,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:151,testability,depend,dependency,151,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:271,testability,test,test,271,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:399,testability,test,test,399,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:664,testability,test,test,664,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:1033,testability,understand,understand,1033,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:1102,testability,simpl,simple,1102,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:687,usability,error,error,687,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:826,usability,error,error,826,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:1102,usability,simpl,simple,1102,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. . With the current master, I don't have the PCH dependency and I have : . ```. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch. sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. with your PR I have instead: . ```. sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX . error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'. fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found. Segmentation fault (core dumped). ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:451,availability,sli,slightly,451,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:22,deployability,build,build,22,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:91,deployability,stack,stack,91,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:134,deployability,depend,dependencies,134,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:239,deployability,depend,dependency,239,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:418,deployability,build,build,418,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:718,deployability,upgrad,upgrade,718,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:180,energy efficiency,load,load,180,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:134,integrability,depend,dependencies,134,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:239,integrability,depend,dependency,239,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:134,modifiability,depend,dependencies,134,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:239,modifiability,depend,dependency,239,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:718,modifiability,upgrad,upgrade,718,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:180,performance,load,load,180,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:427,performance,parallel,parallel,427,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:661,performance,time,times,661,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:789,performance,time,time,789,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:451,reliability,sli,slightly,451,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:134,safety,depend,dependencies,134,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:154,safety,test,test,154,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:239,safety,depend,dependency,239,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:275,safety,test,test,275,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:377,safety,test,test,377,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:514,safety,test,tests,514,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:553,safety,test,test,553,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:640,safety,test,tests,640,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:97,testability,trace,trace,97,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:134,testability,depend,dependencies,134,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:154,testability,test,test,154,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:239,testability,depend,dependency,239,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:275,testability,test,test,275,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:377,testability,test,test,377,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:514,testability,test,tests,514,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:553,testability,test,test,553,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:640,testability,test,tests,640,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:133,performance,I/O,I/O,133,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:114,safety,test,test,114,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:278,safety,test,test,278,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:72,testability,understand,understand,72,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:114,testability,test,test,114,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:278,testability,test,test,278,"I am sorry for this, nothing against your changes, I would like just to understand what is happening. . The other test uses the ROOT I/O so in that case it is expected that the PCH is needed. . I wil try what you suggest and also on a different node (e.g. ubuntu2004) where the test works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,availability,servic,services,106,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:289,availability,error,error,289,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:26,deployability,build,build,26,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,deployability,depend,dependency,59,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,deployability,servic,services,106,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:158,deployability,build,build,158,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,integrability,depend,dependency,59,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,integrability,servic,services,106,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:229,interoperability,platform,platform,229,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,modifiability,depend,dependency,59,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:106,modifiability,servic,services,106,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:289,performance,error,error,289,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,safety,depend,dependency,59,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:289,safety,error,error,289,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:59,testability,depend,dependency,59,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:289,usability,error,error,289,I see that the ubuntu2004 build works fine without the PCH dependency. . See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. . Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10690:75,deployability,build,build,75,Commit a74454ae2db9975148d9d4826d7700446b90080e broke the AddressSanitizer build - a fix is in https://github.com/root-project/root/pull/12128,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10690
https://github.com/root-project/root/pull/10692:65,availability,servic,service,65,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/pull/10692:65,deployability,servic,service,65,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/pull/10692:65,integrability,servic,service,65,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/pull/10692:65,modifiability,servic,service,65,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/pull/10692:29,safety,test,tested,29,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/pull/10692:29,testability,test,tested,29,+1. Thank you Sergey! I have tested the changes in Fireworks web service.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10692
https://github.com/root-project/root/issues/10693:50,usability,close,closed,50,@vgvassilev is this still an issue or can this be closed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10693
https://github.com/root-project/root/pull/10694:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10694
https://github.com/root-project/root/pull/10694:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10694
https://github.com/root-project/root/pull/10694:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10694
https://github.com/root-project/root/pull/10696:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:766,availability,state,state,766,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:162,deployability,fail,failing,162,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:514,deployability,unload,unloaded,514,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:572,deployability,unload,unloaded,572,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:152,energy efficiency,current,currently,152,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:766,integrability,state,state,766,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:162,reliability,fail,failing,162,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:146,safety,test,tests,146,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:661,safety,reme,remember,661,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:146,testability,test,tests,146,"Some random comments:. This might behave differently in the llvm13 branch. But until we really know how llvm13 deals with symbols (i.e. until all tests currently failing with missing symbols are fixed) I find it courageous to do a change like this one, unless we know **why** this facility is not needed anymore. Here the reason seemed mostly heuristic, iiuc? I'd propose to shelves this, and get back to it once llvm13 is merged. IURC, this facility here is used in the case where a symbol gets emittedv and then unloaded. If the symbol was actually defined _before_ the unloaded transaction (because it was determined to be a deferred symbol) then we need to remember that we _could_ emit it again, we need to put it back into ""deferred, might want to emit later"" state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:145,availability,failur,failures,145,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:5,deployability,patch,patch,5,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:120,deployability,unload,unloading,120,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:145,deployability,fail,failures,145,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:219,deployability,build,build,219,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:145,performance,failur,failures,145,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:145,reliability,fail,failures,145,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:5,safety,patch,patch,5,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:88,safety,review,review,88,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:140,safety,test,test,140,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:238,safety,test,test,238,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:5,security,patch,patch,5,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:67,testability,understand,understand,67,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:88,testability,review,review,88,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:140,testability,test,test,140,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:238,testability,test,test,238,"This patch is to find out why this is still needed as we could not understand (see phab review). If this was mostly for unloading, then the test failures are telling us we might need this for something else. We want to build a clang-repl test out of that something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:50,availability,failur,failures,50,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:25,deployability,unload,unloading,25,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:50,deployability,fail,failures,50,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:147,deployability,unload,unloading,147,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:50,performance,failur,failures,50,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:138,performance,perform,performs,138,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:50,reliability,fail,failures,50,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:45,safety,test,test,45,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:168,safety,test,tests,168,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:45,testability,test,test,45,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:168,testability,test,tests,168,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:138,usability,perform,performs,138,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10696:119,usability,close,close,119,"The upstream work has landed in https://github.com/llvm/llvm-project/commit/8082a00286380d0dafa05bfe5ddfe6075b9769f9 , close it now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10696
https://github.com/root-project/root/pull/10698:54,interoperability,format,format,54,"Hi, . Can you just remove the big commit of the clang-format and apply just the first two ? . We can apply later after all modifications we are doing now to the code. I think that one is causing the conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10698:199,interoperability,conflict,conflicts,199,"Hi, . Can you just remove the big commit of the clang-format and apply just the first two ? . We can apply later after all modifications we are doing now to the code. I think that one is causing the conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10698:123,security,modif,modifications,123,"Hi, . Can you just remove the big commit of the clang-format and apply just the first two ? . We can apply later after all modifications we are doing now to the code. I think that one is causing the conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10698:34,interoperability,format,format,34,@lmoneta I have removed the clang-format commit and I fixed the merge conflicts. Now the PR is ready to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10698:70,interoperability,conflict,conflicts,70,@lmoneta I have removed the clang-format commit and I fixed the merge conflicts. Now the PR is ready to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10698:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10698
https://github.com/root-project/root/pull/10699:35,safety,test,test,35,@vepadulano the last commit adds a test and a fix for Tommaso's issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10699
https://github.com/root-project/root/pull/10699:35,testability,test,test,35,@vepadulano the last commit adds a test and a fix for Tommaso's issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10699
https://github.com/root-project/root/pull/10703:16,deployability,patch,patch,16,"Thanks for your patch, @chilikink !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:16,safety,patch,patch,16,"Thanks for your patch, @chilikink !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:16,security,patch,patch,16,"Thanks for your patch, @chilikink !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:48,availability,servic,services,48,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:252,availability,error,error,252,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:265,availability,error,error,265,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:314,availability,servic,services,314,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:48,deployability,servic,services,48,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:100,deployability,build,build,100,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:178,deployability,build,build,178,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:231,deployability,contain,containing,231,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:314,deployability,servic,services,314,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:366,deployability,build,build,366,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:400,deployability,fail,failed,400,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:407,deployability,build,build,407,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:48,integrability,servic,services,48,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:314,integrability,servic,services,314,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:48,modifiability,servic,services,48,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:314,modifiability,servic,services,314,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:252,performance,error,error,252,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:265,performance,error,error,265,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:400,reliability,fail,failed,400,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:252,safety,error,error,252,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:265,safety,error,error,265,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:276,safety,test,tests,276,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:379,safety,test,testReport,379,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:276,testability,test,tests,276,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:379,testability,test,testReport,379,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:252,usability,error,error,252,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10703:265,usability,error,error,265,"From the [parsed console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/parsed_console/) as well as the comment above, it seems that the build system recognized the pull-request description containing the word ""error"" as an error. The tests are [successful](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146768/testReport/) for the failed build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10703
https://github.com/root-project/root/pull/10705:181,availability,error,error,181,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:422,availability,avail,available,422,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:332,deployability,patch,patch,332,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:187,integrability,messag,message,187,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:499,integrability,messag,message,499,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:187,interoperability,messag,message,187,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:499,interoperability,messag,message,499,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:146,performance,cach,cached,146,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:181,performance,error,error,181,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:422,reliability,availab,available,422,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:181,safety,error,error,181,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:332,safety,patch,patch,332,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:422,safety,avail,available,422,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:332,security,patch,patch,332,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:422,security,availab,available,422,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:181,usability,error,error,181,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:196,availability,error,error,196,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:437,availability,avail,available,437,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:622,availability,error,error,622,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:347,deployability,patch,patch,347,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:202,integrability,messag,message,202,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:520,integrability,messag,message,520,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:628,integrability,messag,message,628,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:202,interoperability,messag,message,202,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:520,interoperability,messag,message,520,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:628,interoperability,messag,message,628,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:159,performance,cach,cached,159,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:196,performance,error,error,196,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:622,performance,error,error,622,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:437,reliability,availab,available,437,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:196,safety,error,error,196,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:347,safety,patch,patch,347,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:437,safety,avail,available,437,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:622,safety,error,error,622,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:347,security,patch,patch,347,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:437,security,availab,available,437,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:196,usability,error,error,196,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:614,usability,clear,clearer,614,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10705:622,usability,error,error,622,"@en. > Hi Ivan, thank you, I have some doubts about the changes:. > . > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call. > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". > . > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10705
https://github.com/root-project/root/pull/10713:45,interoperability,format,format,45,great! note that clang complains on the test format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10713
https://github.com/root-project/root/pull/10713:23,safety,compl,complains,23,great! note that clang complains on the test format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10713
https://github.com/root-project/root/pull/10713:40,safety,test,test,40,great! note that clang complains on the test format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10713
https://github.com/root-project/root/pull/10713:23,security,compl,complains,23,great! note that clang complains on the test format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10713
https://github.com/root-project/root/pull/10713:40,testability,test,test,40,great! note that clang complains on the test format.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10713
https://github.com/root-project/root/pull/10715:75,safety,test,tested,75,"In a second, I am checking if there is other place which makes sense to be tested in MT as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:75,testability,test,tested,75,"In a second, I am checking if there is other place which makes sense to be tested in MT as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2334,integrability,event,event,2334,"DFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2556,integrability,event,event,2556,"return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4586,integrability,pub,public,4586,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1492,interoperability,incompatib,incompatible,1492,"EST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:85,safety,test,test,85,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:126,safety,test,test,126,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:209,safety,test,test,209,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:255,safety,test,test,255,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:356,safety,TEST,TEST,356,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:497,safety,TEST,TEST,497,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:563,safety,TEST,TEST,563,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:743,safety,TEST,TEST,743,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:808,safety,TEST,TEST,808,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1086,safety,TEST,TEST,1086,"t/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1150,safety,except,exceptions,1150,"x 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1331,safety,TEST,TEST,1331,"::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1596,safety,TEST,TEST,1596,"n). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1673,safety,TEST,TEST,1673,"0).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1857,safety,TEST,TEST,1857," +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, Variation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1925,safety,TEST,TEST,1925,"= ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2182,safety,TEST,TEST,2182,"problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2628,safety,TEST,TEST,2628,"eConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2836,safety,TEST,TEST,2836,"@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIterati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2919,safety,TEST,TEST,2919," . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3125,safety,TEST,TEST,3125,"{}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3240,safety,TEST,TEST,3240,"error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3469,safety,TEST,TEST,3469,"ncy()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3597,safety,TEST,TEST,3597,"(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3637,safety,TEST,TEST,3637,"y, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3728,safety,TEST,TEST,3728,"OT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3808,safety,TEST,TEST,3808,"x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4104,safety,TEST,TEST,4104,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4339,safety,TEST,TEST,4339,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4648,safety,TEST,TEST,4648,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4905,safety,TEST,TEST,4905,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:85,testability,test,test,85,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:126,testability,test,test,126,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:209,testability,test,test,209,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:255,testability,test,test,255,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:303,testability,Simpl,SimpleVariation,303,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:356,testability,TEST,TEST,356,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:497,testability,TEST,TEST,497,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:563,testability,TEST,TEST,563,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:743,testability,TEST,TEST,743,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:808,testability,TEST,TEST,808,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1086,testability,TEST,TEST,1086,"t/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1331,testability,TEST,TEST,1331,"::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1596,testability,TEST,TEST,1596,"n). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1673,testability,TEST,TEST,1673,"0).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1857,testability,TEST,TEST,1857," +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, Variation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:1925,testability,TEST,TEST,1925,"= ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2110,testability,Simpl,SimpleVariation,2110,"aveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +25",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2182,testability,TEST,TEST,2182,"problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2628,testability,TEST,TEST,2628,"eConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2836,testability,TEST,TEST,2836,"@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIterati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2919,testability,TEST,TEST,2919," . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3125,testability,TEST,TEST,3125,"{}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3240,testability,TEST,TEST,3240,"error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3424,testability,Simpl,SimpleVariation,3424,":min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3469,testability,TEST,TEST,3469,"ncy()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3597,testability,TEST,TEST,3597,"(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3637,testability,TEST,TEST,3637,"y, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3728,testability,TEST,TEST,3728,"OT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3808,testability,TEST,TEST,3808,"x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3955,testability,Simpl,SimpleVariation,3955,". +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4104,testability,TEST,TEST,4104,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4339,testability,TEST,TEST,4339,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4490,testability,Simpl,SimpleVariation,4490,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4648,testability,TEST,TEST,4648,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4905,testability,TEST,TEST,4905,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:303,usability,Simpl,SimpleVariation,303,"On some other place IMT could be used as well:. ```diff. diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx. index 92ac2c8c67..12451030af 100644. --- a/tree/dataframe/test/dataframe_vary.cxx. +++ b/tree/dataframe/test/dataframe_vary.cxx. @@ -31,7 +31,7 @@ auto SimpleVariation(). return ROOT::RVecI{-1, 2};. }. . -TEST(RDFVary, RequireExistingColumn). +TEST_P(RDFVary, RequireExistingColumn). {. ROOT::RDataFrame df(10);. EXPECT_THROW(. @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn). std::runtime_error);. }. . -TEST(RDFVary, VaryTwiceTheSameColumn). +TEST_P(RDFVary, VaryTwiceTheSameColumn). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn). std::logic_error);. }. . -TEST(RDFVary, RequireVariationsHaveConsistentType). +TEST_P(RDFVary, RequireVariationsHaveConsistentType). {. auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. // x is float, variation expression cannot return RVec<int>, must be RVec<float>. @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:2110,usability,Simpl,SimpleVariation,2110,"aveConsistentType). // throwing exceptions from jitted code cause problems on windows and MacOS+M1. #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS). #if !(defined(R__MACOSX) && defined(__arm64__)). -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted). {. // non-jitted Define, jitted Vary with incompatible type. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });. @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted). #endif. #endif. . -TEST(RDFVary, RequireReturnTypeIsRVec). +TEST_P(RDFVary, RequireReturnTypeIsRVec). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. EXPECT_THROW(. @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec). std::runtime_error);. }. . -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +25",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3424,usability,Simpl,SimpleVariation,3424,":min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. . -TEST(RDFVary, VariationsForDoesNotTriggerRun). +TEST_P(RDFVary, VariationsForDoesNotTriggerRun). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun). EXPECT_EQ(df.GetNRuns(), 0);. }. . -TEST(RDFVary, VariationsForWithNoVariations). +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:3955,usability,Simpl,SimpleVariation,3955,". +TEST_P(RDFVary, VariationsForWithNoVariations). {. ROOT::RDataFrame df(10);. auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:4490,usability,Simpl,SimpleVariation,4490,""", [] { return 1; }).Histo1D<int>(""x"");. @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations). EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});. }. . -TEST(RDFVary, GetVariations). +TEST_P(RDFVary, GetVariations). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });. auto df2 = df.Vary(""x"", SimpleVariation, {}, 2). @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations). ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");. }. . -TEST(RDataFrameInterface, VaryFriend). +TEST(RDFVary, VaryFriend). {. int x = 0;. TTree main(""main"", ""main"");. @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend). EXPECT_EQ(sum2vars[""var:0""], 43);. }. . -TEST(RDFVary, ResultMapIteration). +TEST_P(RDFVary, ResultMapIteration). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);. auto s = df.Sum<int>(""x"");. @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample). EXPECT_EQ(ss[""x:1""], 2 * 10);. }. . -TEST(RDFVary, SaveGraph). +TEST_P(RDFVary, SaveGraph). {. ROOT::RDataFrame df(1);. auto c = df.Define(""x"", [] { return 0; }). @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations). EXPECT_EQ(sums[""yshift:low""], 410);. }. . -TEST(RDFVary, VaryAndAlias). +TEST_P(RDFVary, VaryAndAlias). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);. auto s1 = df.Sum<int>(""y"");. @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {. }. };. . -TEST(RDFVary, VaryBook). +TEST_P(RDFVary, VaryBook). {. auto d = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles). EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);. }. . -TEST(RDFVary, VaryReduce). +TEST_P(RDFVary, VaryReduce). {. auto h = ROOT::RDataFrame(10). .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:36,deployability,version,version,36,I think the only tests where the MT version would actually exercise different code paths are VaryBook and VaryReduce -- I added those. For all others I don't think it makes a difference?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:36,integrability,version,version,36,I think the only tests where the MT version would actually exercise different code paths are VaryBook and VaryReduce -- I added those. For all others I don't think it makes a difference?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:36,modifiability,version,version,36,I think the only tests where the MT version would actually exercise different code paths are VaryBook and VaryReduce -- I added those. For all others I don't think it makes a difference?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:17,safety,test,tests,17,I think the only tests where the MT version would actually exercise different code paths are VaryBook and VaryReduce -- I added those. For all others I don't think it makes a difference?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:17,testability,test,tests,17,I think the only tests where the MT version would actually exercise different code paths are VaryBook and VaryReduce -- I added those. For all others I don't think it makes a difference?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:444,integrability,event,event,444,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:666,integrability,event,event,666,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:35,safety,TEST,TEST,35,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:292,safety,TEST,TEST,292,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:35,testability,TEST,TEST,35,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:220,testability,Simpl,SimpleVariation,220,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:292,testability,TEST,TEST,292,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:220,usability,Simpl,SimpleVariation,220,"Maybe this one as well:. ```diff. -TEST(RDFVary, RequireNVariationsIsConsistent). +TEST_P(RDFVary, RequireNVariationsIsConsistent). {. auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });. auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");. @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent). std::runtime_error);. . std::cerr.rdbuf(oldCerrStreamBuf);. - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");. + std::string msg;. + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;. + for (auto i = 0u; i < nRepetitions; ++i). + msg += ""RDataFrame::Run: event loop was interrupted\n"";. + EXPECT_EQ(strCerr.str(), msg);. }. ```. For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:61,availability,error,error,61,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:191,availability,error,error,191,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:97,deployability,depend,depend,97,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:97,integrability,depend,depend,97,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:197,integrability,messag,message,197,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:197,interoperability,messag,message,197,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:97,modifiability,depend,depend,97,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:61,performance,error,error,61,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:191,performance,error,error,191,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:215,performance,time,times,215,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:15,safety,test,tests,15,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:25,safety,test,testing,25,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:61,safety,error,error,61,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:97,safety,depend,depend,97,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:191,safety,error,error,191,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:15,testability,test,tests,15,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:25,testability,test,testing,25,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:97,testability,depend,depend,97,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:61,usability,error,error,61,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10715:191,usability,error,error,191,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10715
https://github.com/root-project/root/pull/10720:242,usability,feedback,feedback,242,"> Very nice! A few nits, in particular whole line comments in the code should use the `//` style (which makes it easier to comment blocks including comments with `/* */`). > . > I leave the final approval up to @jalopezg-r00t. Thanks for the feedback and suggestions, @jblomer! Block comments will be used more judiciously from now on :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10720
https://github.com/root-project/root/pull/10720:140,usability,feedback,feedback,140,"> Thanks! Very nice work, @glmiotto :slightly_smiling_face:! > . > I have added some comments that we have to address before merging. Great feedback @jalopezg-r00t, thanks as always! I'll get right on it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10720
https://github.com/root-project/root/pull/10720:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10720
https://github.com/root-project/root/pull/10720:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10720
https://github.com/root-project/root/pull/10720:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10720
https://github.com/root-project/root/pull/10721:24,deployability,stack,stacktrace,24,"Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:99,reliability,doe,doesn,99,"Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:71,testability,simpl,simple,71,"Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:71,usability,simpl,simple,71,"Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:156,availability,error,error,156,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:26,deployability,stack,stacktrace,26,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:156,performance,error,error,156,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:101,reliability,doe,doesn,101,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:156,safety,error,error,156,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:73,testability,simpl,simple,73,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:73,usability,simpl,simple,73,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/pull/10721:156,usability,error,error,156,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10721
https://github.com/root-project/root/issues/10722:11,usability,user,user,11,That's the user's guide... it is deprecated ... you should not use it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:18,usability,guid,guide,18,That's the user's guide... it is deprecated ... you should not use it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:163,availability,error,error-in-thisroot-csh-during-installation,163,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:192,deployability,instal,installation,192,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:163,performance,error,error-in-thisroot-csh-during-installation,163,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:163,safety,error,error-in-thisroot-csh-during-installation,163,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:13,usability,user,user,13,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:20,usability,guid,guide,20,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:106,usability,user,users,106,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:163,usability,error,error-in-thisroot-csh-during-installation,163,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:97,usability,User,Users,97,"By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:103,usability,Guid,Guide,103,"By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:99,usability,User,Users,99,"> By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide. Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. ![image](https://user-images.githubusercontent.com/10653970/172875715-28ccea27-c989-4658-80e8-7ef7bcb437ea.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:105,usability,Guid,Guide,105,"> By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide. Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. ![image](https://user-images.githubusercontent.com/10653970/172875715-28ccea27-c989-4658-80e8-7ef7bcb437ea.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:216,usability,user,users,216,"> By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide. Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. ![image](https://user-images.githubusercontent.com/10653970/172875715-28ccea27-c989-4658-80e8-7ef7bcb437ea.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:222,usability,guid,guide,222,"> By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide. Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. ![image](https://user-images.githubusercontent.com/10653970/172875715-28ccea27-c989-4658-80e8-7ef7bcb437ea.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:246,usability,user,user-images,246,"> By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide. Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. ![image](https://user-images.githubusercontent.com/10653970/172875715-28ccea27-c989-4658-80e8-7ef7bcb437ea.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:106,usability,user,users,106,"> Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. We need to watermark them in that case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10722:112,usability,guid,guide,112,"> Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. We need to watermark them in that case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10722
https://github.com/root-project/root/issues/10724:0,energy efficiency,Current,Currently,0,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:104,energy efficiency,core,core,104,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:29,reliability,doe,does,29,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:135,reliability,pra,pragma,135,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:184,reliability,pra,pragma,184,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:234,reliability,pra,pragma,234,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:285,reliability,pra,pragma,285,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:333,reliability,pra,pragma,333,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:382,reliability,pra,pragma,382,Currently `TParameter<char>` does not have a provided dictionary:. ```. $ rg -g \*LinkDef\* TParameter. core/base/inc/LinkDef3.h. 266:#pragma link C++ class TParameter<Bool_t>+;. 267:#pragma link C++ class TParameter<Float_t>+;. 268:#pragma link C++ class TParameter<Double_t>+;. 269:#pragma link C++ class TParameter<Int_t>+;. 270:#pragma link C++ class TParameter<Long_t>+;. 271:#pragma link C++ class TParameter<Long64_t>+;. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:58,safety,avoid,avoid,58,"I don't think that's relevant to the issue :-) I tried to avoid any type that might have been instantiated already somewhere else, and with `TParameter<char>` I was positive that's not the case. You could also try with `std::vector<TObject******>` - if that had an `enum` member :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:244,energy efficiency,load,load,244,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:487,energy efficiency,load,load,487,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:267,interoperability,share,shared,267,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:510,interoperability,share,shared,510,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:244,performance,load,load,244,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:487,performance,load,load,487,This is now. ```. IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Streamer(TBuffer&). Maybe you need to load the corresponding shared library? IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'! You are probably missing the definition of TParameter<char>::Class(). Maybe you need to load the corresponding shared library? ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:188,deployability,build,build,188,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:404,integrability,interfac,interface,404,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:404,interoperability,interfac,interface,404,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:404,modifiability,interfac,interface,404,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:278,reliability,pra,practically,278,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:377,reliability,doe,does,377,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:82,safety,input,input,82,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/issues/10724:82,usability,input,input,82,"```. #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, . input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false). at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840. ```. That's practically the same area as https://github.com/root-project/root/pull/14287 For some reason cppyy does not go via the offset interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10724
https://github.com/root-project/root/pull/10725:295,availability,down,downloading,295,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:45,deployability,version,version,45,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:248,deployability,version,version,248,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:45,integrability,version,version,45,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:200,integrability,rout,routinely,200,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:248,integrability,version,version,248,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:45,modifiability,version,version,45,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:248,modifiability,version,version,248,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:29,safety,test,test,29,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:132,security,checksum,checksum,132,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:29,testability,test,test,29,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:348,availability,down,downloading,348,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:47,deployability,version,version,47,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:301,deployability,version,version,301,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:47,integrability,version,version,47,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:253,integrability,rout,routinely,253,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:301,integrability,version,version,301,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:47,modifiability,version,version,47,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:301,modifiability,version,version,301,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:31,safety,test,test,31,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:185,security,checksum,checksum,185,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:31,testability,test,test,31,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this? > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:75,security,hash,hash,75,"The file has arrived on lcgpackages, with the following name and unchanged hash:. ```. $ sha256sum xrootd-5.4.3.tar.gz. 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:343,availability,failur,failures,343,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:240,deployability,updat,update,240,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:343,deployability,fail,failures,343,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:389,modifiability,concern,concerned,389,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:343,performance,failur,failures,343,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:343,reliability,fail,failures,343,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:240,safety,updat,update,240,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:338,safety,test,test,338,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:77,security,hash,hash,77,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:240,security,updat,update,240,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:338,testability,test,test,338,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:389,testability,concern,concerned,389,"> The file has arrived on lcgpackages, with the following name and unchanged hash:. > . > ```. > $ sha256sum xrootd-5.4.3.tar.gz. > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz. > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:28,availability,failur,failure,28,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:28,deployability,fail,failure,28,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:99,deployability,version,version,99,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:99,integrability,version,version,99,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:99,modifiability,version,version,99,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:28,performance,failur,failure,28,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:28,reliability,fail,failure,28,"Uh, certainly an unexpected failure, but I'd be surprised if it has anything to do with the xrootd version. I hope it was just a transient blip, let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/pull/10725:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10725
https://github.com/root-project/root/issues/10727:114,energy efficiency,core,core,114,"@SergueiEK can you try with something like this:. ```. <script src=""https://root.cern.ch/js/latest/scripts/JSRoot.core.js"" crossorigin=""anonymous""></script>. ```. i.e. adding `crossorigin=""anonymous""`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:322,deployability,modul,modules,322,"Which web browser you are using? On which server? I do not see problem: https://jsroot.gsi.de/files/tmp/bug.html. If you migrating from JSROOT v6 to v7, please read:. https://github.com/root-project/jsroot/blob/master/docs/JSROOT.md#migration-v6---v7. `JSRoot.core.js` kept only for backward compatibility, one should use modules instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:260,energy efficiency,core,core,260,"Which web browser you are using? On which server? I do not see problem: https://jsroot.gsi.de/files/tmp/bug.html. If you migrating from JSROOT v6 to v7, please read:. https://github.com/root-project/jsroot/blob/master/docs/JSROOT.md#migration-v6---v7. `JSRoot.core.js` kept only for backward compatibility, one should use modules instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:292,interoperability,compatib,compatibility,292,"Which web browser you are using? On which server? I do not see problem: https://jsroot.gsi.de/files/tmp/bug.html. If you migrating from JSROOT v6 to v7, please read:. https://github.com/root-project/jsroot/blob/master/docs/JSROOT.md#migration-v6---v7. `JSRoot.core.js` kept only for backward compatibility, one should use modules instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:322,modifiability,modul,modules,322,"Which web browser you are using? On which server? I do not see problem: https://jsroot.gsi.de/files/tmp/bug.html. If you migrating from JSROOT v6 to v7, please read:. https://github.com/root-project/jsroot/blob/master/docs/JSROOT.md#migration-v6---v7. `JSRoot.core.js` kept only for backward compatibility, one should use modules instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:322,safety,modul,modules,322,"Which web browser you are using? On which server? I do not see problem: https://jsroot.gsi.de/files/tmp/bug.html. If you migrating from JSROOT v6 to v7, please read:. https://github.com/root-project/jsroot/blob/master/docs/JSROOT.md#migration-v6---v7. `JSRoot.core.js` kept only for backward compatibility, one should use modules instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:22,availability,error,error,22,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:114,deployability,Fail,Failed,114,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:132,deployability,modul,module,132,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:153,deployability,modul,modules,153,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:161,energy efficiency,core,core,161,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:270,energy efficiency,core,core,270,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:296,energy efficiency,core,core,296,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:320,energy efficiency,core,core,320,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:139,interoperability,specif,specifier,139,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:132,modifiability,modul,module,132,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:153,modifiability,modul,modules,153,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:22,performance,error,error,22,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:114,reliability,Fail,Failed,114,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:22,safety,error,error,22,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:132,safety,modul,module,132,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:153,safety,modul,modules,153,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:22,usability,error,error,22,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:. ```. Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script. at JSRoot.core.js:325:21. at JSRoot.core.js:3:77. at JSRoot.core.js:5:3. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:295,deployability,version,version,295,"Thank you for the suggestion. Adding crossorigin=""anonymous"" fixed the problem. . Without this attribute the https://jsroot.gsi.de/files/tmp/bug.html page produced the same problem as I had originally reported. I'm using Google Chrome 102 on MacOS BigSur 11.6.4. However once I had the new ROOT version working I have immediately faced another problem. The code that I have been using so far to set default draw option to ""lego2"" in JSROOT.HierarchyPainter, has stopped working. This code was suggested to me in this forum last year and it did the trick in the following way:. ```. JSROOT.require('hierarchy').then(() => {. let h = new JSROOT.HierarchyPainter(""opmon"", tree);. . h._display = h.display;. h.display = function(itemname, opt) {. if (!opt) opt = ""lego2"";. this._display(itemname, opt);. }. ... ```. Can I do the same with v7? Cheers,. Serguei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:407,energy efficiency,draw,draw,407,"Thank you for the suggestion. Adding crossorigin=""anonymous"" fixed the problem. . Without this attribute the https://jsroot.gsi.de/files/tmp/bug.html page produced the same problem as I had originally reported. I'm using Google Chrome 102 on MacOS BigSur 11.6.4. However once I had the new ROOT version working I have immediately faced another problem. The code that I have been using so far to set default draw option to ""lego2"" in JSROOT.HierarchyPainter, has stopped working. This code was suggested to me in this forum last year and it did the trick in the following way:. ```. JSROOT.require('hierarchy').then(() => {. let h = new JSROOT.HierarchyPainter(""opmon"", tree);. . h._display = h.display;. h.display = function(itemname, opt) {. if (!opt) opt = ""lego2"";. this._display(itemname, opt);. }. ... ```. Can I do the same with v7? Cheers,. Serguei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:295,integrability,version,version,295,"Thank you for the suggestion. Adding crossorigin=""anonymous"" fixed the problem. . Without this attribute the https://jsroot.gsi.de/files/tmp/bug.html page produced the same problem as I had originally reported. I'm using Google Chrome 102 on MacOS BigSur 11.6.4. However once I had the new ROOT version working I have immediately faced another problem. The code that I have been using so far to set default draw option to ""lego2"" in JSROOT.HierarchyPainter, has stopped working. This code was suggested to me in this forum last year and it did the trick in the following way:. ```. JSROOT.require('hierarchy').then(() => {. let h = new JSROOT.HierarchyPainter(""opmon"", tree);. . h._display = h.display;. h.display = function(itemname, opt) {. if (!opt) opt = ""lego2"";. this._display(itemname, opt);. }. ... ```. Can I do the same with v7? Cheers,. Serguei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:295,modifiability,version,version,295,"Thank you for the suggestion. Adding crossorigin=""anonymous"" fixed the problem. . Without this attribute the https://jsroot.gsi.de/files/tmp/bug.html page produced the same problem as I had originally reported. I'm using Google Chrome 102 on MacOS BigSur 11.6.4. However once I had the new ROOT version working I have immediately faced another problem. The code that I have been using so far to set default draw option to ""lego2"" in JSROOT.HierarchyPainter, has stopped working. This code was suggested to me in this forum last year and it did the trick in the following way:. ```. JSROOT.require('hierarchy').then(() => {. let h = new JSROOT.HierarchyPainter(""opmon"", tree);. . h._display = h.display;. h.display = function(itemname, opt) {. if (!opt) opt = ""lego2"";. this._display(itemname, opt);. }. ... ```. Can I do the same with v7? Cheers,. Serguei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:462,usability,stop,stopped,462,"Thank you for the suggestion. Adding crossorigin=""anonymous"" fixed the problem. . Without this attribute the https://jsroot.gsi.de/files/tmp/bug.html page produced the same problem as I had originally reported. I'm using Google Chrome 102 on MacOS BigSur 11.6.4. However once I had the new ROOT version working I have immediately faced another problem. The code that I have been using so far to set default draw option to ""lego2"" in JSROOT.HierarchyPainter, has stopped working. This code was suggested to me in this forum last year and it did the trick in the following way:. ```. JSROOT.require('hierarchy').then(() => {. let h = new JSROOT.HierarchyPainter(""opmon"", tree);. . h._display = h.display;. h.display = function(itemname, opt) {. if (!opt) opt = ""lego2"";. this._display(itemname, opt);. }. ... ```. Can I do the same with v7? Cheers,. Serguei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:27,deployability,manag,management,27,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:53,deployability,modul,modules,53,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:27,energy efficiency,manag,management,27,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:53,modifiability,modul,modules,53,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:27,safety,manag,management,27,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:53,safety,modul,modules,53,v7 has absolutely new code management - based on ES6 modules. Here example how `HierarhcyPainter` should be used:. https://github.com/root-project/jsroot/blob/master/demo/file_hierarchy.htm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:84,availability,servic,service,84,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:301,availability,down,down,301,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:406,availability,down,down,406,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:36,deployability,updat,updated,36,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:65,deployability,modul,modules,65,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:84,deployability,servic,service,84,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:196,energy efficiency,draw,drawn,196,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:325,energy efficiency,draw,draw,325,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:84,integrability,servic,service,84,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:65,modifiability,modul,modules,65,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:84,modifiability,servic,service,84,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:36,safety,updat,updated,36,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:65,safety,modul,modules,65,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:616,safety,compl,completely,616,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:36,security,updat,updated,36,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:616,security,compl,completely,616,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:288,testability,context,context,288,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:306,usability,menu,menu,306,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:411,usability,menu,menu,411,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:464,usability,visual,visualisation,464,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:832,usability,behavi,behaviour,832,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:928,usability,user,user-images,928,"Thank you for the reference. I have updated my JS scripts to use modules and my Web service works fine now with v7. May I ask one more question about axis labels for histograms. If a histogram is drawn as 2D image then I can adjust the color, size and offset of the axis labels using the context drop-down menu. However if I draw 2D histogram as 3D image using the ""lego2"" option then the axis labels drop-down menu still appears but makes no effect on the labels visualisation. None of the selected options works, neither color, not size or offset. The point is that sometimes the labels are so small that they are completely unreadable and it would have been nice to be able to increase the font size. It's also quite annoying that the labels are not aligned to the bins center, but instead are aligned to the bins edges. Is this behaviour expected? Attached image shows the issues. <img width=""1432"" alt=""image"" src=""https://user-images.githubusercontent.com/29973760/173081896-841849be-48ca-4c01-84f0-ff3d6c04673e.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:26,usability,close,close,26,"Ok, thank you again. I'll close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:129,testability,context,context,129,I add support of TAxis attributes for lego plots:. https://jsroot.gsi.de/dev/?json=../files/th2ul.json.gz&opt=lego2. Now most of context menu settings of x/y/z axis should also work. It is in master branch of JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:6,usability,support,support,6,I add support of TAxis attributes for lego plots:. https://jsroot.gsi.de/dev/?json=../files/th2ul.json.gz&opt=lego2. Now most of context menu settings of x/y/z axis should also work. It is in master branch of JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/issues/10727:137,usability,menu,menu,137,I add support of TAxis attributes for lego plots:. https://jsroot.gsi.de/dev/?json=../files/th2ul.json.gz&opt=lego2. Now most of context menu settings of x/y/z axis should also work. It is in master branch of JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10727
https://github.com/root-project/root/pull/10729:31,availability,error,errors,31,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/pull/10729:31,performance,error,errors,31,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/pull/10729:31,safety,error,errors,31,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/pull/10729:16,testability,understand,understand,16,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/pull/10729:31,usability,error,errors,31,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/pull/10729:22,usability,progress,progress,22,"@pcanal nope, work in progress...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10729
https://github.com/root-project/root/issues/10732:52,deployability,build,builds,52,"thanks a lot @lmoneta for fix, I confirm that cmssw builds/runs now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10732
https://github.com/root-project/root/issues/10732:33,usability,confirm,confirm,33,"thanks a lot @lmoneta for fix, I confirm that cmssw builds/runs now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10732
https://github.com/root-project/root/pull/10737:55,integrability,Wrap,WrappedMultiFunction,55,> . The cloning happens only for the internal created `WrappedMultiFunction` not for the user provided object. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10737
https://github.com/root-project/root/pull/10737:89,usability,user,user,89,> . The cloning happens only for the internal created `WrappedMultiFunction` not for the user provided object. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10737
https://github.com/root-project/root/pull/10738:268,deployability,continu,continuous,268,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,deployability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,integrability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,interoperability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,modifiability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:211,reliability,doe,doesn,211,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,reliability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:112,safety,review,reviewer,112,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:224,safety,test,tests,224,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,security,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:336,security,sign,signals,336,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:112,testability,review,reviewer,112,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:224,testability,test,tests,224,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:279,testability,integr,integration,279,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:. - set @vgvassilev (our cpt expert) as reviewer? - assign cpt PRs to @vgvassilev ? - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite). - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar? Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:114,safety,review,reviewer,114,"Hi @Axel-Naumann,. I was able to add the tag and the skip-ci, I was not able to put @vgvassilev as an assignee or reviewer (in my new pull request).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:114,testability,review,reviewer,114,"Hi @Axel-Naumann,. I was able to add the tag and the skip-ci, I was not able to put @vgvassilev as an assignee or reviewer (in my new pull request).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:91,safety,review,reviewer,91,"I did the assignment for this PR; are you saying when you open a new PR you cannot set the reviewer / assignee? Hmm that's silly :-) Fine, if it's not possible we will handle it on our side!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/pull/10738:91,testability,review,reviewer,91,"I did the assignment for this PR; are you saying when you open a new PR you cannot set the reviewer / assignee? Hmm that's silly :-) Fine, if it's not possible we will handle it on our side!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10738
https://github.com/root-project/root/issues/10739:146,deployability,contain,contains,146,"Please see: https://github.com/root-project/root/blob/07f313ed32a34dee2d9f381500fa18848fe164ce/core/cont/inc/TCollectionProxyInfo.h which already contains essentially that. Those templates contains the accelerator functions used to build the CollectionProxy. (And most likely your can write a template to create a collection proxy, see the generated code in the dictionary source file for examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10739
https://github.com/root-project/root/issues/10739:189,deployability,contain,contains,189,"Please see: https://github.com/root-project/root/blob/07f313ed32a34dee2d9f381500fa18848fe164ce/core/cont/inc/TCollectionProxyInfo.h which already contains essentially that. Those templates contains the accelerator functions used to build the CollectionProxy. (And most likely your can write a template to create a collection proxy, see the generated code in the dictionary source file for examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10739
https://github.com/root-project/root/issues/10739:232,deployability,build,build,232,"Please see: https://github.com/root-project/root/blob/07f313ed32a34dee2d9f381500fa18848fe164ce/core/cont/inc/TCollectionProxyInfo.h which already contains essentially that. Those templates contains the accelerator functions used to build the CollectionProxy. (And most likely your can write a template to create a collection proxy, see the generated code in the dictionary source file for examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10739
https://github.com/root-project/root/issues/10739:95,energy efficiency,core,core,95,"Please see: https://github.com/root-project/root/blob/07f313ed32a34dee2d9f381500fa18848fe164ce/core/cont/inc/TCollectionProxyInfo.h which already contains essentially that. Those templates contains the accelerator functions used to build the CollectionProxy. (And most likely your can write a template to create a collection proxy, see the generated code in the dictionary source file for examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10739
https://github.com/root-project/root/issues/10739:325,interoperability,prox,proxy,325,"Please see: https://github.com/root-project/root/blob/07f313ed32a34dee2d9f381500fa18848fe164ce/core/cont/inc/TCollectionProxyInfo.h which already contains essentially that. Those templates contains the accelerator functions used to build the CollectionProxy. (And most likely your can write a template to create a collection proxy, see the generated code in the dictionary source file for examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10739
https://github.com/root-project/root/pull/10740:141,security,sign,signal,141,"Hi! Yes you can see the bug with Carsten's reproducer in the linked issue. It is basically the `hf001` example, but with with this:. ```C++. signal.AddShapeFactor( ""SigXsecOverSM"" );. ```. instead of. ```C++. signal.AddNormFactor( ""SigXsecOverSM"", 1, 0, 3 );. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10740
https://github.com/root-project/root/pull/10740:209,security,sign,signal,209,"Hi! Yes you can see the bug with Carsten's reproducer in the linked issue. It is basically the `hf001` example, but with with this:. ```C++. signal.AddShapeFactor( ""SigXsecOverSM"" );. ```. instead of. ```C++. signal.AddNormFactor( ""SigXsecOverSM"", 1, 0, 3 );. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10740
https://github.com/root-project/root/pull/10740:21,usability,clear,clear,21,"Ok, thank you! It is clear now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10740
https://github.com/root-project/root/issues/10742:50,integrability,protocol,protocols,50,"It is indeed a (unintended) pattern in the remote protocols (class derived from TFile) that the option are not properly passed/stored. For example:. ```. TDavixFile::TDavixFile(const char *url, Option_t *opt, const char *ftitle, Int_t compress) : TFile(url, ""WEB""),. d_ptr(new TDavixFileInternal(fUrl, opt)). {. (void) ftitle;. (void) compress;. Init(kFALSE);. }. ```. where 'opt' is not passed to the `TFile` constructor but only to the internal object. Later the `Init` is (of course) not finding the options. For this case, this could be solved setting `fOption` to opt before calling `Init`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:50,interoperability,protocol,protocols,50,"It is indeed a (unintended) pattern in the remote protocols (class derived from TFile) that the option are not properly passed/stored. For example:. ```. TDavixFile::TDavixFile(const char *url, Option_t *opt, const char *ftitle, Int_t compress) : TFile(url, ""WEB""),. d_ptr(new TDavixFileInternal(fUrl, opt)). {. (void) ftitle;. (void) compress;. Init(kFALSE);. }. ```. where 'opt' is not passed to the `TFile` constructor but only to the internal object. Later the `Init` is (of course) not finding the options. For this case, this could be solved setting `fOption` to opt before calling `Init`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:86,deployability,patch,patch,86,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:1084,performance,parallel,parallelopen,1084,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:1146,performance,parallel,parallelopen,1146,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:1318,performance,parallel,parallelopen,1318,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:1529,performance,parallel,parallelopen,1529,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:86,safety,patch,patch,86,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:86,security,patch,patch,86,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:615,usability,UseR,UseRWLock,615,"@pcanal would this approach make sense or are you thinking of something different? ```patch. diff --git a/io/io/src/TFile.cxx b/io/io/src/TFile.cxx. index 6726c06a54..fc560b3cbf 100644. --- a/io/io/src/TFile.cxx. +++ b/io/io/src/TFile.cxx. @@ -376,13 +376,15 @@ TFile::TFile(const char *fname1, Option_t *option, const char *ftitle, Int_t com. if (fOption == ""NEW""). fOption = ""CREATE"";. - if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"") {. + if (fOption == ""READ_WITHOUT_GLOBALREGISTRATION"" || fOption == ""NET_WITHOUT_GLOBALREGISTRATION"") {. fOption = ""READ"";. fGlobalRegistration = false;. if (fList) {. fList->UseRWLock(false);. }. }. + if (fOption == ""NET_WITHOUT_GLOBALREGISTRATION""). + return;. Bool_t create = (fOption == ""CREATE"") ? kTRUE : kFALSE;. Bool_t recreate = (fOption == ""RECREATE"") ? kTRUE : kFALSE;. diff --git a/net/netxng/src/TNetXNGFile.cxx b/net/netxng/src/TNetXNGFile.cxx. index 6ed079a988..f86e874017 100644. --- a/net/netxng/src/TNetXNGFile.cxx. +++ b/net/netxng/src/TNetXNGFile.cxx. @@ -131,14 +131,11 @@ TNetXNGFile::TNetXNGFile(const char *url,. Bool_t parallelopen) :. TNetXNGFile(url,0,mode,title,compress,netopt,parallelopen){}. -TNetXNGFile::TNetXNGFile(const char *url,. - const char *lurl,. - Option_t *mode,. - const char *title,. - Int_t compress,. - Int_t /*netopt*/,. - Bool_t parallelopen) :. - TFile((lurl ? lurl : url), ""NET"", title, compress). +TNetXNGFile::TNetXNGFile(const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress,. + Int_t /*netopt*/, Bool_t parallelopen). + : TFile((lurl ? lurl : url),. + strcmp(mode, ""READ_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"", title,. + compress). {. using namespace XrdCl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:402,interoperability,registr,registration,402,"Maybe. ```. strstr(mode, ""_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"". ```. and in `TFile.cxx` right after the ` fOption.ToUpper();`:. ```. auto wg_pos = fOption.Index( ""_WITHOUT_GLOBALREGISTRATION"" );. if (wg_pos != TString::kNPOS) {. 	fOption.Remove(wg_pos);. fGlobalRegistration = false;. if (fList) { . fList->UseRWLock(false); . }. }. ```. (i.e. move the without registration section). (this is part motivated that in addtion to NET we need to support WEB).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:348,usability,UseR,UseRWLock,348,"Maybe. ```. strstr(mode, ""_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"". ```. and in `TFile.cxx` right after the ` fOption.ToUpper();`:. ```. auto wg_pos = fOption.Index( ""_WITHOUT_GLOBALREGISTRATION"" );. if (wg_pos != TString::kNPOS) {. 	fOption.Remove(wg_pos);. fGlobalRegistration = false;. if (fList) { . fList->UseRWLock(false); . }. }. ```. (i.e. move the without registration section). (this is part motivated that in addtion to NET we need to support WEB).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10742:483,usability,support,support,483,"Maybe. ```. strstr(mode, ""_WITHOUT_GLOBALREGISTRATION"") == 0 ? ""NET_WITHOUT_GLOBALREGISTRATION"" : ""NET"". ```. and in `TFile.cxx` right after the ` fOption.ToUpper();`:. ```. auto wg_pos = fOption.Index( ""_WITHOUT_GLOBALREGISTRATION"" );. if (wg_pos != TString::kNPOS) {. 	fOption.Remove(wg_pos);. fGlobalRegistration = false;. if (fList) { . fList->UseRWLock(false); . }. }. ```. (i.e. move the without registration section). (this is part motivated that in addtion to NET we need to support WEB).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10742
https://github.com/root-project/root/issues/10743:1546,deployability,modul,module,1546,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:491,energy efficiency,load,loaded,491,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:689,energy efficiency,core,core,689,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:722,energy efficiency,core,core,722,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:797,energy efficiency,core,core,797,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:835,energy efficiency,core,core,835,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:1573,integrability,rout,routine,1573,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:46,interoperability,bind,bindings,46,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:103,interoperability,bind,bindings,103,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:202,interoperability,bind,bindings,202,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:264,interoperability,bind,bindings,264,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:46,modifiability,bind,bindings,46,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:103,modifiability,bind,bindings,103,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:202,modifiability,bind,bindings,202,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:264,modifiability,bind,bindings,264,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:1546,modifiability,modul,module,1546,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:491,performance,load,loaded,491,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:968,safety,prevent,prevents,968,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:1546,safety,modul,module,1546,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:968,security,preven,prevents,968,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:1525,testability,simpl,simply,1525,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:1525,usability,simpl,simply,1525,"With the following changes. ```. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 52d23a6fc3..790432eb3d 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -79,6 +79,7 @@ def cleanup():. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. + print(""Calling EndOfProcessCleanups from __init__.py""). backend.gROOT.EndOfProcessCleanups(). . atexit.register(cleanup). diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx. index 8bdaa03f8d..9a02160611 100644. --- a/core/base/src/TApplication.cxx. +++ b/core/base/src/TApplication.cxx. @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(). // set gROOT in its end-of-life mode which prevents executing code, like. // autoloading libraries (!) that is pointless ... if (gROOT) {. + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";. gROOT->SetBit(kInvalidObject);. gROOT->EndOfProcessCleanups();. }. ```. I get this. ```. $: python -c ""import ROOT"". Calling EndOfProcessCleanups from __init__.py. $: python -c ""import ROOT; ROOT.TH1F"". Calling EndOfProcessCleanups from __init__.py. Calling EndOfProcessCleanups from TApplication. ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:81,reliability,doe,does,81,"The call from `TApplication` always happens after the atexit one, right? Then it does not seem the same call that Enrico reported, also because the latter seemed to be originated in Python. If you gdb `python -c ""import ROOT; ROOT.TH1F""`, do you see also that call that Enrico showed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:58,deployability,stack,stack,58,"Yes, sorry, I wasn't too explicit. I get exactly the same stack frames as Enrico, the one with the cppyy calls refers to the `ackend.gROOT.EndOfProcessCleanups()` in `__init__.py`. I checked this by commenting out that line, which leads me to having only one stacktrace: the second reported by Enrico, the one with `__run_exit_handlers`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/issues/10743:259,deployability,stack,stacktrace,259,"Yes, sorry, I wasn't too explicit. I get exactly the same stack frames as Enrico, the one with the cppyy calls refers to the `ackend.gROOT.EndOfProcessCleanups()` in `__init__.py`. I checked this by commenting out that line, which leads me to having only one stacktrace: the second reported by Enrico, the one with `__run_exit_handlers`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10743
https://github.com/root-project/root/pull/10744:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10744
https://github.com/root-project/root/pull/10746:54,availability,error,error,54,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:11,deployability,build,build,11,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:128,deployability,build,build,128,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:139,deployability,configurat,configuration,139,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:139,integrability,configur,configuration,139,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:139,modifiability,configur,configuration,139,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:54,performance,error,error,54,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:54,safety,error,error,54,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:139,security,configur,configuration,139,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:54,usability,error,error,54,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:93,availability,failur,failure,93,"Okay looks like there is a general problem with the RDataFrame data sources, so the previous failure also didn't relate to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:93,deployability,fail,failure,93,"Okay looks like there is a general problem with the RDataFrame data sources, so the previous failure also didn't relate to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:93,performance,failur,failure,93,"Okay looks like there is a general problem with the RDataFrame data sources, so the previous failure also didn't relate to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10746:93,reliability,fail,failure,93,"Okay looks like there is a general problem with the RDataFrame data sources, so the previous failure also didn't relate to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10746
https://github.com/root-project/root/pull/10747:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10747
https://github.com/root-project/root/issues/10748:217,integrability,batch,batch,217,"~~Hi @Moelf , I think `-X` or `-Y` is required to use graphics. Do things work if you specify those options?~~. Nevermind, I get what you are saying now: with `--web=server:8899` you expect that things should work in batch mode as well :+1: . @Axel-Naumann @linev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:86,interoperability,specif,specify,86,"~~Hi @Moelf , I think `-X` or `-Y` is required to use graphics. Do things work if you specify those options?~~. Nevermind, I get what you are saying now: with `--web=server:8899` you expect that things should work in batch mode as well :+1: . @Axel-Naumann @linev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:217,performance,batch,batch,217,"~~Hi @Moelf , I think `-X` or `-Y` is required to use graphics. Do things work if you specify those options?~~. Nevermind, I get what you are saying now: with `--web=server:8899` you expect that things should work in batch mode as well :+1: . @Axel-Naumann @linev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:43,integrability,batch,batch,43,"Unfortunately, `TBrowser` does not work in batch mode. But one can directly start `RBrowser` like:. ```. root -l --web=server:8899 $ROOTSYS/tutorials/v7/browser.cxx. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:43,performance,batch,batch,43,"Unfortunately, `TBrowser` does not work in batch mode. But one can directly start `RBrowser` like:. ```. root -l --web=server:8899 $ROOTSYS/tutorials/v7/browser.cxx. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:26,reliability,doe,does,26,"Unfortunately, `TBrowser` does not work in batch mode. But one can directly start `RBrowser` like:. ```. root -l --web=server:8899 $ROOTSYS/tutorials/v7/browser.cxx. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:237,safety,compl,complains,237,"I think it's just inconsistency more than anything, when user leaves the `--web` to default and run. ```. TBrowser(). ```. a warning is printed saying by default ROOT uses `RBrowser` now, but somehow it still tries to run `TBrowser` and complains about no X-forwarding.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:237,security,compl,complains,237,"I think it's just inconsistency more than anything, when user leaves the `--web` to default and run. ```. TBrowser(). ```. a warning is printed saying by default ROOT uses `RBrowser` now, but somehow it still tries to run `TBrowser` and complains about no X-forwarding.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:57,usability,user,user,57,"I think it's just inconsistency more than anything, when user leaves the `--web` to default and run. ```. TBrowser(). ```. a warning is printed saying by default ROOT uses `RBrowser` now, but somehow it still tries to run `TBrowser` and complains about no X-forwarding.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:10,deployability,log,logic,10,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:93,integrability,batch,batch,93,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:67,modifiability,variab,variable,67,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:93,performance,batch,batch,93,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:32,reliability,doe,does,32,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:10,safety,log,logic,10,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:10,security,log,logic,10,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:10,testability,log,logic,10,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:83,testability,simpl,simply,83,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:83,usability,simpl,simply,83,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:12,deployability,log,logic,12,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:95,integrability,batch,batch,95,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:69,modifiability,variab,variable,69,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:95,performance,batch,batch,95,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:34,reliability,doe,does,34,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:12,safety,log,logic,12,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:12,security,log,logic,12,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:12,testability,log,logic,12,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:85,testability,simpl,simply,85,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:85,usability,simpl,simply,85,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:43,integrability,batch,batch,43,Mentioned PR will allow to run TBrowser in batch mode if `--web=server:port` argument will be used to start ROOT. Only such combination makes sense to use browser in batch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:166,integrability,batch,batch,166,Mentioned PR will allow to run TBrowser in batch mode if `--web=server:port` argument will be used to start ROOT. Only such combination makes sense to use browser in batch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:43,performance,batch,batch,43,Mentioned PR will allow to run TBrowser in batch mode if `--web=server:port` argument will be used to start ROOT. Only such combination makes sense to use browser in batch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10748:166,performance,batch,batch,166,Mentioned PR will allow to run TBrowser in batch mode if `--web=server:port` argument will be used to start ROOT. Only such combination makes sense to use browser in batch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10748
https://github.com/root-project/root/issues/10749:126,deployability,updat,updated,126,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:66,energy efficiency,alloc,allocator,66,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:288,integrability,configur,configured,288,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:288,modifiability,configur,configured,288,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:44,safety,detect,detect,44,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:126,safety,updat,updated,126,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:44,security,detect,detect,44,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:126,security,updat,updated,126,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/issues/10749:288,security,configur,configured,288,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10749
https://github.com/root-project/root/pull/10750:5,availability,failur,failure,5,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:5,deployability,fail,failure,5,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:5,performance,failur,failure,5,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:5,reliability,fail,failure,5,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:0,safety,test,test,0,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:0,testability,test,test,0,test failure is real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10750:8,energy efficiency,cool,cool,8,"got it, cool!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10750
https://github.com/root-project/root/pull/10751:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10751
https://github.com/root-project/root/pull/10752:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10752
https://github.com/root-project/root/pull/10752:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10752
https://github.com/root-project/root/pull/10752:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10752
https://github.com/root-project/root/pull/10753:491,deployability,build,build,491,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:661,deployability,build,build,661,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:43,energy efficiency,core,core,43,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:69,energy efficiency,core,core,69,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:137,energy efficiency,core,core,137,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:168,energy efficiency,core,core,168,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:500,energy efficiency,current,current,500,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:227,usability,Close,CloseFiles,227,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:465,usability,Close,CloseFiles,465,"With the following diff. ```. diff --git a/core/base/src/TROOT.cxx b/core/base/src/TROOT.cxx. index 3f385422ce..58a6fe052c 100644. --- a/core/base/src/TROOT.cxx. +++ b/core/base/src/TROOT.cxx. @@ -1201,6 +1201,7 @@ void TROOT::CloseFiles(). . void TROOT::EndOfProcessCleanups(). {. + std::cout << ""Calling TROOT::EndOfProcessCleanups\n"";. // This will not delete the objects 'held' by the TFiles so that. // they can still be 'reacheable' when ResetGlobals is run. CloseFiles();. ```. And a build of current master, I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. Calling TROOT::EndOfProcessCleanups. ```. Whereas with a build of this PR I get. ```. $: python -c ""import ROOT; ROOT.TH1F"". Calling TROOT::EndOfProcessCleanups. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:77,reliability,doe,does,77,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:551,reliability,doe,does,551,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:831,safety,review,reviewers,831,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:536,testability,simpl,simpler,536,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:831,testability,review,reviewers,831,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:374,usability,behavi,behavior,374,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:422,usability,behavi,behavior,422,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:536,usability,simpl,simpler,536,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:744,usability,person,person,744,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:277,energy efficiency,load,loaded,277,"It seems the order of execution is now 'wrong' in the PyROOT cases, i.e. do we still implement the behavior described in the comment:. ```. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. ```. See also 7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:277,performance,load,loaded,277,"It seems the order of execution is now 'wrong' in the PyROOT cases, i.e. do we still implement the behavior described in the comment:. ```. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. ```. See also 7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:99,usability,behavi,behavior,99,"It seems the order of execution is now 'wrong' in the PyROOT cases, i.e. do we still implement the behavior described in the comment:. ```. # Hard teardown: run part of the gROOT shutdown sequence. # Running it here ensures that it is done before any ROOT libraries. # are off-loaded, with unspecified order of static object destruction. ```. See also 7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:569,availability,fault,faulty,569,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:262,deployability,log,logic,262,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:557,deployability,log,logic,557,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1049,deployability,version,versions,1049,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:333,energy efficiency,current,current,333,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:569,energy efficiency,fault,faulty,569,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:243,integrability,messag,message,243,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1049,integrability,version,versions,1049,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:243,interoperability,messag,message,243,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:431,modifiability,variab,variables,431,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1049,modifiability,version,versions,1049,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:300,performance,time,time,300,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:569,performance,fault,faulty,569,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:569,reliability,fault,faulty,569,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:262,safety,log,logic,262,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:557,safety,log,logic,557,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:569,safety,fault,faulty,569,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:262,security,log,logic,262,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:557,security,log,logic,557,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:262,testability,log,logic,262,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:314,testability,understand,understanding,314,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:557,testability,log,logic,557,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:190,usability,behavi,behaviour,190,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:341,usability,behavi,behaviour,341,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1189,usability,behavi,behaviour,1189,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:. 1. Run TROOT::EndOfProcessCleanups. 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects. 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:. ```python. import ROOT. def create():. f = ROOT.TFile(""file.root"", ""RECREATE""). t = ROOT.TTree(""tree"", """"). return f, t. f, t = create(). ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:826,availability,down,down,826,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:849,availability,down,down,849,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1635,availability,down,down,1635,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:866,deployability,unload,unload,866,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1220,deployability,unload,unloaded,1220,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1835,deployability,depend,depending,1835,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:568,energy efficiency,load,load,568,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:877,energy efficiency,load,loaded,877,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1835,integrability,depend,depending,1835,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1835,modifiability,depend,depending,1835,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:568,performance,load,load,568,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:877,performance,load,loaded,877,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:219,reliability,doe,does,219,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1375,safety,prevent,prevent,1375,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1596,safety,detect,detect,1596,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1835,safety,depend,depending,1835,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1357,security,loss,loss,1357,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1375,security,preven,prevent,1375,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1596,security,detect,detect,1596,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1835,testability,depend,depending,1835,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:311,usability,interact,interaction,311,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1146,usability,user,user,1146,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:1195,usability,user,user,1195,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls). * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them. * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python. (2) unload the loaded libraries (Ls). (3) execute the atexit registered by TROOT, . (4) this includes EndOfProcessCleanups. (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:221,performance,time,time,221,"Ok I understand a bit better the original motivation for the two calls to `EndOfProcessCleanups` (although I still think is not very clean). Can we at least make `EndOfProcessCleanups` truly a no-op if it's not the first time it's been called? This should let Python call it before point (5) above, then when it's going to get called by the `TApplication` it won't bother RDF. Does this sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:377,reliability,Doe,Does,377,"Ok I understand a bit better the original motivation for the two calls to `EndOfProcessCleanups` (although I still think is not very clean). Can we at least make `EndOfProcessCleanups` truly a no-op if it's not the first time it's been called? This should let Python call it before point (5) above, then when it's going to get called by the `TApplication` it won't bother RDF. Does this sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:5,testability,understand,understand,5,"Ok I understand a bit better the original motivation for the two calls to `EndOfProcessCleanups` (although I still think is not very clean). Can we at least make `EndOfProcessCleanups` truly a no-op if it's not the first time it's been called? This should let Python call it before point (5) above, then when it's going to get called by the `TApplication` it won't bother RDF. Does this sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,energy efficiency,current,currently,138,"> Can we at least make EndOfProcessCleanups truly a no-op if it's not the first time it's been called? . Well, maybe, maybe not. If it is currently not a true no-op then it might be either. * (a bug) some list is not properly cleared. * (a feature) some items are added to the to-be-cleaned list between the 2 calls. > This should let Python call it before point (5) above, then when it's going to get called by the TApplication it won't bother RDF. . It *must* be called (by python) during point (1) (which maybe what you meant) and RDF should not be doing anything after (5) so it should *already* not bother RDF. But maybe I am missing something. I.e. is the second call to `EndOfProcessCleanups` a red-herring that 'just' looks suspicious and the problem is ""first call affecting RDF"" or is it really the 2nd call that is creating a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:80,performance,time,time,80,"> Can we at least make EndOfProcessCleanups truly a no-op if it's not the first time it's been called? . Well, maybe, maybe not. If it is currently not a true no-op then it might be either. * (a bug) some list is not properly cleared. * (a feature) some items are added to the to-be-cleaned list between the 2 calls. > This should let Python call it before point (5) above, then when it's going to get called by the TApplication it won't bother RDF. . It *must* be called (by python) during point (1) (which maybe what you meant) and RDF should not be doing anything after (5) so it should *already* not bother RDF. But maybe I am missing something. I.e. is the second call to `EndOfProcessCleanups` a red-herring that 'just' looks suspicious and the problem is ""first call affecting RDF"" or is it really the 2nd call that is creating a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:226,usability,clear,cleared,226,"> Can we at least make EndOfProcessCleanups truly a no-op if it's not the first time it's been called? . Well, maybe, maybe not. If it is currently not a true no-op then it might be either. * (a bug) some list is not properly cleared. * (a feature) some items are added to the to-be-cleaned list between the 2 calls. > This should let Python call it before point (5) above, then when it's going to get called by the TApplication it won't bother RDF. . It *must* be called (by python) during point (1) (which maybe what you meant) and RDF should not be doing anything after (5) so it should *already* not bother RDF. But maybe I am missing something. I.e. is the second call to `EndOfProcessCleanups` a red-herring that 'just' looks suspicious and the problem is ""first call affecting RDF"" or is it really the 2nd call that is creating a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:414,deployability,unload,unloads,414,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:651,integrability,messag,message,651,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:651,interoperability,messag,message,651,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:628,modifiability,scenario,scenario,628,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:747,reliability,doe,does,747,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:940,availability,state,state,940,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:32,integrability,messag,message,32,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:940,integrability,state,state,940,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:32,interoperability,messag,message,32,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:9,modifiability,scenario,scenario,9,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:670,modifiability,scenario,scenario,670,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:128,reliability,doe,does,128,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:968,usability,behavi,behavior,968,"> if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups. Unless something in the handling of the python handles changed since the commit, then it is needed. >Even then, it seemed weird that calling EndOfProcessCleanups twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". The ""once before ...."" is more or so because there is no 'better' place to call it. > the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Indeed (this is scenario similar to the (broken) ones I tried to describe). Getting the order of destruction right is very challenging (way more corner cases than you would expect or want) and unless there is a strong reason (and #10742 is not a good reason, that bug leads to a broken state which leads to broken behavior :) ), I would leave this code as-is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:257,energy efficiency,current,currently,257,"> Unless something in the handling of the python handles changed since the commit, then it is needed. Before *and* after this PR, the reproducer of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a works, so it means that currently we have no coverage for the edge cases that it was covering.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:278,testability,coverag,coverage,278,"> Unless something in the handling of the python handles changed since the commit, then it is needed. Before *and* after this PR, the reproducer of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a works, so it means that currently we have no coverage for the edge cases that it was covering.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:102,availability,down,down,102,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:221,availability,operat,operation,221,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,deployability,depend,depends,138,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:164,deployability,version,version,164,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,integrability,depend,depends,138,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:164,integrability,version,version,164,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,modifiability,depend,depends,138,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:154,modifiability,variab,variable,154,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:164,modifiability,version,version,164,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,safety,depend,depends,138,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:138,testability,depend,depends,138,"... but even if it did come clean it would not necessarily prove that it is not needed. Order of tear down is notoriously fickled and may depends on many variable (version of python, compilation options, general order of operation). I.e. unless we unearth the actual commits and/or changes that make this step obsolete, I would not touch it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:108,energy efficiency,current,current,108,"Closing this PR, the only thing needed is probably more test coverage to better understand the need for the current approach. I opened a bug issue for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:56,safety,test,test,56,"Closing this PR, the only thing needed is probably more test coverage to better understand the need for the current approach. I opened a bug issue for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:56,testability,test,test,56,"Closing this PR, the only thing needed is probably more test coverage to better understand the need for the current approach. I opened a bug issue for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:61,testability,coverag,coverage,61,"Closing this PR, the only thing needed is probably more test coverage to better understand the need for the current approach. I opened a bug issue for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10753:80,testability,understand,understand,80,"Closing this PR, the only thing needed is probably more test coverage to better understand the need for the current approach. I opened a bug issue for that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10753
https://github.com/root-project/root/pull/10754:53,availability,failur,failures,53,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:53,deployability,fail,failures,53,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:53,performance,failur,failures,53,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:53,reliability,fail,failures,53,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:140,safety,test,test,140,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:140,testability,test,test,140,"With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:55,availability,failur,failures,55,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:55,deployability,fail,failures,55,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:219,interoperability,architectur,architectures,219,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:55,performance,failur,failures,55,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:55,reliability,fail,failures,55,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:142,safety,test,test,142,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:142,testability,test,test,142,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:39,deployability,fail,failing,39,"@guitargeek And congrats, it's already failing on `ubuntu2004/python3` 😄",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:39,reliability,fail,failing,39,"@guitargeek And congrats, it's already failing on `ubuntu2004/python3` 😄",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10754:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10754
https://github.com/root-project/root/pull/10755:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:100,availability,Error,Error,100,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:114,deployability,build,build,114,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:148,deployability,build,build,148,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:175,deployability,build,build,175,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:279,deployability,patch,patches,279,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:287,deployability,fail,failed,287,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:193,integrability,messag,message,193,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:193,interoperability,messag,message,193,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:37,performance,perform,perform,37,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:100,performance,Error,Error,100,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:287,reliability,fail,failed,287,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:100,safety,Error,Error,100,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:279,safety,patch,patches,279,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:279,security,patch,patches,279,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:37,usability,perform,perform,37,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:100,usability,Error,Error,100,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```. CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):. Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of. v6-26-00-patches failed! ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:30,availability,ping,ping,30,@bellenot @Axel-Naumann small ping on this so it doesn't fall off the view (though there isn't much rush on this and I appreciate that there is plenty of other work that legitimately needs attention).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:49,reliability,doe,doesn,49,@bellenot @Axel-Naumann small ping on this so it doesn't fall off the view (though there isn't much rush on this and I appreciate that there is plenty of other work that legitimately needs attention).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:170,security,legitim,legitimately,170,@bellenot @Axel-Naumann small ping on this so it doesn't fall off the view (though there isn't much rush on this and I appreciate that there is plenty of other work that legitimately needs attention).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:42,safety,review,review,42,Nothing to be sorry about! Thanks for the review and merge. :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10755:42,testability,review,review,42,Nothing to be sorry about! Thanks for the review and merge. :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10755
https://github.com/root-project/root/pull/10756:10,safety,compl,complains,10,btw clang complains,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:10,security,compl,complains,10,btw clang complains,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:81,availability,error,errors,81,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:95,deployability,version,version,95,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:177,deployability,version,version,177,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:95,integrability,version,version,95,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:177,integrability,version,version,177,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:15,interoperability,format,format,15,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:95,modifiability,version,version,95,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:177,modifiability,version,version,177,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:81,performance,error,errors,81,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:150,reliability,doe,does,150,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:81,safety,error,errors,81,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:195,safety,compl,complains,195,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:195,security,compl,complains,195,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/pull/10756:81,usability,error,errors,81,"you mean clang-format I guess (clang is a compiler but there were no compilation errors) -- my version, that I think is newer than the one in the CI, does not see anything. The version in the CI complains about lines that are not directly touched by the PR. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10756
https://github.com/root-project/root/issues/10759:124,deployability,build,build,124,"@eguiraud That's a good question. As of now, the issue you linked only lists built-time problems (due to scripts running at build time), while this issue here is about issues with `root-config` after ROOT is built and locating it into a path with spaces (using binaries from release tarballs which were built in paths without spaces). . Of course, it might still be useful to merge both issues and extend the scope of the earlier one — but that's better decided by one of you ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:275,deployability,releas,release,275,"@eguiraud That's a good question. As of now, the issue you linked only lists built-time problems (due to scripts running at build time), while this issue here is about issues with `root-config` after ROOT is built and locating it into a path with spaces (using binaries from release tarballs which were built in paths without spaces). . Of course, it might still be useful to merge both issues and extend the scope of the earlier one — but that's better decided by one of you ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:398,modifiability,exten,extend,398,"@eguiraud That's a good question. As of now, the issue you linked only lists built-time problems (due to scripts running at build time), while this issue here is about issues with `root-config` after ROOT is built and locating it into a path with spaces (using binaries from release tarballs which were built in paths without spaces). . Of course, it might still be useful to merge both issues and extend the scope of the earlier one — but that's better decided by one of you ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:83,performance,time,time,83,"@eguiraud That's a good question. As of now, the issue you linked only lists built-time problems (due to scripts running at build time), while this issue here is about issues with `root-config` after ROOT is built and locating it into a path with spaces (using binaries from release tarballs which were built in paths without spaces). . Of course, it might still be useful to merge both issues and extend the scope of the earlier one — but that's better decided by one of you ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:130,performance,time,time,130,"@eguiraud That's a good question. As of now, the issue you linked only lists built-time problems (due to scripts running at build time), while this issue here is about issues with `root-config` after ROOT is built and locating it into a path with spaces (using binaries from release tarballs which were built in paths without spaces). . Of course, it might still be useful to merge both issues and extend the scope of the earlier one — but that's better decided by one of you ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:13,usability,cursor,cursory,13,"Ah no, in my cursory read I missed that important difference. Let's leave this open then, thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:220,availability,fault,faulty,220,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:120,deployability,stack,stack,120,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:168,deployability,build,buildid,168,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:220,energy efficiency,fault,faulty,220,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:100,modifiability,pac,packages,100,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:220,performance,fault,faulty,220,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:220,reliability,fault,faulty,220,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:220,safety,fault,faulty,220,"Hi @bellenot . Mostly a heads-up, but the quotes are causing issues in some autoconf macros for two packages in the LCG stack. E.g., http://cdash.cern.ch/viewFiles.php?buildid=177988. Cheers,. Andre. Fixed link: removed faulty `1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:41,deployability,Build,Build,41,"@andresailer thanks, but the link gives `Build does not exist. Maybe it has been deleted.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:47,reliability,doe,does,47,"@andresailer thanks, but the link gives `Build does not exist. Maybe it has been deleted.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:70,integrability,messag,message,70,"@bellenot Sorry, I accidentally added a 1 to the link, fixed in above message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:70,interoperability,messag,message,70,"@bellenot Sorry, I accidentally added a 1 to the link, fixed in above message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:19,safety,accid,accidentally,19,"@bellenot Sorry, I accidentally added a 1 to the link, fixed in above message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:221,deployability,patch,patches,221,"@andresailer I just [commited](https://github.com/root-project/root/commit/392cb8a8daef0a0feefecf3299a2536f1c271f1d) a possible fix addressing this issue. Please let me know if it works, so I'll backport it into v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:221,safety,patch,patches,221,"@andresailer I just [commited](https://github.com/root-project/root/commit/392cb8a8daef0a0feefecf3299a2536f1c271f1d) a possible fix addressing this issue. Please let me know if it works, so I'll backport it into v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:221,security,patch,patches,221,"@andresailer I just [commited](https://github.com/root-project/root/commit/392cb8a8daef0a0feefecf3299a2536f1c271f1d) a possible fix addressing this issue. Please let me know if it works, so I'll backport it into v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:52,modifiability,pac,packages,52,"Thanks, but, this is not fixing the problem for the packages. They use the root-config options `--cflags` and `--glibs`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:48,deployability,fail,fails,48,"@andresailer OK, so I don't understand how that fails. I'll check tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:48,reliability,fail,fails,48,"@andresailer OK, so I don't understand how that fails. I'll check tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:28,testability,understand,understand,28,"@andresailer OK, so I don't understand how that fails. I'll check tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:46,availability,error,errors,46,"@andresailer it looks like it might work (the errors look different), or did I miss something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:46,performance,error,errors,46,"@andresailer it looks like it might work (the errors look different), or did I miss something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:46,safety,error,errors,46,"@andresailer it looks like it might work (the errors look different), or did I miss something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:46,usability,error,errors,46,"@andresailer it looks like it might work (the errors look different), or did I miss something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:14,deployability,fail,failing,14,"Dev3 is still failing the same as before, http://cdash.cern.ch/viewFiles.php?buildid=178184.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:77,deployability,build,buildid,77,"Dev3 is still failing the same as before, http://cdash.cern.ch/viewFiles.php?buildid=178184.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:14,reliability,fail,failing,14,"Dev3 is still failing the same as before, http://cdash.cern.ch/viewFiles.php?buildid=178184.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:32,safety,compl,completely,32,"OK, thanks. Then I'll revert it completely, and we'll then forbid spaces in `ROOTSYS` on Linux and Mac...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:32,security,compl,completely,32,"OK, thanks. Then I'll revert it completely, and we'll then forbid spaces in `ROOTSYS` on Linux and Mac...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:76,deployability,build,build,76,"@andresailer BTW, how can I try quickly without having to wait the next LCG build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:117,deployability,build,build-node,117,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:218,deployability,toolchain,toolchain,218,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:185,safety,test,test,185,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:287,safety,test,test,287,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:185,testability,test,test,185,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:287,testability,test,test,287,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:218,usability,tool,toolchain,218,Easiest I can think off is described here:. https://lcgdocs.web.cern.ch/lcgdocs/tasks/newstackpackages/#working-from-build-node. Before running `cmake` switch to the branch you want to test ROOT for in `lcgcmake/cmake/toolchain/heptools-dev3.cmake` switch to the ROOT branch you want to test. then `make mctester` or `make hepmcanalysis`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:4,reliability,doe,doesn,4,"OK, doesn't work. I'll find another solution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:91,deployability,build,builds,91,@andresailer [this PR](https://github.com/root-project/root/pull/10987) should fix the LCG builds and still fix this current issue. We'll see at next build...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:150,deployability,build,build,150,@andresailer [this PR](https://github.com/root-project/root/pull/10987) should fix the LCG builds and still fix this current issue. We'll see at next build...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:117,energy efficiency,current,current,117,@andresailer [this PR](https://github.com/root-project/root/pull/10987) should fix the LCG builds and still fix this current issue. We'll see at next build...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:87,deployability,patch,patches,87,"@andresailer please let me know if it works now, so I can backport the fix in v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:87,safety,patch,patches,87,"@andresailer please let me know if it works now, so I can backport the fix in v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:87,security,patch,patches,87,"@andresailer please let me know if it works now, so I can backport the fix in v6-26-00-patches. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:0,energy efficiency,Cool,Cool,0,"Cool, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:29,deployability,patch,patches,29,Fixed in master and v6-26-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:29,safety,patch,patches,29,Fixed in master and v6-26-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/issues/10759:29,security,patch,patches,29,Fixed in master and v6-26-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10759
https://github.com/root-project/root/pull/10760:228,modifiability,variab,variable,228,"p.s. @lmoneta , something seperate but related which I have not changed:. The non relativistic breit wigner function which already exists in TMath. `Double_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1);`. has the variable named ""mean"", when really this should be median (the mean of a breit wigner is undefined). Should I make another commit and change this to median or would you prefer this to just be left alone? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:396,usability,prefer,prefer,396,"p.s. @lmoneta , something seperate but related which I have not changed:. The non relativistic breit wigner function which already exists in TMath. `Double_t BreitWigner(Double_t x, Double_t mean=0, Double_t gamma=1);`. has the variable named ""mean"", when really this should be median (the mean of a breit wigner is undefined). Should I make another commit and change this to median or would you prefer this to just be left alone? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:65,availability,failur,failure,65,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:59,deployability,build,build,59,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:65,deployability,fail,failure,65,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:80,deployability,build,build,80,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:139,deployability,fail,failing,139,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:65,performance,failur,failure,65,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:65,reliability,fail,failure,65,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:139,reliability,fail,failing,139,"Hi @lmoneta ,. Thanks very much, I'm a bit confused on the build failure, I can build it locally fine and I have not edited the file it is failing on ( rs602_HLFactoryCombinationexample.C ), is there something I need to change? Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:40,availability,ping,ping,40,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:115,availability,replic,replicate,115,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:130,availability,failur,failure,130,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:74,deployability,build,build,74,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:83,deployability,fail,failing,83,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:105,deployability,manag,manage,105,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:130,deployability,fail,failure,130,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:150,deployability,build,builds,150,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:193,deployability,fail,failing,193,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:105,energy efficiency,manag,manage,105,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:130,performance,failur,failure,130,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:83,reliability,fail,failing,83,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:130,reliability,fail,failure,130,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:193,reliability,fail,failing,193,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:105,safety,manag,manage,105,"Hi @lmoneta ,. Apologies for the double ping on this, do you know why the build is failing here? I can't manage to replicate this failure locally, it builds just fine for me and the file it is failing on is not one I have edited. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:40,availability,ping,ping,40,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:111,availability,failur,failure,111,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:105,deployability,build,build,105,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:111,deployability,fail,failure,111,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:142,deployability,manag,manage,142,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:177,deployability,build,builds,177,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:213,deployability,fail,failing,213,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:142,energy efficiency,manag,manage,142,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:111,performance,failur,failure,111,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:111,reliability,fail,failure,111,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:213,reliability,fail,failing,213,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:142,safety,manag,manage,142,"Hi @lmoneta ,. Apologies for the double ping but is there anything you know I need to do to resolve this build failure? (as mentioned I can't manage to reproduce it locally, it builds just fine, and the file it's failing on is not one I have in any way edited)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:53,deployability,build,build,53,It was probably due to something else. Let me try to build again on that platform.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:73,interoperability,platform,platform,73,It was probably due to something else. Let me try to build again on that platform.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:11,deployability,build,build,11,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:25,performance,perform,performance-,25,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:25,usability,perform,performance-,25,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:47,deployability,build,build,47,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:93,deployability,fail,failed,93,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:105,deployability,build,build,105,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:283,deployability,fail,failed,283,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:331,deployability,build,build,331,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:385,deployability,build,build,385,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:93,reliability,fail,failed,93,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:283,reliability,fail,failed,283,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:134,safety,Test,Test,134,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:134,testability,Test,Test,134,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:414,usability,help,help,414,"Hi @lmoneta ,. I'm very confused now as in the build you've just done it has passed where it failed last build . (""18:34:54 1232/2386 Test #943: tutorial-roostats-rs602_HLFactoryCombinationexample ............................................... Passed 1.88 sec""). However it has now failed on two things that it passed on the last build, but I have not changed anything since the last build. Thanks again for your help,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:98,availability,failur,failure,98,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:74,deployability,manag,manage,74,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:98,deployability,fail,failure,98,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:109,deployability,build,build,109,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:158,deployability,fail,failing,158,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:240,deployability,fail,failed,240,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:290,deployability,fail,failed,290,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:304,deployability,build,build,304,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:74,energy efficiency,manag,manage,74,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:98,performance,failur,failure,98,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:252,performance,time,time,252,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:98,reliability,fail,failure,98,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:158,reliability,fail,failing,158,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:240,reliability,fail,failed,240,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:290,reliability,fail,failed,290,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:74,safety,manag,manage,74,"Hi @lmoneta , do you have any idea what I need to do to fix this? I can't manage to reproduce the failure to build locally (and as mentioned the thing that's failing is not something I have changed... And for some reason the thing that has failed this time is different than the thing that failed in the build before even though nothing changed). Apologies and thank you again,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:11,deployability,build,build,11,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:25,performance,perform,performance-,25,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:25,usability,perform,performance-,25,@phsft-bot build on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:89,safety,test,tests,89,"Hi @lmoneta ,. Great thanks very much:), I'll attempt to try to understand how the other tests are done and add more of a test in the future. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:122,safety,test,test,122,"Hi @lmoneta ,. Great thanks very much:), I'll attempt to try to understand how the other tests are done and add more of a test in the future. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:64,testability,understand,understand,64,"Hi @lmoneta ,. Great thanks very much:), I'll attempt to try to understand how the other tests are done and add more of a test in the future. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:89,testability,test,tests,89,"Hi @lmoneta ,. Great thanks very much:), I'll attempt to try to understand how the other tests are done and add more of a test in the future. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10760:122,testability,test,test,122,"Hi @lmoneta ,. Great thanks very much:), I'll attempt to try to understand how the other tests are done and add more of a test in the future. Cheers,. Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10760
https://github.com/root-project/root/pull/10768:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/issues/10769:9,availability,ping,ping,9,@lmoneta ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10769
https://github.com/root-project/root/pull/10771:40,availability,failur,failures,40,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:11,deployability,build,build,11,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:40,deployability,fail,failures,40,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:40,performance,failur,failures,40,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:40,reliability,fail,failures,40,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/issues/10774:118,availability,error,error,118,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:118,performance,error,error,118,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:57,reliability,doe,does,57,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:78,safety,input,input,78,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:84,safety,valid,validation,84,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:118,safety,error,error,118,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:84,security,validat,validation,84,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:78,usability,input,input,78,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:118,usability,error,error,118,I think the underlying problem is that `SetEntriesRange` does not have enough input validation. We could (and should) error out at the point `SetEntriesRange` is called if `start > nEntries`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:77,modifiability,concern,concerned,77,I can take care of making a check before calling SetEntriesRange. I was more concerned whether SetEntriesRange can become dangerous on its own.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:77,testability,concern,concerned,77,I can take care of making a check before calling SetEntriesRange. I was more concerned whether SetEntriesRange can become dangerous on its own.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:107,interoperability,specif,specifying,107,> > SetEntriesRange can become dangerous on its own. > . > what do you mean? User not getting notified for specifying invalid range (e.g. start=last entry),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:77,usability,User,User,77,> > SetEntriesRange can become dangerous on its own. > . > what do you mean? User not getting notified for specifying invalid range (e.g. start=last entry),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:16,safety,input,input,16,"Yes that's what input validation is for, what am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:22,safety,valid,validation,22,"Yes that's what input validation is for, what am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:22,security,validat,validation,22,"Yes that's what input validation is for, what am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:16,usability,input,input,16,"Yes that's what input validation is for, what am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:9,energy efficiency,current,currently,9,"Fyi I am currently doing my own sanity check (outside `SetEntriesRange`) by first calling ~~`SetEntry`~~ `GetEntries(true)`. . ~~`SetEntry` returns an entry status, which is 0 upon success, and works in my case as expected, i.e. it properly catches that `SetEntry(lastEntry)` is invalid.~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:32,safety,sanit,sanity,32,"Fyi I am currently doing my own sanity check (outside `SetEntriesRange`) by first calling ~~`SetEntry`~~ `GetEntries(true)`. . ~~`SetEntry` returns an entry status, which is 0 upon success, and works in my case as expected, i.e. it properly catches that `SetEntry(lastEntry)` is invalid.~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:32,security,sanit,sanity,32,"Fyi I am currently doing my own sanity check (outside `SetEntriesRange`) by first calling ~~`SetEntry`~~ `GetEntries(true)`. . ~~`SetEntry` returns an entry status, which is 0 upon success, and works in my case as expected, i.e. it properly catches that `SetEntry(lastEntry)` is invalid.~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:157,usability,statu,status,157,"Fyi I am currently doing my own sanity check (outside `SetEntriesRange`) by first calling ~~`SetEntry`~~ `GetEntries(true)`. . ~~`SetEntry` returns an entry status, which is 0 upon success, and works in my case as expected, i.e. it properly catches that `SetEntry(lastEntry)` is invalid.~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:287,deployability,stage,stage,287,"To my understanding, yes. Indeed, there is a call to `GetEntries(false)` here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L418. An argument why is not done with `GetEntries(true)` is ofc efficiency - as at this stage, there is no need to open all files in case of a chain. However, within `SetEntriesRange` as previously mentioned, there is also a call to `SetEntry`, here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438. Which will do all of the work of obtaining all entry nummbers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:6,testability,understand,understanding,6,"To my understanding, yes. Indeed, there is a call to `GetEntries(false)` here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L418. An argument why is not done with `GetEntries(true)` is ofc efficiency - as at this stage, there is no need to open all files in case of a chain. However, within `SetEntriesRange` as previously mentioned, there is also a call to `SetEntry`, here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438. Which will do all of the work of obtaining all entry nummbers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:263,usability,efficien,efficiency,263,"To my understanding, yes. Indeed, there is a call to `GetEntries(false)` here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L418. An argument why is not done with `GetEntries(true)` is ofc efficiency - as at this stage, there is no need to open all files in case of a chain. However, within `SetEntriesRange` as previously mentioned, there is also a call to `SetEntry`, here: https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438. Which will do all of the work of obtaining all entry nummbers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:6,reliability,doe,does,6,where does `TTreeReader::SetEntry` trigger the reading of all entries for all files?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:641,deployability,continu,continues,641,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:180,energy efficiency,Load,LoadTree,180,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:827,energy efficiency,Load,LoadTree,827,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:931,energy efficiency,Load,LoadTree,931,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:180,performance,Load,LoadTree,180,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:827,performance,Load,LoadTree,827,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:931,performance,Load,LoadTree,931,"See:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```. and then it continues:. ```. [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024. [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499. [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586. [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547. [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199. [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:50,deployability,contain,contains,50,"That's not opening _all_ files, just the one that contains the entry that needs loading",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:80,energy efficiency,load,loading,80,"That's not opening _all_ files, just the one that contains the entry that needs loading",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:80,performance,load,loading,80,"That's not opening _all_ files, just the one that contains the entry that needs loading",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:27,interoperability,specif,specifying,27,Agreed. But the issue that specifying the last index + 1 as a start is still there! Hence this PR should remain open imo.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:127,availability,error,error,127,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:127,performance,error,error,127,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:192,reliability,doe,does,192,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:127,safety,error,error,127,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:127,usability,error,error,127,"Yes the issue is that given a file with N entries, calling `treereader.SetEntriesRange(N + 1, ...); treereader.Next();` should error out (because the starting entry N + 1 is out of range) but does not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/pull/10775:110,energy efficiency,measur,measured,110,"> Looks good to me! Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:31,safety,review,reviewing,31,"> Looks good to me! Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:71,safety,test,tests,71,"> Looks good to me! Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:31,testability,review,reviewing,31,"> Looks good to me! Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:71,testability,test,tests,71,"> Looks good to me! Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:311,deployability,log,logic,311,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:442,deployability,API,API,442,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:454,deployability,updat,updated,454,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:235,energy efficiency,optim,optimization,235,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:605,energy efficiency,optim,optimization,605,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:442,integrability,API,API,442,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:442,interoperability,API,API,442,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:359,modifiability,scal,scalar,359,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:235,performance,optimiz,optimization,235,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:605,performance,optimiz,optimization,605,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:170,reliability,pra,practice,170,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:117,safety,test,tested,117,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:311,safety,log,logic,311,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:454,safety,updat,updated,454,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:466,safety,test,test,466,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:311,security,log,logic,311,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:428,security,misus,misuse,428,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:454,security,updat,updated,454,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:117,testability,test,tested,117,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:311,testability,log,logic,311,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:466,testability,test,test,466,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice. > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:70,deployability,API,API,70,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:82,deployability,updat,updated,82,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:233,energy efficiency,optim,optimization,233,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:376,energy efficiency,optim,optimization,376,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:70,integrability,API,API,70,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:70,interoperability,API,API,70,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:299,modifiability,maintain,maintainability,299,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:233,performance,optimiz,optimization,233,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:376,performance,optimiz,optimization,376,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:82,safety,updat,updated,82,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:94,safety,test,test,94,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:268,safety,test,test,268,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:299,safety,maintain,maintainability,299,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:56,security,misus,misuse,56,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:82,security,updat,updated,82,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:94,testability,test,test,94,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:268,testability,test,test,268,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10776:269,deployability,fail,fails,269,"That's a symptom of another issue that we also need to understand. `rootcling_stage1` is supposed to `putenv` `ROOTSYS` itself (in `SetRootSys()` in `core/dictgen/src/rootcling_impl.cxx`); it should not need to be set from the ""outside"". Do you know why `SetRootSys()` fails to do what it's supposed to?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:150,energy efficiency,core,core,150,"That's a symptom of another issue that we also need to understand. `rootcling_stage1` is supposed to `putenv` `ROOTSYS` itself (in `SetRootSys()` in `core/dictgen/src/rootcling_impl.cxx`); it should not need to be set from the ""outside"". Do you know why `SetRootSys()` fails to do what it's supposed to?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:269,reliability,fail,fails,269,"That's a symptom of another issue that we also need to understand. `rootcling_stage1` is supposed to `putenv` `ROOTSYS` itself (in `SetRootSys()` in `core/dictgen/src/rootcling_impl.cxx`); it should not need to be set from the ""outside"". Do you know why `SetRootSys()` fails to do what it's supposed to?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:55,testability,understand,understand,55,"That's a symptom of another issue that we also need to understand. `rootcling_stage1` is supposed to `putenv` `ROOTSYS` itself (in `SetRootSys()` in `core/dictgen/src/rootcling_impl.cxx`); it should not need to be set from the ""outside"". Do you know why `SetRootSys()` fails to do what it's supposed to?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:186,availability,error,error,186,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:385,deployability,build,build,385,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:495,deployability,fail,fails,495,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:520,deployability,depend,dependencies,520,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:192,integrability,messag,message,192,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:520,integrability,depend,dependencies,520,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:192,interoperability,messag,message,192,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:520,modifiability,depend,dependencies,520,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:186,performance,error,error,186,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:495,reliability,fail,fails,495,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:186,safety,error,error,186,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:520,safety,depend,dependencies,520,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:520,testability,depend,dependencies,520,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:186,usability,error,error,186,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:418,usability,confirm,confirmed,418,"Yes, this happened because I was trying to compile on an officially unsupported system. The function `GetExePath()` is not implemented and returns an empty string. It the new commit, an error message is printed in `SetRootSys()` in case of unknown executable path, and the missing implementation of `GetExePath()` is added. The program `rootcling_stage1` now determines its `ROOTSYS` (build directory) successfully as confirmed by printing `rootsys` in `GetIncludeDir()`, although it then still fails reporting circular dependencies in the headers, but it is a separate issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:156,interoperability,conflict,conflicts,156,"Hi @chilikink, what's the status of this PR? Is this tweak still needed, and so you still want to get it merged? If yes, please let us know and resolve the conflicts by re-basing the commits on master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:26,usability,statu,status,26,"Hi @chilikink, what's the status of this PR? Is this tweak still needed, and so you still want to get it merged? If yes, please let us know and resolve the conflicts by re-basing the commits on master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:85,security,auth,authors,85,"Superseded by #12996. Thanks for the initial effort, I'm sure it was helpful for the authors of the linked PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:69,usability,help,helpful,69,"Superseded by #12996. Thanks for the initial effort, I'm sure it was helpful for the authors of the linked PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/issues/10777:87,deployability,contain,container,87,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:111,deployability,build,builds,111,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:234,deployability,fail,fail,234,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:513,energy efficiency,core,core,513,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:730,energy efficiency,core,core,730,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:752,energy efficiency,core,core,752,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:794,energy efficiency,core,core,794,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:219,performance,memor,memory,219,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:226,reliability,doe,doesn,226,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:234,reliability,fail,fail,234,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:592,reliability,doe,doesn,592,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:219,usability,memor,memory,219,"Hi @steffen-AEI, unfortunately I cannot reproduce this issue on my side using a Docker container. Also we have builds on Ubuntu 22.04 in our Jenkins CI that don't show the problem either. What worries me is that (if my memory doesn't fail me) we actually shouldn't produce `typeinfo`s for LLVM classes - all relevant files should be built with `-fno-rtti`. Could you maybe check *which* file references that particular `typeinfo`? One obvious candidate would be `TCling.cxx.o`, could you post the output of `nm ./core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o | grep _ZTI`? If that doesn't show `typeinfo` references for the `clang::` namespace (as it should or rather should not), could you search all object files in `core/clingutils` and `core/metacling` with something like `find core/metacling/ -name ""*.o"" | xargs nm | grep _ZTI`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1231,availability,error,error,1231," although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4163,availability,error,error,4163,"s-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4438,availability,Error,Error,4438,"h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4483,availability,Error,Error,4483,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4490,availability,Error,Error,4490,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4642,availability,Error,Error,4642,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4803,availability,Error,Error,4803,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:95,deployability,depend,dependencies,95,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:331,deployability,contain,contains,331,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:428,deployability,build,build,428,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:455,deployability,build,build,455,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:790,deployability,build,build,790,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:817,deployability,build,build,817,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:955,deployability,build,build,955,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:982,deployability,build,build,982,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1025,deployability,build,build,1025,"e the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -comp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1052,deployability,build,build,1052,"active pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1121,deployability,build,build,1121,"ake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1148,deployability,build,build,1148,"and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1307,deployability,build,build,1307,"cript` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1334,deployability,build,build,1334,"ns ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1396,deployability,build,build,1396,"le ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1423,deployability,build,build,1423," /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1454,deployability,build,build,1454,"ild/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1481,deployability,build,build,1481,"-E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1550,deployability,build,build,1550,"/usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1577,deployability,build,build,1577,"o-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/buil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1632,deployability,build,build,1632,"w -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1672,deployability,build,build,1672,"-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1699,deployability,build,build,1699," -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1728,deployability,build,build,1728,"ng.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1755,deployability,build,build,1755,"-o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1785,deployability,build,build,1785,",/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1812,deployability,build,build,1812,"/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2232,deployability,build,build,2232,"r:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2259,deployability,build,build,2259,"G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2291,deployability,build,build,2291,ore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2338,deployability,build,build,2338,ath/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2381,deployability,build,build,2381,BRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/Dist,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2433,deployability,build,build,2433,OTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2479,deployability,build,build,2479,uild/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2528,deployability,build,build,2528,cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2576,deployability,build,build,2576,ild/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/G,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2621,deployability,build,build,2621,dePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Mat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2663,deployability,build,build,2663,Path /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2706,deployability,build,build,2706,lude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/Interpolati,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2749,deployability,build,build,2749,g/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2792,deployability,build,build,2792,-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2834,deployability,build,build,2834,/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2877,deployability,build,build,2877,x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2926,deployability,build,build,2926,+/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2969,deployability,build,build,2969,-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2996,deployability,build,build,2996,ilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccurate,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3014,deployability,build,build,3014,clude -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/Vavilov,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3064,deployability,build,build,3064,pilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3111,deployability,build,build,3111,4-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3153,deployability,build,build,3153,l/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3216,deployability,build,build,3216,r/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3257,deployability,build,build,3257,uild/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to b,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3299,deployability,build,build,3299,cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4056,deployability,build,build,4056,"c -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4170,deployability,modul,module,4170,"04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4184,deployability,build,build,4184,"tiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4211,deployability,build,build,4211,"I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4286,deployability,modul,module,4286,"v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4363,deployability,modul,module,4363,"ivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4386,deployability,build,build,4386,"athMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4413,deployability,build,build,4413,"r.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4445,deployability,Modul,Module,4445,"GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4467,deployability,fail,failed,4467,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4595,deployability,build,build,4595,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4680,deployability,build,build,4680,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4707,deployability,build,build,4707,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5396,deployability,depend,dependency,5396,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2364,energy efficiency,core,core,2364,cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Der,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2407,energy efficiency,core,core,2407,s-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIn,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2459,energy efficiency,core,core,2459,oot-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2505,energy efficiency,core,core,2505,uild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2554,energy efficiency,core,core,2554,root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2602,energy efficiency,core,core,2602, MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2647,energy efficiency,core,core,2647,26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2689,energy efficiency,core,core,2689,.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2732,energy efficiency,core,core,2732,root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2775,energy efficiency,core,core,2775,dePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParamete,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2818,energy efficiency,core,core,2818,iltins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2860,energy efficiency,core,core,2860,ilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2903,energy efficiency,core,core,2903,compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2952,energy efficiency,core,core,2952,usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3137,energy efficiency,core,core,3137,ompilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3179,energy efficiency,core,core,3179,include/x86_64-linux-gnu -compilerI/usr/include -I/build/root-cds-6.26.04.sg/.build/include -I/usr/include -I/build/root-cds-6.26.04.sg/math/mathmore/inc -I/build/root-cds-6.26.04.sg/core/unix/inc -I/build/root-cds-6.26.04.sg/core/foundation/v7/inc -I/build/root-cds-6.26.04.sg/core/base/v7/inc -I/build/root-cds-6.26.04.sg/core/clingutils/inc -I/build/root-cds-6.26.04.sg/core/textinput/inc -I/build/root-cds-6.26.04.sg/core/thread/inc -I/build/root-cds-6.26.04.sg/core/zip/inc -I/build/root-cds-6.26.04.sg/core/rint/inc -I/build/root-cds-6.26.04.sg/core/clib/inc -I/build/root-cds-6.26.04.sg/core/meta/inc -I/build/root-cds-6.26.04.sg/core/gui/inc -I/build/root-cds-6.26.04.sg/core/cont/inc -I/build/root-cds-6.26.04.sg/core/foundation/inc -I/build/root-cds-6.26.04.sg/core/base/inc -I/build/root-cds-6.26.04.sg/.build/ginclude -I/build/root-cds-6.26.04.sg/math/mathcore/v7/inc -I/build/root-cds-6.26.04.sg/math/mathcore/inc -I/build/root-cds-6.26.04.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4477,energy efficiency,load,load,4477,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4496,energy efficiency,load,loading,4496,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5285,energy efficiency,cpu,cpu,5285,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:95,integrability,depend,dependencies,95,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5396,integrability,depend,dependency,5396,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5257,interoperability,share,shared,5257,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5317,interoperability,xml,xml,5317,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:95,modifiability,depend,dependencies,95,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4170,modifiability,modul,module,4170,"04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4286,modifiability,modul,module,4286,"v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4363,modifiability,modul,module,4363,"ivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4445,modifiability,Modul,Module,4445,"GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5396,modifiability,depend,dependency,5396,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1231,performance,error,error,1231," although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4163,performance,error,error,4163,"s-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4438,performance,Error,Error,4438,"h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4477,performance,load,load,4477,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4483,performance,Error,Error,4483,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4490,performance,Error,Error,4490,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4496,performance,load,loading,4496,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4642,performance,Error,Error,4642,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4803,performance,Error,Error,4803,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5285,performance,cpu,cpu,5285,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4467,reliability,fail,failed,4467,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:95,safety,depend,dependencies,95,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1210,safety,compl,completely,1210,"ootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compiler",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1231,safety,error,error,1231," although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4163,safety,error,error,4163,"s-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4170,safety,modul,module,4170,"04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4286,safety,modul,module,4286,"v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4363,safety,modul,module,4363,"ivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4438,safety,Error,Error,4438,"h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4445,safety,Modul,Module,4445,"GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4483,safety,Error,Error,4483,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4490,safety,Error,Error,4490,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4642,safety,Error,Error,4642,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4803,safety,Error,Error,4803,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5111,safety,except,exceptions,5111,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5396,safety,depend,dependency,5396,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1210,security,compl,completely,1210,"ootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compiler",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4293,security,sign,signature,4293,"/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5271,security,ssl,ssl,5271,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:95,testability,depend,dependencies,95,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5396,testability,depend,dependency,5396,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:34,usability,behavi,behaviour,34,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:50,usability,interact,interactive,50,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:134,usability,minim,minimal,134,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`. Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1231,usability,error,error,1231," although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):. ```. [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m. cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 . /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint. cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. [ 50%] Built target rootcling. ```. and end up with a completely different error:. ```. [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm. cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4126,usability,interact,interactive,4126,"4.sg/core/imt/inc -I/build/root-cds-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fits",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4163,usability,error,error,4163,"s-6.26.04.sg/core/multiproc/inc -I/usr/include -I/build/root-cds-6.26.04.sg/net/net/inc -I/build/root-cds-6.26.04.sg/io/io/v7/inc -I/build/root-cds-6.26.04.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4314,usability,interact,interactive,4314,"4.sg/io/io/inc Math/ChebyshevApprox.h Math/Derivator.h Math/DistFuncMathMore.h Math/GSLIntegrator.h Math/GSLMCIntegrator.h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4438,usability,Error,Error,4438,"h Math/GSLMinimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4483,usability,Error,Error,4483,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4490,usability,Error,Error,4490,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4642,usability,Error,Error,4642,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4803,usability,Error,Error,4803,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4949,usability,support,support,4949,"Minimizer.h Math/GSLMinimizer1D.h Math/GSLMultiRootFinder.h Math/GSLNLSMinimizer.h Math/GSLQuasiRandom.h Math/GSLRandom.h Math/GSLRandomFunctions.h Math/GSLRndmEngines.h Math/GSLRootFinder.h Math/GSLRootFinderDeriv.h Math/GSLSimAnMinimizer.h Math/InterpolationTypes.h Math/Interpolator.h Math/KelvinFunctions.h Math/MCParameters.h Math/PdfFuncMathMore.h Math/Polynomial.h Math/ParamFunction.h Math/QuasiRandom.h Math/RootFinderAlgorithms.h Math/SpecFuncMathMore.h Math/Vavilov.h Math/VavilovAccurate.h Math/VavilovAccurateCdf.h Math/VavilovAccuratePdf.h Math/VavilovAccurateQuantile.h Math/VavilovFast.h /build/root-cds-6.26.04.sg/math/mathmore/inc/Math/LinkDef.h. <<< cling interactive line includer >>>: fatal error: module file '/build/root-cds-6.26.04.sg/.build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/build/root-cds-6.26.04.sg/.build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:142: math/mathmore/G__MathMore.cxx] Error 1. make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'. make[1]: *** [CMakeFiles/Makefile2:26590: math/mathmore/CMakeFiles/G__MathMore.dir/all] Error 2. ```. Something still seems to be wrong with `cling`? What is that `Rint` file, is it related to R (which isn't enabled)? ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix exceptions fftw3 fitsio gdml gfal gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. ```. I'm already running out of ideas but will retry with the full dependency set and `cmake` options line, keeping `-j 1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:281,availability,error,error,281,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:176,deployability,modul,module,176,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:249,deployability,modul,module,249,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:323,deployability,build,builds,323,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:423,deployability,build,building,423,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:99,energy efficiency,core,core,99,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:176,modifiability,modul,module,176,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:249,modifiability,modul,module,249,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:281,performance,error,error,281,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:176,safety,modul,module,176,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:249,safety,modul,module,249,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:281,safety,error,error,281,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:256,security,sign,signature,256,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:142,usability,interact,interactive,142,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:281,usability,error,error,281,"> What is that `Rint` file, is it related to R (which isn't enabled)? No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:346,availability,error,error,346,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:460,availability,error,errors,460,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:94,deployability,Build,Build-Depends,94,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:145,deployability,build,build,145,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:100,integrability,Depend,Depends,100,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:433,integrability,batch,batch,433,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:100,modifiability,Depend,Depends,100,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:109,modifiability,pac,packages,109,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:346,performance,error,error,346,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:433,performance,batch,batch,433,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:460,performance,error,errors,460,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:100,safety,Depend,Depends,100,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:346,safety,error,error,346,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:460,safety,error,errors,460,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:30,security,sandbox,sandbox,30,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:408,security,session,session,408,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:439,security,session,session,439,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:100,testability,Depend,Depends,100,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:346,usability,error,error,346,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:396,usability,interact,interactive,396,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:460,usability,error,errors,460,"This is a temporarily created sandbox, created by `pbuilder`, and populated accordingly (with Build-Depends: packages) before running the actual build code - and destroyed immediately afterwards. Thanks for clarifying the meaning of `Rint`, I was confused by the capital R. In the meantime, I was able to re-run `pbuilder` and got the `::sema::` error from the beginning. If it turns out that an interactive session cannot reproduce batch session results (and errors) I really don't know what to do next :(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:549,availability,failur,failure,549,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:549,deployability,fail,failure,549,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:755,deployability,build,build,755,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:549,performance,failur,failure,549,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:770,performance,Time,Time,770,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:549,reliability,fail,failure,549,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:14,usability,close,closer,14,"Okay, getting closer, it seems. Debian seems to have some special ideas about running `cmake`, and would use. ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_INSTALL_LOCALSTATEDIR=/var -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON -DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON ""-GUnix Makefiles"" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. with the failure above. Running . ```. cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc/root -Dgnuinstall=ON .. ```. (_only_ using the explicit -D options provided to `dh_auto_configure`) makes the build succeed. Time to bisect...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:183,deployability,configurat,configuration,183,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:183,integrability,configur,configuration,183,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:183,modifiability,configur,configuration,183,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:54,security,sandbox,sandbox,54,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:149,security,team,team,149,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:183,security,configur,configuration,183,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:201,security,sandbox,sandbox,201,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:162,usability,support,support,162,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:354,availability,failur,failure,354,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:48,deployability,depend,depend,48,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:60,deployability,build,build-depend,60,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:330,deployability,build,build,330,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:354,deployability,fail,failure,354,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:9,integrability,coupl,couple,9,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:48,integrability,depend,depend,48,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:66,integrability,depend,depend,66,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:9,modifiability,coupl,couple,9,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:33,modifiability,pac,packages,33,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:48,modifiability,depend,depend,48,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:66,modifiability,depend,depend,66,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:138,modifiability,pac,package,138,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:151,modifiability,pac,package,151,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:354,performance,failur,failure,354,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:354,reliability,fail,failure,354,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:48,safety,depend,depend,48,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:66,safety,depend,depend,66,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:478,safety,avoid,avoid,478,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:9,testability,coupl,couple,9,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:48,testability,depend,depend,48,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:66,testability,depend,depend,66,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:105,usability,support,support,105,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:109,deployability,build,builds,109,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:88,modifiability,pac,package,88,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:305,modifiability,pac,packaging,305,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:60,safety,reme,remember,60,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:270,testability,simpl,simply,270,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:195,usability,close,close,195,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:270,usability,simpl,simply,270,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:221,availability,error,error,221,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:696,availability,down,download,696,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:707,availability,down,downloads,707,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:111,deployability,build,builds,111,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:332,deployability,build,build,332,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:363,integrability,repositor,repository,363,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:363,interoperability,repositor,repository,363,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:90,modifiability,pac,package,90,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:221,performance,error,error,221,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:62,safety,reme,remember,62,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:221,safety,error,error,221,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:408,security,team,team,408,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:634,security,team,team,634,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:221,usability,error,error,221,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:239,usability,stop,stopped,239,"> @stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu? Seems a bit weird to me, never seen this kind of error. But I also stopped using pbuilder in favor of sbuild for quite a while now. @steffen-AEI can you try to build the ROOT deb using [this repository](https://salsa.debian.org/science-team/root) and [sbuild](https://wiki.debian.org/sbuild#Using_unshare_with_mmdebstrap_.28no_root_needed.29)? I.e. ```bash. # follow the instructions on the wiki to setup sbuild first. git clone https://salsa.debian.org/science-team/root.git. cd root. USCAN_SYMLINK=rename uscan -v --force-download # downloads source tarball, might take a while. sbuild. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:34,deployability,build,build,34,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:101,deployability,fail,failing,101,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:212,deployability,BUILD,BUILD,212,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:833,deployability,BUILD,BUILD,833,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1285,deployability,build,builds,1285,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:101,reliability,fail,failing,101,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:82,usability,command,commandline,82,"I can see the same when trying to build root 6.26.06 on openSUSE Tumbleweed. Full commandline of the failing link:. ```. [ 1887s] [ 76%] Linking CXX executable ../bin/rootcling. [ 1887s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1. [ 1887s] /usr/bin/c++ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -flto=auto -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ../lib/libRIO.so.6.26.06 ../lib/libCling.so.6.26.06 ../lib/libThread.so.6.26.06 ../lib/libCore.so.6.26.06 -Wl,--unresolved-symbols=ignore-in-object-files . [ 1887s] /usr/lib64/gcc/x86_64-suse-linux/12/../../../../x86_64-suse-linux/bin/ld: ../lib/libCling.so.6.26.06: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo'. ```. Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:15,deployability,build,build-root,15,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:54,deployability,build,build,54,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:69,deployability,BUILD,BUILD,69,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:215,deployability,build,build-root,215,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:254,deployability,build,build,254,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:269,deployability,BUILD,BUILD,269,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:98,energy efficiency,core,core,98,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:298,energy efficiency,core,core,298,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:60,modifiability,pac,packages,60,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:260,modifiability,pac,packages,260,`find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. ```. ... /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). U typeinfo for clang::sema::FunctionScopeInfo. U vtable for clang::sema::FunctionScopeInfo. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:18,deployability,build,build,18,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:64,deployability,Build,Building,64,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:176,deployability,BUILD,BUILD,176,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:236,deployability,build,build,236,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:281,deployability,BUILD,BUILD,281,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:350,deployability,BUILD,BUILD,350,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:412,deployability,BUILD,BUILD,412,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:475,deployability,BUILD,BUILD,475,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:538,deployability,BUILD,BUILD,538,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:594,deployability,BUILD,BUILD,594,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:651,deployability,BUILD,BUILD,651,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:708,deployability,BUILD,BUILD,708,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:765,deployability,BUILD,BUILD,765,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:822,deployability,BUILD,BUILD,822,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:885,deployability,BUILD,BUILD,885,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:944,deployability,BUILD,BUILD,944,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1001,deployability,BUILD,BUILD,1001,ng.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1057,deployability,BUILD,BUILD,1057,5%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1110,deployability,BUILD,BUILD,1110,/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Wo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1179,deployability,BUILD,BUILD,1179,root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__S,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1270,deployability,BUILD,BUILD,1270,pmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwri,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1371,deployability,BUILD,BUILD,1371,metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/met,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1450,deployability,BUILD,BUILD,1450,/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2533,deployability,BUILD,BUILD,2533,"-D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2633,deployability,Build,Building,2633,"sh-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2769,deployability,BUILD,BUILD,2769,"ed-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2829,deployability,build,build,2829,"sibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2874,deployability,BUILD,BUILD,2874,"SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2943,deployability,BUILD,BUILD,2943,"fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /hom",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3005,deployability,BUILD,BUILD,3005,"eturn-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/incl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3068,deployability,BUILD,BUILD,3068,"-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3131,deployability,BUILD,BUILD,3131,"igned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3187,deployability,BUILD,BUILD,3187,"TANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3244,deployability,BUILD,BUILD,3244,"-fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -We",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3301,deployability,BUILD,BUILD,3301,"sed-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fall",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3358,deployability,BUILD,BUILD,3358," -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Wover",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3415,deployability,BUILD,BUILD,3415,"xx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3478,deployability,BUILD,BUILD,3478,"MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_F",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3537,deployability,BUILD,BUILD,3537,"oot-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3594,deployability,BUILD,BUILD,3594,"er are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3650,deployability,BUILD,BUILD,3650,core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3703,deployability,BUILD,BUILD,3703,ctModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Wo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3772,deployability,BUILD,BUILD,3772,root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__S,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3863,deployability,BUILD,BUILD,3863,pmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwri,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3964,deployability,BUILD,BUILD,3964,metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4043,deployability,BUILD,BUILD,4043,/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5208,deployability,BUILD,BUILD,5208,abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -MF CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o.d -o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TClingRdictModuleFileExtension.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:84,energy efficiency,core,core,84,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:205,energy efficiency,core,core,205,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:369,energy efficiency,core,core,369,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:431,energy efficiency,core,core,431,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:494,energy efficiency,core,core,494,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:557,energy efficiency,core,core,557,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:613,energy efficiency,core,core,613,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:670,energy efficiency,core,core,670,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:727,energy efficiency,core,core,727,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:784,energy efficiency,core,core,784,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:841,energy efficiency,core,core,841,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:904,energy efficiency,core,core,904,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:963,energy efficiency,core,core,963,TCling.cxx is not build with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1020,energy efficiency,core,core,1020,d with `-fno-rtti`:. ```. [ 1331s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. [ 1331s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -fl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2366,energy efficiency,core,core,2366,"ld/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2552,energy efficiency,core,core,2552,"3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2653,energy efficiency,core,core,2653,"ror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2798,energy efficiency,core,core,2798,"hread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpret",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2962,energy efficiency,core,core,2962,"nd-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3024,energy efficiency,core,core,3024,"uto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3087,energy efficiency,core,core,3087,"pe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3150,energy efficiency,core,core,3150,"d -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3206,energy efficiency,core,core,3206,"DC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3263,energy efficiency,core,core,3263,"ng -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3320,energy efficiency,core,core,3320,"-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3377,energy efficiency,core,core,3377,"g/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3434,energy efficiency,core,core,3434,"s/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3497,energy efficiency,core,core,3497,"ng.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3556,energy efficiency,core,core,3556,"etacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3613,energy efficiency,core,core,3613,. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -fl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4969,energy efficiency,core,core,4969,abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -MF CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o.d -o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TClingRdictModuleFileExtension.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:5227,energy efficiency,core,core,5227,abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -MF CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o.d -o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TClingRdictModuleFileExtension.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2308,modifiability,paramet,parameter,2308,"vm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o CMakeFiles/MetaCling.dir/TCling.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TCling.cxx. ```. while other are, e.g.:. ```. [ 1327s] [ 75%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 1327s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4901,modifiability,paramet,parameter,4901,abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -MF CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o.d -o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o -c /home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/src/TClingRdictModuleFileExtension.cxx. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1219,usability,tool,tools,1219,c && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1320,usability,tool,tools,1320,de -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3812,usability,tool,tools,3812,c && /var/lib/build/ccache/bin/c++ -I/home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/include -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3913,usability,tool,tools,3913,de -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/metacling/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clingutils/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/zip/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/res -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/base/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/meta/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/clib/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/foundation/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/thread/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/cont/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/core/gui/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/io/io/inc -I/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/ginclude -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/tools/clang/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include -isystem /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/interpreter/llvm/src/include -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -fPIC -fvisibility-inlines-hidden -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -flto=auto -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:145,energy efficiency,core,core,145,Obvious reason - `-fno-rtti` is only set for 3 source files:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L15-L19,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:140,energy efficiency,core,core,140,"The culprit is `ClingRAII.h`, included from TCling.cxx:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/ClingRAII.h#L15. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/ClingRAII.h#L37-L45. It should be sufficient to move `SemaExprCleanupsRAII` ctor/dtor to a separate implementation file. The remaining code only needs the `FunctionScopeInfo` forward declaration from `clang/Sema/Sema.h`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:259,energy efficiency,core,core,259,"The culprit is `ClingRAII.h`, included from TCling.cxx:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/ClingRAII.h#L15. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/ClingRAII.h#L37-L45. It should be sufficient to move `SemaExprCleanupsRAII` ctor/dtor to a separate implementation file. The remaining code only needs the `FunctionScopeInfo` forward declaration from `clang/Sema/Sema.h`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1,availability,sli,slight,1,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:158,deployability,releas,released,158,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:167,deployability,version,versions,167,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:316,deployability,build,builds,316,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:597,deployability,build,build-root,597,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:636,deployability,build,build,636,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:651,deployability,BUILD,BUILD,651,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:807,deployability,build,build-root,807,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:846,deployability,build,build,846,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:861,deployability,BUILD,BUILD,861,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1337,deployability,contain,contain,1337,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1482,deployability,observ,observe,1482,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:680,energy efficiency,core,core,680,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:890,energy efficiency,core,core,890,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:167,integrability,version,versions,167,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,integrability,interfac,interface,1258,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:363,interoperability,share,shared,363,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,interoperability,interfac,interface,1258,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:167,modifiability,version,versions,167,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:642,modifiability,pac,packages,642,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:852,modifiability,pac,packages,852,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,modifiability,interfac,interface,1258,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1,reliability,sli,slight,1,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:458,reliability,doe,doesn,458,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:383,safety,test,tested,383,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:383,testability,test,tested,383,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1455,testability,understand,understand,1455,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1482,testability,observ,observe,1482,"(slight correction to what I said before: Since https://github.com/root-project/root/pull/10289 LLVM is built *with* RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). > `find /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/ -iname \*o -print -exec nm -C --undefined '{}' \; | grep -E 'cxx.o| clang::sema'`. > . > ```. > ... > /var/tmp/build-root/openSUSE_Tumbleweed-x86_64/.build.packages/BUILD/root-6.26.06/_builddir/core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o. > U clang::sema::FunctionScopeInfo::~FunctionScopeInfo(). > U typeinfo for clang::sema::FunctionScopeInfo. > U vtable for clang::sema::FunctionScopeInfo. > ```. Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3,availability,sli,slight,3,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:119,deployability,releas,released,119,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:128,deployability,version,versions,128,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:283,deployability,build,builds,283,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:830,deployability,BUILD,BUILD,830,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3152,deployability,depend,dependent,3152,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3662,deployability,contain,contain,3662,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3807,deployability,observ,observe,3807,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4020,deployability,version,version,4020,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:859,energy efficiency,core,core,859,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:128,integrability,version,versions,128,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3152,integrability,depend,dependent,3152,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3583,integrability,interfac,interface,3583,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4020,integrability,version,version,4020,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:336,interoperability,share,shared,336,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:650,interoperability,share,shared,650,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1381,interoperability,share,shared,1381,"XE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2188,interoperability,XML,XMLReader,2188,"noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAK",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3583,interoperability,interfac,interface,3583,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:128,modifiability,version,versions,128,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2119,modifiability,Variab,VariableSelectionRule,2119," -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the exec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3152,modifiability,depend,dependent,3152,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3313,modifiability,variab,variable,3313,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3583,modifiability,interfac,interface,3583,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4020,modifiability,version,version,4020,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3145,performance,time,time,3145,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3404,performance,time,time,3404,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3,reliability,sli,slight,3,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:431,reliability,doe,doesn,431,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:356,safety,test,tested,356,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3152,safety,depend,dependent,3152,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1362,security,hash,hash-style,1362,"ng it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseCl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1938,security,Scanner,Scanner,1938,".txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:356,testability,test,tested,356,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...). > . > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds. > . > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored. ```. [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1. [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3152,testability,depend,dependent,3152,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3780,testability,understand,understand,3780,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3807,testability,observ,observe,3807,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:4038,testability,verif,verified,4038,".dir/src/VariableSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o CMakeFiles/MetaCling.dir/ClingRAII.cxx.o CMakeFiles/MetaCling.dir/TCling.cxx.o CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,:::::::::::::::::::::::: -Wl,--unresolved-symbols=ignore-in-object-files . ```. 2. When linking the executable a built time - dependent on `--no-undefined` in the CMAKE_EXE_LINKER_FLAGS. 3. At runtime at startup, when the runtime linker uses LD_BIND_NOW (man ld.so) - either set via env variable, or by default with `-Wl,-z,now`. 4. At runtime when the symbol is used the first time (without LD_BIND_NOW). > Unfortunately I cannot reproduce this on my end. It's correct that only a few files are compiled with `-fno-rtti`, all others including `TCling.cxx` interface with the rest of ROOT and must be built with RTTI. They should never contain code that references RTTI of LLVM classes, and while it's possible that we overlooked something I don't quite understand why we can only observe the problem in very limited environments... See above for what has been overlooked. `TCling.cxx` calls the `ScopeInfo` dtor, and thus references its vtable. Are you using Clang or GCC for compiling? Which version? Have you verified `-Wl,--no-undefined` is actually used when linking `rootcling`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:55,deployability,version,versions,55,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:487,deployability,build,building,487,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:538,deployability,build,building,538,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:564,energy efficiency,current,currently,564,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:748,energy efficiency,alloc,allocate,748,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:55,integrability,version,versions,55,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:55,modifiability,version,versions,55,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:551,modifiability,pac,package,551,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:680,modifiability,required chang,required changes,680,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:757,performance,time,time,757,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:248,reliability,doe,doesn,248,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:735,security,team,team,735,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:128,testability,verif,verified,128,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:473,usability,support,supported,473,"I've tried both Clang and GCC, the latter in different versions (8.5 from CentOS 8 Stream and 12.1.0 built from source). I also verified that `-Wl,--no-undefined` is there when linking `rootcling`. But this is really not relevant if `TCling.cxx.o` doesn't reference undefined symbols. So I focused on this point and found that `-flto` is the culprit; with LTO enabled I see the undefined references in `TCling.cxx.o`. I talked to a colleague and LTO is (traditionally) not supported for building ROOT. Could you turn that off please when building the package? I'm currently re-evaluating on my side what amount of problems exist with LTO, but it might not be fixed in 6.26 if the required changes are invasive or never if we (the ROOT team) cannot allocate time on solving all the issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:90,availability,avail,available,90,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:28,energy efficiency,current,currently,28,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:19,reliability,doe,does,19,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:90,reliability,availab,available,90,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:90,safety,avail,available,90,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:90,security,availab,available,90,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:38,usability,support,support,38,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:108,usability,progress,progress,108,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:137,usability,close,close,137,Unfortunately ROOT does not currently support LTO and we do not have at the moment effort available to make progress there. I propose to close this item because of that and because we already have an issue about LTO here https://github.com/root-project/root/issues/11657,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/pull/10780:79,safety,test,test,79,"Thank you for the contribution, looks good to me. I will try to include also a test for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:79,testability,test,test,79,"Thank you for the contribution, looks good to me. I will try to include also a test for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:115,deployability,releas,release,115,"Hi Lorenzo, thank you for your feedback 😀! Do you know by any chance if this fix will be included in the next ROOT release? It is important for us to know if we should wait or implement some workaround in our project code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:31,usability,feedback,feedback,31,"Hi Lorenzo, thank you for your feedback 😀! Do you know by any chance if this fix will be included in the next ROOT release? It is important for us to know if we should wait or implement some workaround in our project code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:37,deployability,releas,release,37,"Hi, the fix will be in the next ROOT release, 6.28. Do you need also for the patch release 6.26 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:77,deployability,patch,patch,77,"Hi, the fix will be in the next ROOT release, 6.28. Do you need also for the patch release 6.26 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:83,deployability,releas,release,83,"Hi, the fix will be in the next ROOT release, 6.28. Do you need also for the patch release 6.26 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:77,safety,patch,patch,77,"Hi, the fix will be in the next ROOT release, 6.28. Do you need also for the patch release 6.26 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:77,security,patch,patch,77,"Hi, the fix will be in the next ROOT release, 6.28. Do you need also for the patch release 6.26 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:73,deployability,patch,patch,73,@lmoneta no rush. I added a workaround in my program code. So no need to patch 6.26,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:73,safety,patch,patch,73,@lmoneta no rush. I added a workaround in my program code. So no need to patch 6.26,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:73,security,patch,patch,73,@lmoneta no rush. I added a workaround in my program code. So no need to patch 6.26,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:190,deployability,log,log,190,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:194,integrability,messag,messages,194,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:194,interoperability,messag,messages,194,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:101,performance,time,time,101,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:190,safety,log,log,190,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:190,security,log,log,190,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:143,testability,simpl,simple,143,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:190,testability,log,log,190,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:143,usability,simpl,simple,143,@petrstepanov : Thank you for the contribution that now is merged! I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. . Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10781:37,integrability,sub,submitting,37,And *thank you* for raising this and submitting this PR! ❤️,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/issues/10784:18,deployability,updat,update,18,"Hi ROOT team, any update on this? Let me know if you need any more information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:18,safety,updat,update,18,"Hi ROOT team, any update on this? Let me know if you need any more information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:8,security,team,team,8,"Hi ROOT team, any update on this? Let me know if you need any more information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:18,security,updat,update,18,"Hi ROOT team, any update on this? Let me know if you need any more information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:19,usability,progress,progress,19,Has there been any progress on this issue?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/pull/10787:11,deployability,build,build,11,"@phsft-bot build on ROOT-performance-centos8-multicore/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:25,performance,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos8-multicore/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:25,usability,perform,performance-,25,"@phsft-bot build on ROOT-performance-centos8-multicore/cxx17, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:0,availability,ping,ping,0,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:33,availability,failur,failures,33,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:33,deployability,fail,failures,33,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:33,performance,failur,failures,33,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:33,reliability,fail,failures,33,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:28,safety,test,test,28,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:28,testability,test,test,28,"ping... (in my opinion, the test failures aren't related to the changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:8,availability,ping,ping,8,another ping @Axel-Naumann @guitargeek @lmoneta ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:8,availability,ping,ping,8,"a third ping @Axel-Naumann @guitargeek @lmoneta . https://github.com/root-project/root/pull/10832 introduced two more instances of this warning, which I've now added to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:198,safety,compl,complains,198,"> #10832 introduced two more instances of this warning, which I've now added to this PR. Removed again as part of #10966, force-pushing without touching these files and then merging (unless Jenkins complains)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:198,security,compl,complains,198,"> #10832 introduced two more instances of this warning, which I've now added to this PR. Removed again as part of #10966, force-pushing without touching these files and then merging (unless Jenkins complains)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10789:37,safety,compl,complicated,37,Closed for now because this was more complicated than I thought...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10789
https://github.com/root-project/root/pull/10789:37,security,compl,complicated,37,Closed for now because this was more complicated than I thought...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10789
https://github.com/root-project/root/pull/10789:0,usability,Close,Closed,0,Closed for now because this was more complicated than I thought...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10789
https://github.com/root-project/root/pull/10790:0,energy efficiency,cool,cool,0,cool! if there is a direct usage of the wrong size it should be easy to see it in a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:84,safety,test,test,84,cool! if there is a direct usage of the wrong size it should be easy to see it in a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:84,testability,test,test,84,cool! if there is a direct usage of the wrong size it should be easy to see it in a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10791:46,performance,time,time,46,"Thanks! Yes, he agreed with that already some time ago",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10793:15,interoperability,conflict,conflicts,15,Rebased to fix conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:15,interoperability,conflict,conflicts,15,Rebased to fix conflicts,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10795:193,safety,review,review,193,"> Good work, @glmiotto! Thanks! :slightly_smiling_face:. > . > I have suggested some minor changes that we can apply before merging. Pretty great suggestions, @jalopezg-r00t! Thank you for the review :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:193,testability,review,review,193,"> Good work, @glmiotto! Thanks! :slightly_smiling_face:. > . > I have suggested some minor changes that we can apply before merging. Pretty great suggestions, @jalopezg-r00t! Thank you for the review :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10796:22,availability,failur,failure,22,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:11,deployability,build,build,11,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:22,deployability,fail,failure,22,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:22,performance,failur,failure,22,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:22,reliability,fail,failure,22,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:187,availability,error,errors,187,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:187,performance,error,errors,187,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:187,safety,error,errors,187,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:261,safety,test,test,261,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:256,testability,unit,unit,256,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:261,testability,test,test,261,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:187,usability,error,errors,187,"Thanks! No, a backport is not needed, the workspaces I got from Carsten (produced with ROOT 5.32) still read fine with the latest 6.26. In master there are still some other remining read errors which I hope to fix in a next PR. Unfortunately we can't do a unit test with this workspace because it's ATLAS internal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10797:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/issues/10799:175,availability,failur,failures,175,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:175,deployability,fail,failures,175,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:261,deployability,patch,patch,261,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:175,performance,failur,failures,175,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:175,reliability,fail,failures,175,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:192,safety,test,test,192,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:261,safety,patch,patch,261,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:261,security,patch,patch,261,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:192,testability,test,test,192,"This is CPyCppyy upstream's commit:. https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005. If I backport this commit to root, I still get the same failures in some test during the Python garbage collection as when I use my attempted patch above. Are there other changes from upstream that are relevant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:169,availability,error,errors,169,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:253,deployability,fail,failing,253,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:169,performance,error,errors,169,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:107,reliability,doe,does,107,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:253,reliability,fail,failing,253,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:169,safety,error,errors,169,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:185,safety,test,tests,185,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:243,safety,test,tests,243,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:185,testability,test,tests,185,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:243,testability,test,tests,243,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:169,usability,error,errors,169,"I also tried those upstream changes, plus removing the GC flag in `TypedefPointerToClass_Type` (which also does not define a traverse function), and I still get some GC errors in a few tests as well. I need to investigate why those particular tests are failing, I will report here when I have news.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:74,availability,failur,failures,74,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:101,availability,failur,failures,101,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:322,availability,failur,failures,322,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:74,deployability,fail,failures,74,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:86,deployability,observ,observed,86,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:101,deployability,fail,failures,101,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:152,deployability,manag,management,152,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:322,deployability,fail,failures,322,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:152,energy efficiency,manag,management,152,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:74,performance,failur,failures,74,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:101,performance,failur,failures,101,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:145,performance,memor,memory,145,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:322,performance,failur,failures,322,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:349,performance,time,time,349,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:74,reliability,fail,failures,74,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:101,reliability,fail,failures,101,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:322,reliability,fail,failures,322,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:69,safety,test,test,69,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:152,safety,manag,management,152,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:69,testability,test,test,69,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:86,testability,observ,observed,86,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:145,usability,memor,memory,145,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/pull/10802:100,modifiability,exten,extended,100,"For better comparison, the offset is computed as the same point as in serial mode: after adding the extended term, but without considering the constraints.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10802
https://github.com/root-project/root/pull/10803:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10807:21,deployability,contain,contains,21,The PR is broken: it contains unrelated commits and a merge commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10807
https://github.com/root-project/root/pull/10807:18,testability,understand,understand,18,Damn ... I do not understand what's wrong. Ill try something else.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10807
https://github.com/root-project/root/pull/10811:13,availability,error,error,13,"The roostats error is once again llvm related, and not to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:13,performance,error,error,13,"The roostats error is once again llvm related, and not to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:13,safety,error,error,13,"The roostats error is once again llvm related, and not to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:13,usability,error,error,13,"The roostats error is once again llvm related, and not to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/issues/10814:58,deployability,version,version,58,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:79,deployability,version,version,79,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:94,deployability,instal,installed,94,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:118,deployability,build,build,118,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:172,deployability,version,version,172,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:237,deployability,instal,installed,237,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:293,deployability,version,version,293,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:336,deployability,build,build,336,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:58,integrability,version,version,58,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:79,integrability,version,version,79,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:172,integrability,version,version,172,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:293,integrability,version,version,293,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:58,modifiability,version,version,58,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:79,modifiability,version,version,79,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:172,modifiability,version,version,172,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:293,modifiability,version,version,293,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:360,reliability,doe,doesn,360,"I seem to have found the problem. The system had an older version of json.hpp (version 3.6.1) installed, and the root build was trying to use that instead of the json.hpp (version 3.9.1) that was bundled with the root source. Moving the installed file out of the way and replacing it with the version from the root source allowed me to build root. (So far, it doesn't appear to have broken anything else.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:95,deployability,build,building,95,"Hi @catselbow , thank you for following up. Should we close this as clarified? As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:162,deployability,instal,install,162,"Hi @catselbow , thank you for following up. Should we close this as clarified? As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:54,usability,close,close,54,"Hi @catselbow , thank you for following up. Should we close this as clarified? As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:133,usability,support,supported,133,"Hi @catselbow , thank you for following up. Should we close this as clarified? As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:25,deployability,version,version,25,I propose to set minimal version number when searching external nlohmann to 3.9 . https://github.com/root-project/root/pull/10817. I hope it should solve the problem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:25,integrability,version,version,25,I propose to set minimal version number when searching external nlohmann to 3.9 . https://github.com/root-project/root/pull/10817. I hope it should solve the problem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:25,modifiability,version,version,25,I propose to set minimal version number when searching external nlohmann to 3.9 . https://github.com/root-project/root/pull/10817. I hope it should solve the problem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:17,usability,minim,minimal,17,I propose to set minimal version number when searching external nlohmann to 3.9 . https://github.com/root-project/root/pull/10817. I hope it should solve the problem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:103,deployability,build,building,103,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:170,deployability,instal,install,170,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:401,deployability,version,version,401,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:500,deployability,instal,installed,500,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:534,deployability,version,version,534,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:401,integrability,version,version,401,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:534,integrability,version,version,534,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:401,modifiability,version,version,401,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:465,modifiability,pac,package,465,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:534,modifiability,version,version,534,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:56,usability,close,close,56,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:141,usability,support,supported,141,"> Hi @catselbow , thank you for following up. Should we close this as clarified? > . > As a side note, building ROOT with devtoolset is [not supported](https://root.cern/install/build_from_source/#caveats) and we had several reports on the forum of compilation issues. Things work fine for you? As far as I can tell, things look fine. Devtoolset-11 just changes your environment so that gcc 11 is the version you get when you type gcc or g++. (Note that the cmake3 package from EPEL also needs to be installed, to get root's required version of cmake.). From my perspective, it looks like the issue is resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:56,usability,close,close,56,"Thank you @linev , assigning this issue to you then, to close when the PR is merged. @catselbow it's surprising (but a welcome surprise) to hear that compiling ROOT with devtoolset works for you, thank you for following up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:227,deployability,version,version,227,"> Ah, about devtoolset @Axel-Naumann points out that ""Compiling should not be a problem. But interpreting anything that needs e.g. a move constructor will cause a missing symbol."". Is that with devtoolset-11 or with some other version? Is there a minimal example that illustrates the problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:227,integrability,version,version,227,"> Ah, about devtoolset @Axel-Naumann points out that ""Compiling should not be a problem. But interpreting anything that needs e.g. a move constructor will cause a missing symbol."". Is that with devtoolset-11 or with some other version? Is there a minimal example that illustrates the problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:227,modifiability,version,version,227,"> Ah, about devtoolset @Axel-Naumann points out that ""Compiling should not be a problem. But interpreting anything that needs e.g. a move constructor will cause a missing symbol."". Is that with devtoolset-11 or with some other version? Is there a minimal example that illustrates the problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:247,usability,minim,minimal,247,"> Ah, about devtoolset @Axel-Naumann points out that ""Compiling should not be a problem. But interpreting anything that needs e.g. a move constructor will cause a missing symbol."". Is that with devtoolset-11 or with some other version? Is there a minimal example that illustrates the problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:48,deployability,version,version,48,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:108,deployability,toolchain,toolchain,108,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:48,integrability,version,version,48,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:48,modifiability,version,version,48,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:98,usability,support,supported,98,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:108,usability,tool,toolchain,108,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:156,usability,minim,minimal,156,"> Is that with devtoolset-11 or with some other version? We don't really track this as it's not a supported toolchain, so I don't know, sorry. > Is there a minimal example that illustrates the problem? There are some instances of problems on the forum, see https://root-forum.cern.ch/search?q=devtoolset",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/pull/10815:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10821:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/issues/10824:88,deployability,version,version,88,I think we can make it a Warning but it is legal to have a ClassDef with non-zero class version and no I/O constructor. For the example that particular class might be used only as a nested member of another class (hence the I/O never need to constructor directly that type of object).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:88,integrability,version,version,88,I think we can make it a Warning but it is legal to have a ClassDef with non-zero class version and no I/O constructor. For the example that particular class might be used only as a nested member of another class (hence the I/O never need to constructor directly that type of object).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:88,modifiability,version,version,88,I think we can make it a Warning but it is legal to have a ClassDef with non-zero class version and no I/O constructor. For the example that particular class might be used only as a nested member of another class (hence the I/O never need to constructor directly that type of object).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:103,performance,I/O,I/O,103,I think we can make it a Warning but it is legal to have a ClassDef with non-zero class version and no I/O constructor. For the example that particular class might be used only as a nested member of another class (hence the I/O never need to constructor directly that type of object).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:224,performance,I/O,I/O,224,I think we can make it a Warning but it is legal to have a ClassDef with non-zero class version and no I/O constructor. For the example that particular class might be used only as a nested member of another class (hence the I/O never need to constructor directly that type of object).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:52,availability,error,error,52,"Ah okay I see! Okay then it should not be a compile error, but indeed a warning would be very appreciated :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:52,performance,error,error,52,"Ah okay I see! Okay then it should not be a compile error, but indeed a warning would be very appreciated :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:52,safety,error,error,52,"Ah okay I see! Okay then it should not be a compile error, but indeed a warning would be very appreciated :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:52,usability,error,error,52,"Ah okay I see! Okay then it should not be a compile error, but indeed a warning would be very appreciated :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:58,performance,time,time,58,"I don't need this anymore at this point, it's been a long time since I forgot the IO constructor for the last time :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:110,performance,time,time,110,"I don't need this anymore at this point, it's been a long time since I forgot the IO constructor for the last time :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/pull/10825:23,availability,failur,failure,23,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:23,deployability,fail,failure,23,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:23,performance,failur,failure,23,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:23,reliability,fail,failure,23,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:18,safety,test,test,18,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:18,testability,test,test,18,Typical unrelated test failure that is caused by `llvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10826:11,deployability,build,build,11,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:46,deployability,patch,patch,46,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:121,deployability,fail,failing,121,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:121,reliability,fail,failing,121,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:46,safety,patch,patch,46,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:69,safety,test,test,69,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:157,safety,test,testcase,157,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:46,security,patch,patch,46,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:69,testability,test,test,69,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:157,testability,test,testcase,157,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:140,usability,help,help,140,@phsft-bot build! As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:154,deployability,patch,patch,154,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:125,safety,reme,remember,125,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:154,safety,patch,patch,154,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:187,safety,test,testcase,187,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:154,security,patch,patch,154,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:138,testability,context,context,138,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:187,testability,test,testcase,187,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:172,usability,help,help,172,"@smuzaffar, can you apply this PR in cmssw and see if something breaks? @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:27,reliability,pra,pragma,27,"A simple `interp.declare(""#pragma once"")` should be enough. The original case was a header that got embedded verbatim in a dictionary, through genreflex, iirc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:2,testability,simpl,simple,2,"A simple `interp.declare(""#pragma once"")` should be enough. The original case was a header that got embedded verbatim in a dictionary, through genreflex, iirc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:2,usability,simpl,simple,2,"A simple `interp.declare(""#pragma once"")` should be enough. The original case was a header that got embedded verbatim in a dictionary, through genreflex, iirc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:174,deployability,fail,failed,174,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:174,reliability,fail,failed,174,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:92,safety,test,tests,92,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:210,safety,test,tests,210,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:230,safety,test,tests,230,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:92,testability,test,tests,92,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:210,testability,test,tests,210,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:230,testability,test,tests,230,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks? > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:110,deployability,build,build,110,"Thanks @smuzaffar! @Axel-Naumann the example you proposed works with this PR applied:. ```. vvassilev@vv-nuc /build/vvassilev/root-release-master $ root.exe -l -b. root [0] gInterpreter->Declare(""#pragma once""). (bool) true. root [1] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:131,deployability,releas,release-master,131,"Thanks @smuzaffar! @Axel-Naumann the example you proposed works with this PR applied:. ```. vvassilev@vv-nuc /build/vvassilev/root-release-master $ root.exe -l -b. root [0] gInterpreter->Declare(""#pragma once""). (bool) true. root [1] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:197,reliability,pra,pragma,197,"Thanks @smuzaffar! @Axel-Naumann the example you proposed works with this PR applied:. ```. vvassilev@vv-nuc /build/vvassilev/root-release-master $ root.exe -l -b. root [0] gInterpreter->Declare(""#pragma once""). (bool) true. root [1] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10827:22,availability,failur,failures,22,@phsft-bot build! The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:11,deployability,build,build,11,@phsft-bot build! The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:22,deployability,fail,failures,22,@phsft-bot build! The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:22,performance,failur,failures,22,@phsft-bot build! The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:22,reliability,fail,failures,22,@phsft-bot build! The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10829:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10830:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:10,deployability,fail,failing,10,"IIUC, the failing tests have something to do with my PR, so it can't be reverted. But I wonder why we need to add `ATTRDUMP`? I guess `R""()""` is enough to stringify `""` and `/`? @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:10,reliability,fail,failing,10,"IIUC, the failing tests have something to do with my PR, so it can't be reverted. But I wonder why we need to add `ATTRDUMP`? I guess `R""()""` is enough to stringify `""` and `/`? @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:18,safety,test,tests,18,"IIUC, the failing tests have something to do with my PR, so it can't be reverted. But I wonder why we need to add `ATTRDUMP`? I guess `R""()""` is enough to stringify `""` and `/`? @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:18,testability,test,tests,18,"IIUC, the failing tests have something to do with my PR, so it can't be reverted. But I wonder why we need to add `ATTRDUMP`? I guess `R""()""` is enough to stringify `""` and `/`? @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:131,usability,clear,clear,131,You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:84,safety,valid,valid,84,"This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:90,safety,test,test,90,"This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:90,testability,test,test,90,"This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1031,availability,avail,availability-swift,1031,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1230,availability,error,error,1230,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:167,deployability,patch,patch,167,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:194,deployability,fail,failed,194,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:208,deployability,Fail,Failed,208,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:612,integrability,sub,subject-match-rules,612,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:672,integrability,sub,subject-match-rules,672,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:857,integrability,sub,subjects,857,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1230,performance,error,error,1230,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:194,reliability,fail,failed,194,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:208,reliability,Fail,Failed,208,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:591,reliability,pra,pragma-attribute-cxx-subject-match-rules,591,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:650,reliability,pra,pragma-attribute-objc-subject-match-rules,650,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:708,reliability,pra,pragma-multiple-attributes,708,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:754,reliability,pra,pragma-attribute-cxx,754,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:794,reliability,pra,pragma-attribute-objc,794,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:833,reliability,pra,pragma-attribute-strict-subjects,833,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1031,reliability,availab,availability-swift,1031,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:86,safety,valid,valid,86,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:92,safety,test,test,92,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:167,safety,patch,patch,167,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:174,safety,test,tests,174,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:215,safety,Test,Tests,215,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1031,safety,avail,availability-swift,1031,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1197,safety,test,test,1197,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1230,safety,error,error,1230,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1273,safety,input,input,1273,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1310,safety,test,test,1310,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1496,safety,test,test,1496,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:167,security,patch,patch,167,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1031,security,availab,availability-swift,1031,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:92,testability,test,test,92,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:174,testability,test,tests,174,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:215,testability,Test,Tests,215,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1197,testability,test,test,1197,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1310,testability,test,test,1310,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1496,testability,test,test,1496,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1230,usability,error,error,1230,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1273,usability,input,input,1273,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1653,usability,clear,clear,1653,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:. ```. Failed Tests (23): . Clang :: AST/ast-dump-attr.cpp . Clang :: AST/ast-dump-attr.m . Clang :: AST/ast-dump-c-attr.c . Clang :: AST/ast-dump-color.cpp . Clang :: AST/ast-dump-wasm-attr-export.c . Clang :: AST/ast-dump-wasm-attr-import.c . Clang :: AST/ast-print-attr.c. Clang :: AST/attr-swift_attr.m. Clang :: AST/attr-swift_bridge.m. Clang :: AST/category-attribute.m. Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp. Clang :: AST/pragma-attribute-objc-subject-match-rules.m. Clang :: AST/pragma-multiple-attributes.cpp. Clang :: Misc/pragma-attribute-cxx.cpp. Clang :: Misc/pragma-attribute-objc.m. Clang :: Misc/pragma-attribute-strict-subjects.c. Clang :: OpenMP/assumes_codegen.cpp. Clang :: OpenMP/assumes_print.cpp. Clang :: OpenMP/assumes_template_print.cpp. Clang :: Sema/ast-print.c. Clang :: Sema/attr-availability-swift.c. Clang :: SemaCXX/cxx11-attr-print.cpp. Clang :: SemaTemplate/attributes.cpp. ```. A broken example like:. ```. /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input . // CHECK: int fun_asm() asm(""test""); . ^ . <stdin>:3:46: note: scanning from here . using C = int ((*))() __attribute__((cdecl)); . ^ . <stdin>:4:1: note: possible intended match here . int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); . ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:16,deployability,patch,patch,16,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:43,deployability,fail,failed,43,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:116,deployability,patch,patch,116,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:43,reliability,fail,failed,43,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:16,safety,patch,patch,16,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:23,safety,test,tests,23,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:116,safety,patch,patch,116,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:16,security,patch,patch,16,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:116,security,patch,patch,116,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:23,testability,test,tests,23,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`? Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:115,safety,valid,valid,115,"Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:13,testability,understand,understand,13,"Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:351,deployability,patch,patch,351,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:117,safety,valid,valid,117,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:351,safety,patch,patch,351,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:395,safety,test,tests,395,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:351,security,patch,patch,351,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:15,testability,understand,understand,15,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:395,testability,test,tests,395,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:84,deployability,patch,patch,84,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:234,deployability,patch,patch,234,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:84,safety,patch,patch,84,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:108,safety,valid,valid,108,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:234,safety,patch,patch,234,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:84,security,patch,patch,84,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:234,security,patch,patch,234,"Hi @AaronBallman,. Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1010,availability,failur,failures,1010,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1075,availability,failur,failure,1075,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:92,deployability,patch,patch,92,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:242,deployability,patch,patch,242,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:307,deployability,patch,patch,307,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1010,deployability,fail,failures,1010,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1075,deployability,fail,failure,1075,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1112,interoperability,specif,specifically,1112,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1010,performance,failur,failures,1010,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1075,performance,failur,failure,1075,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:441,reliability,doe,doesn,441,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1010,reliability,fail,failures,1010,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1075,reliability,fail,failure,1075,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:92,safety,patch,patch,92,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:116,safety,valid,valid,116,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:242,safety,patch,patch,242,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:307,safety,patch,patch,307,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1005,safety,test,test,1005,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:92,security,patch,patch,92,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:242,security,patch,patch,242,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:307,security,patch,patch,307,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:280,testability,understand,understand,280,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1005,testability,test,test,1005,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:488,usability,user,user,488,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:573,usability,user,user,573,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:636,usability,behavi,behavioral,636,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:775,usability,behavi,behavior,775,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:824,usability,behavi,behavior,824,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1176,usability,user,user-provided,1176,"> Hi @AaronBallman,. > . > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable? I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:150,availability,state,statement,150,"@AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:150,integrability,state,statement,150,"@AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:56,usability,user,user-defined,56,"@AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:106,usability,document,documentation,106,"@AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:152,availability,state,statement,152,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:152,integrability,state,statement,152,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:318,interoperability,semant,semantic,318,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:360,performance,content,contents,360,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:593,performance,content,contents,593,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:58,usability,user,user-defined,58,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:108,usability,document,documentation,108,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:408,usability,user,user,408,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:460,usability,user,user,460,"> @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:154,availability,state,statement,154,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:695,deployability,automat,automatically,695,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:875,deployability,contain,contain,875,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1102,deployability,contain,contain,1102,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1253,deployability,infrastructur,infrastructure,1253,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1341,deployability,API,API,1341,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1362,deployability,contain,contains,1362,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:154,integrability,state,statement,154,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1341,integrability,API,API,1341,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:326,interoperability,semant,semantic,326,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1341,interoperability,API,API,1341,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1502,modifiability,scal,scaling,1502,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:368,performance,content,contents,368,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:601,performance,content,contents,601,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:653,performance,I/O,I/O,653,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:716,performance,disk,disk,716,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:695,testability,automat,automatically,695,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:60,usability,user,user-defined,60,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:110,usability,document,documentation,110,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:416,usability,user,user,416,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:468,usability,user,user,468,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1084,usability,user,user,1084,"> > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > . > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:59,availability,down,down,59,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:179,deployability,contain,contains,179,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:361,deployability,patch,patch,361,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:353,energy efficiency,current,current,353,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:261,modifiability,scal,scaling,261,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:361,safety,patch,patch,361,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:342,security,modif,modify,342,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:361,security,patch,patch,361,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:156,availability,state,statement,156,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2630,availability,down,down,2630,"anation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the cod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:713,deployability,automat,automatically,713,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:893,deployability,contain,contain,893,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1126,deployability,contain,contain,1126,"oses. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1277,deployability,infrastructur,infrastructure,1277,"that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1371,deployability,API,API,1371,"nd the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-pri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1392,deployability,contain,contains,1392,"parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the ra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2750,deployability,contain,contains,2750," literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argume",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2938,deployability,patch,patch,2938,"rint action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test"")))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2930,energy efficiency,current,current,2930,"n AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:156,integrability,state,statement,156,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1371,integrability,API,API,1371,"nd the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-pri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3391,integrability,compon,component,3391,"w prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:338,interoperability,semant,semantic,338,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1371,interoperability,API,API,1371,"nd the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-pri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2260,interoperability,semant,semantic,2260,"ng attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2347,interoperability,specif,specifies,2347,"teAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `to",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3391,interoperability,compon,component,3391,"w prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1532,modifiability,scal,scaling,1532,"prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal con",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1869,modifiability,scal,scaling,1869," declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2832,modifiability,scal,scaling,2832,"ss __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3391,modifiability,compon,component,3391,"w prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3842,modifiability,scal,scaling,3842,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3909,modifiability,scal,scaling,3909,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4157,modifiability,scal,scaling,4157,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:380,performance,content,contents,380,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:613,performance,content,contents,613,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:671,performance,I/O,I/O,671,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:734,performance,disk,disk,734,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2300,performance,content,contents,2300," I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2533,performance,content,contents,2533,"ng ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see wheth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2938,safety,patch,patch,2938,"rint action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test"")))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3830,safety,test,test,3830,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3933,safety,test,test,3933,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4144,safety,test,test,4144,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4308,safety,test,test,4308,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4315,safety,test,testing,4315,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4358,safety,test,test,4358,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4365,safety,test,testing,4365,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4388,safety,test,testtesting,4388,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2919,security,modif,modify,2919,"when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""proj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2938,security,patch,patch,2938,"rint action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test"")))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3070,security,control,control,3070," dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3138,security,control,control,3138," that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3493,security,token,token,3493,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:713,testability,automat,automatically,713,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3070,testability,control,control,3070," dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3138,testability,control,control,3138," that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3830,testability,test,test,3830,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3933,testability,test,test,3933,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4144,testability,test,test,4144,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4308,testability,test,test,4308,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4315,testability,test,testing,4315,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4358,testability,test,test,4358,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4365,testability,test,testing,4365,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4388,testability,test,testtesting,4388,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:62,usability,user,user-defined,62,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:112,usability,document,documentation,112,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:428,usability,user,user,428,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:480,usability,user,user,480,"> > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable bec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1108,usability,user,user,1108,"r documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > . > > . > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > . > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1808,usability,minim,minimum,1808,"ader files by synthesizing attribute-annotated entity forward declarations which contain strings. > . > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > . > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribut",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2423,usability,user,user,2423,"s - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string liter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3082,usability,behavi,behavior,3082," is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4047,usability,support,support,4047,"the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > . > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind: . ```. class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. ```. thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:158,availability,state,statement,158,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3080,availability,down,down,3080,"here's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:731,deployability,automat,automatically,731,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:911,deployability,contain,contain,911,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1142,deployability,contain,contain,1142,"ed the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1293,deployability,infrastructur,infrastructure,1293,"t line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1385,deployability,API,API,1385," contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1406,deployability,contain,contains,1406," attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3200,deployability,contain,contains,3200," the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3386,deployability,patch,patch,3386,"e are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3378,energy efficiency,current,current,3378,"s and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:158,integrability,state,statement,158,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1385,integrability,API,API,1385," contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3845,integrability,compon,component,3845,"ral contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different en",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:346,interoperability,semant,semantic,346,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1385,interoperability,API,API,1385," contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2581,interoperability,semant,semantic,2581,"in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2668,interoperability,specif,specifies,2668,"ot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly ma",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3845,interoperability,compon,component,3845,"ral contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different en",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1546,modifiability,scal,scaling,1546," that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1895,modifiability,scal,scaling,1895,"tions which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That woul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2373,modifiability,paramet,parameters,2373,"string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3282,modifiability,scal,scaling,3282," of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3845,modifiability,compon,component,3845,"ral contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different en",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4467,modifiability,scal,scaling,4467," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4536,modifiability,scal,scaling,4536," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4792,modifiability,scal,scaling,4792," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:388,performance,content,contents,388,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:621,performance,content,contents,621,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:689,performance,I/O,I/O,689,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:752,performance,disk,disk,752,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2621,performance,content,contents,2621,"Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2854,performance,content,contents,2854,"`class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2512,reliability,diagno,diagnostics,2512,"__attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3386,safety,patch,patch,3386,"e are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4455,safety,test,test,4455," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4560,safety,test,test,4560," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4779,safety,test,test,4779," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4943,safety,test,test,4943," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4950,safety,test,testing,4950," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4993,safety,test,test,4993," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:5000,safety,test,testing,5000," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:5023,safety,test,testtesting,5023," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3367,security,modif,modify,3367,"te parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3386,security,patch,patch,3386,"e are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3524,security,control,control,3524," > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3592,security,control,control,3592,"ute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfull",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3947,security,token,token,3947,"fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" """,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:731,testability,automat,automatically,731,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2512,testability,diagno,diagnostics,2512,"__attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3524,testability,control,control,3524," > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3592,testability,control,control,3592,"ute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfull",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4455,testability,test,test,4455," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4560,testability,test,test,4560," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4779,testability,test,test,4779," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4943,testability,test,test,4943," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4950,testability,test,testing,4950," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4993,testability,test,test,4993," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:5000,testability,test,testing,5000," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:5023,testability,test,testtesting,5023," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:64,usability,user,user-defined,64,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:114,usability,document,documentation,114,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:436,usability,user,user,436,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:488,usability,user,user,488,"> > > > @AaronBallman, one of the use-cases we have is to carry user-defined strings in the attributes mostly for documentation purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1124,usability,user,user,1124,"n purposes. So we need the last statement to work here: https://godbolt.org/z/TEKMEn6YW. > > > . > > > . > > > Maybe we have a different idea of what ""work"" means -- that last line looks approximately correct to me. The semantic attribute is carrying around the contents of the parsed attribute exactly as the user wrote it, but what's lost is the fact that the user wrote the literal with a prefix. Is it the missing prefix that's an issue for you (are you reading the pretty printed or dumped contents)? > > . > > . > > Work here meant compiles. Our system has I/O capability where we synthesize mostly automatically the on-disk reading and writing. We connect the binary files and their originating header files by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1834,usability,minim,minimum,1834,"es by synthesizing attribute-annotated entity forward declarations which contain strings. > > So you are correct, we are compiling code into AST, annotate it with attributes, and generate back C++ code which needs to compile. Some of the strings in the attributes come from comments in user code so they contain everything. That is why we ""escaped"" these comments using raw string literals. We believed that's a general improvement to the clang attribute infrastructure... > > PS: I guess our real problem is calling the `AnnotateAttr` set string API where the string contains characters such as quotes - that cannot be expressed with C++ code but the equivalent would be: `class __attribute__((annotate(""3D scaling ""projection""""))) C;` The quote in the middle breaks compilation. > . > Ahh, thank you for the explanation, it makes a lot more sense to me now what the issue is. > . > FWIW, I think it's a Clang bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2744,usability,user,user,2744,"ng bug that we drop the raw string literal prefix when pretty printing or dumping. At a minimum, I would expect `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;` to round trip properly when doing an AST print action. Dumping the AST is a bit more questionable because that's primarily used for debugging purposes, but there's a JSON node dumper that is meant to be used if you need to process the AST, and that mode seems like it should have the raw string literal prefix. Over the years the AST has been very good in terms of printing compileable code. We have contributed number of improvements for template parameters and we are also now contributing preserving of type sugar. All of this is very important for us but also for clang when issuing diagnostics. > . > That said, I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:3536,usability,behavi,behavior,3536,", I think that internal consumers of the semantic attribute node will expect the contents to be whatever the raw string literal specifies. e.g., `-ast-print` should print the raw prefix and suffix if the user used one, and for things like `*SomeAnnotateAttr->args_begin()` to be a `StringRef` with the raw literal contents but not the prefix/suffix. That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > > @AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:4682,usability,support,support,4682," if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. > > If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"". > . > I don't think the attribute being implicit or not should control the behavior here; I think the parsed string literal should control it. However, due to adjacent string concatenation, doing this properly may take a bit more work than you'd initially think. I think we'll need to inspect the `StringLiteral` expression object, loop over `tokloc_begin()/tokloc_end()` to get each component of the full string literal expression, call `Lexer::getSpelling()` to get the source of the token at that source location, and see whether the start of the string is a raw string literal. . That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > All this mess would get called from the code generated by ClangAttrEmitter so pretty printing (and dumping, if we want) can then decide how to emit the string argument. Some nasty cases to keep in mind:. > . > ```. > class __attribute__((annotate(""test"" R""(3D scaling ""projection"")""))) C1;. > class __attribute__((annotate(R""(3D scaling ""projection"")"" ""test""))) C2;. > ```. > . > thankfully, I don't think you'll have to deal with the other prefixes because I don't think we support the other prefixes. e.g., you don't have to worry about `class __attribute__((annotate(L""test"" LR""(3D scaling ""projection"")""))) C3;` or mixtures of different encoding prefixes. FWIW, I think it's perfectly reasonable for `class __attribute__((annotate(""test"" ""testing""))) C4;` to be pretty printed as `""test"" ""testing""` instead of `""testtesting""` as happens today. Ouch, maybe we can create an issue for this to track it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1533,integrability,sub,subsequent,1533,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1310,interoperability,semant,semantic,1310,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1417,interoperability,semant,semantic,1417,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2031,interoperability,specif,specifies,2031,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2015,modifiability,paramet,parameter,2015,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:493,performance,time,time,493,"> Over the years the AST has been very good in terms of printing compileable code. FWIW, I'm actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Att",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:411,security,sign,significant,411,"> Over the years the AST has been very good in terms of printing compileable code. FWIW, I'm actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Att",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1937,security,modif,modify,1937,"m actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:543,usability,person,person,543,"> Over the years the AST has been very good in terms of printing compileable code. FWIW, I'm actually shocked to hear that. AST printing has always been a best-faith effort and we have *so many* bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. You could modify the `CreateImplicit()` method on the AnnotateAttr in Att",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1173,deployability,build,build,1173,"fort and we have _so many_ bugs with it that I've previously had internal discussions at Intel about proposing a community RFC to remove it entirely because it's almost-but-not-quite unmaintained, but getting it to production quality would be significant effort. The only thing that's held me back from the proposal has been time, but now it sounds like there's at least one person using this functionality (but I honestly don't know how, we do all sorts of wrong stuff on real world code). Here's one trivial example just using the annotate attribute: https://godbolt.org/z/sETxqbTTc (which is a silent break, no less!), but there are dozens of other ways to see things get broken. That's quite surprising to hear. We have been using the printing heavily over the past decade and it is working rather well. We use that approach to store and process around 1EB (exabyte) of physics data. In addition, we use the printing to implement parsing on demand in clang, where we process the full headers, build forward declarations for them and do the full parsing only when a definition is required. I am not saying there are no bugs but the the amount of bugs we encountered is insignificant in comparison to what we were able to achieve. I am happy to talk more about these usecases if you need more convincing this functionality should stay ;). > . > > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2211,integrability,sub,subsequent,2211,"t broken. That's quite surprising to hear. We have been using the printing heavily over the past decade and it is working rather well. We use that approach to store and process around 1EB (exabyte) of physics data. In addition, we use the printing to implement parsing on demand in clang, where we process the full headers, build forward declarations for them and do the full parsing only when a definition is required. I am not saying there are no bugs but the the amount of bugs we encountered is insignificant in comparison to what we were able to achieve. I am happy to talk more about these usecases if you need more convincing this functionality should stay ;). > . > > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. Ah, ok, now I think I understand. > . > > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > . > You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal. That would work perfectly for us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:1988,interoperability,semant,semantic,1988,"t broken. That's quite surprising to hear. We have been using the printing heavily over the past decade and it is working rather well. We use that approach to store and process around 1EB (exabyte) of physics data. In addition, we use the printing to implement parsing on demand in clang, where we process the full headers, build forward declarations for them and do the full parsing only when a definition is required. I am not saying there are no bugs but the the amount of bugs we encountered is insignificant in comparison to what we were able to achieve. I am happy to talk more about these usecases if you need more convincing this functionality should stay ;). > . > > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. Ah, ok, now I think I understand. > . > > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > . > You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal. That would work perfectly for us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:2095,interoperability,semant,semantic,2095,"t broken. That's quite surprising to hear. We have been using the printing heavily over the past decade and it is working rather well. We use that approach to store and process around 1EB (exabyte) of physics data. In addition, we use the printing to implement parsing on demand in clang, where we process the full headers, build forward declarations for them and do the full parsing only when a definition is required. I am not saying there are no bugs but the the amount of bugs we encountered is insignificant in comparison to what we were able to achieve. I am happy to talk more about these usecases if you need more convincing this functionality should stay ;). > . > > That would probably fix a few cases in clang but it may not fix ours in which we create an attribute and pass a StringRef. > . > Hmm, I still think it could fix your case as well (it's a generalization of how to fix your case). However, I may have messed the idea up a little bit when thinking about it. I forgot that `args_begin()`/`args_end()` is for the variadic expression arguments and not for the entire list of arguments. The first argument is held by the semantic attribute as a `StringRef` without a source location, so you'd need to actually keep a bit on the semantic attribute to say ""treat the first argument as being raw"" and would only need to do a special dance for the subsequent arguments (which have source locations because they're `Expr *` objects). For typical attributes, you could set that in SemaDeclAttr.cpp when processing the annotation attribute, because those will have source locations. Ah, ok, now I think I understand. > . > > That won't work for us as we are synthesizing code and there are no source locations, neither a StringLiteral. We create an implicit attribute out of thin air. > . > You could modify the `CreateImplicit()` method on the AnnotateAttr in Attr.td to take a parameter which specifies that the initial argument is a raw string literal. That would work perfectly for us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
